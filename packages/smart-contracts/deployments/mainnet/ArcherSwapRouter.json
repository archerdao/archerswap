{
  "address": "0x87535b160E251167FB7abE239d2467d1127219E4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tipJar",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        }
      ],
      "name": "addLiquidityAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETHAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETHWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permitA",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permitB",
          "type": "tuple"
        }
      ],
      "name": "addLiquidityWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityETHAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityETHWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokensWithTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapETHForExactTokensWithTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokensWithTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapExactETHForTokensWithTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapExactTokensForETHAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapExactTokensForETHAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "swapExactTokensForETHWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapExactTokensForETHWithPermitAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "swapExactTokensForTokensWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "pathToEth",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapExactTokensForTokensWithPermitAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapExactTokensForTokensWithTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "pathToEth",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapExactTokensForTokensWithTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForExactETHAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForExactETHAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForExactETHWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForExactETHWithPermitAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForExactTokensWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "pathToEth",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForExactTokensWithPermitAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForExactTokensWithTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "pathToEth",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForExactTokensWithTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tipJar",
      "outputs": [
        {
          "internalType": "contract ITipJar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8c8ff8091e2e7273d22b8ed0161482630973910a5f1ba1a77193e703cecefb78",
  "receipt": {
    "to": null,
    "from": "0x62E0D8E38297E4A50D5abBb822CA7548b7d2F9ca",
    "contractAddress": "0x87535b160E251167FB7abE239d2467d1127219E4",
    "transactionIndex": 22,
    "gasUsed": "3545357",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x38fc38676f28bb09d22293e899bcb3e3ea297402870cc21a8090a87d9655da52",
    "transactionHash": "0x8c8ff8091e2e7273d22b8ed0161482630973910a5f1ba1a77193e703cecefb78",
    "logs": [],
    "blockNumber": 12252076,
    "cumulativeGasUsed": "4496930",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5312B0d160E16feeeec13437a0053009e7564287"
  ],
  "solcInputHash": "0e9735081b41490ceb39d3023c985694",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tipJar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"name\":\"addLiquidityAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permitA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permitB\",\"type\":\"tuple\"}],\"name\":\"addLiquidityWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapETHForExactTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapExactETHForTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapExactTokensForETHAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapExactTokensForETHWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForTokensWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapExactTokensForTokensWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapExactTokensForTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForExactETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForExactETHAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"swapTokensForExactETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForExactETHWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"swapTokensForExactTokensWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForExactTokensWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForExactTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForExactTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tipJar\",\"outputs\":[{\"internalType\":\"contract ITipJar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas\",\"kind\":\"dev\",\"methods\":{\"addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipAmount\":\"tip amount\"}},\"addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipAmount\":\"tip amount\"}},\"addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"permitA\":\"Permit details for token A\",\"permitB\":\"Permit details for token B\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"constructor\":{\"params\":{\"_tipJar\":\"Address of TipJar contract\"}},\"removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"swapETHForExactTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipAmount\":\"amount of ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapETHForExactTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapExactETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipAmount\":\"amount of ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapExactETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapExactTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapExactTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapExactTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapExactTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)\":{\"params\":{\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapExactTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapExactTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)\":{\"params\":{\"minEth\":\"ETH minimum for tip conversion\",\"pathToEth\":\"Path to ETH for tip\",\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting tokens to pay as tip\",\"trade\":\"Trade details\"}},\"swapExactTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapExactTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)\":{\"params\":{\"minEth\":\"ETH minimum for tip conversion\",\"pathToEth\":\"Path to ETH for tip\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting tokens to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForExactETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForExactETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForExactETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForExactETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)\":{\"params\":{\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForExactTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForExactTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)\":{\"params\":{\"minEth\":\"ETH minimum for tip conversion\",\"pathToEth\":\"Path to ETH for tip\",\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting tokens to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForExactTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForExactTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)\":{\"params\":{\"minEth\":\"ETH minimum for tip conversion\",\"pathToEth\":\"Path to ETH for tip\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting tokens to pay as tip\",\"trade\":\"Trade details\"}}},\"title\":\"ArcherSwapRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Add liquidity to token pair\"},\"addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)\":{\"notice\":\"Add liquidity to ETH>Token pair\"},\"addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)\":{\"notice\":\"Add liquidity to ETH>Token pair\"},\"addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Add liquidity to pair, using permit for approvals\"},\"constructor\":{\"notice\":\"Contructs a new ArcherSwap Router\"},\"removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Remove liquidity from token>token pair\"},\"removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Remove liquidity from ETH>token pair\"},\"removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Remove liquidity from ETH>token pair, using permit for approval\"},\"removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Remove liquidity from token>token pair, using permit for approval\"},\"swapETHForExactTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)\":{\"notice\":\"Swap ETH for tokens and pay amount of ETH input as tip\"},\"swapETHForExactTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"notice\":\"Swap ETH for tokens and pay % of ETH input as tip\"},\"swapExactETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)\":{\"notice\":\"Swap ETH for tokens and pay % of ETH input as tip\"},\"swapExactETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"notice\":\"Swap ETH for tokens and pay % of ETH input as tip\"},\"swapExactTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for ETH and pay amount of ETH as tip\"},\"swapExactTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"notice\":\"Swap tokens for ETH and pay % of ETH as tip\"},\"swapExactTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\"},\"swapExactTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)\":{\"notice\":\"Swap tokens for ETH and pay % of ETH as tip, using permit for approval\"},\"swapExactTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Swap tokens for tokens and pay ETH amount as tip\"},\"swapExactTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)\":{\"notice\":\"Swap tokens for tokens and pay % of tokens as tip, using permit for approval\"},\"swapExactTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for tokens and pay ETH amount as tip\"},\"swapExactTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)\":{\"notice\":\"Swap tokens for tokens and pay % of tokens as tip\"},\"swapTokensForExactETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for ETH and pay amount of ETH as tip\"},\"swapTokensForExactETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"notice\":\"Swap tokens for ETH and pay % of ETH as tip\"},\"swapTokensForExactETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\"},\"swapTokensForExactETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)\":{\"notice\":\"Swap tokens for ETH and pay % of ETH as tip, using permit for approval\"},\"swapTokensForExactTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Swap tokens for tokens and pay ETH amount as tip\"},\"swapTokensForExactTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)\":{\"notice\":\"Swap tokens for tokens and pay % of tokens as tip, using permit for approval\"},\"swapTokensForExactTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for tokens and pay ETH amount as tip\"},\"swapTokensForExactTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)\":{\"notice\":\"Swap tokens for tokens and pay % of tokens as tip\"},\"tipJar()\":{\"notice\":\"TipJar proxy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArcherSwapRouter.sol\":\"ArcherSwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/ArcherSwapRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n  Copyright 2021 Archer DAO: Chris Piatt (chris@archerdao.io).\\n*/\\n\\nimport \\\"./interfaces/IUniRouter.sol\\\";\\nimport \\\"./interfaces/ITipJar.sol\\\";\\nimport \\\"./interfaces/IERC20Extended.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @title ArcherSwapRouter\\n * @dev Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas\\n */\\ncontract ArcherSwapRouter {\\n    using SafeERC20 for IERC20Extended;\\n\\n    /// @notice Receive function to allow contract to accept ETH\\n    receive() external payable {}\\n    \\n    /// @notice Fallback function in case receive function is not matched\\n    fallback() external payable {}\\n\\n    /// @notice TipJar proxy\\n    ITipJar public immutable tipJar;\\n\\n    /// @notice Trade details\\n    struct Trade {\\n        uint amountIn;\\n        uint amountOut;\\n        address[] path;\\n        address payable to;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Add Liquidity details\\n    struct AddLiquidity {\\n        address tokenA;\\n        address tokenB;\\n        uint amountADesired;\\n        uint amountBDesired;\\n        uint amountAMin;\\n        uint amountBMin;\\n        address to;\\n        uint deadline;\\n    }\\n\\n    /// @notice Remove Liquidity details\\n    struct RemoveLiquidity {\\n        IERC20Extended lpToken;\\n        address tokenA;\\n        address tokenB;\\n        uint liquidity;\\n        uint amountAMin;\\n        uint amountBMin;\\n        address to;\\n        uint deadline;\\n    }\\n\\n    /// @notice Permit details\\n    struct Permit {\\n        IERC20Extended token;\\n        uint256 amount;\\n        uint deadline;\\n        uint8 v;\\n        bytes32 r; \\n        bytes32 s;\\n    }\\n\\n    /**\\n     * @notice Contructs a new ArcherSwap Router\\n     * @param _tipJar Address of TipJar contract\\n     */\\n    constructor(address _tipJar) {\\n        tipJar = ITipJar(_tipJar);\\n    }\\n\\n    /**\\n     * @notice Add liquidity to token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     */\\n    function addLiquidityAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _addLiquidity(\\n            router,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Add liquidity to pair, using permit for approvals\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param permitA Permit details for token A\\n     * @param permitB Permit details for token B\\n     */\\n    function addLiquidityWithPermitAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity,\\n        Permit calldata permitA,\\n        Permit calldata permitB\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        if(permitA.amount > 0) {\\n            _permit(permitA.token, permitA.amount, permitA.deadline, permitA.v, permitA.r, permitA.s);\\n        }\\n        if(permitB.amount > 0) {\\n            _permit(permitB.token, permitB.amount, permitB.deadline, permitB.v, permitB.r, permitB.s);\\n        }\\n        _tipAmountETH(msg.value);\\n        _addLiquidity(\\n            router,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin, \\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Add liquidity to ETH>Token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param tipAmount tip amount\\n     */\\n    function addLiquidityETHAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity,\\n        uint256 tipAmount\\n    ) external payable {\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\n        require(msg.value >= liquidity.amountBDesired + tipAmount, \\\"must send ETH to cover tip + liquidity\\\");\\n        _tipAmountETH(tipAmount);\\n        _addLiquidityETH(\\n            router,\\n            liquidity.tokenA,\\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Add liquidity to ETH>Token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param tipAmount tip amount\\n     */\\n    function addLiquidityETHWithPermitAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity,\\n        Permit calldata permit,\\n        uint256 tipAmount\\n    ) external payable {\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\n        require(msg.value >= liquidity.amountBDesired + tipAmount, \\\"must send ETH to cover tip + liquidity\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _tipAmountETH(tipAmount);\\n        _addLiquidityETH(\\n            router,\\n            liquidity.tokenA,\\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from token>token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     */\\n    function removeLiquidityAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _removeLiquidity(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.liquidity,\\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from ETH>token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     */\\n    function removeLiquidityETHAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _removeLiquidityETH(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA,\\n            liquidity.liquidity, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from token>token pair, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param permit Permit details\\n     */\\n    function removeLiquidityWithPermitAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _removeLiquidity(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.liquidity,\\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from ETH>token pair, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param permit Permit details\\n     */\\n    function removeLiquidityETHWithPermitAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _removeLiquidityETH(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA,\\n            liquidity.liquidity, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     */\\n    function swapExactTokensForETHAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _swapExactTokensForETH(router, trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     */\\n    function swapExactTokensForETHWithPermitAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _tipAmountETH(msg.value);\\n        _swapExactTokensForETH(router, trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay % of ETH as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipPct % of resulting ETH to pay as tip\\n     */\\n    function swapExactTokensForETHAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _swapExactTokensForETH(router, trade.amountIn, trade.amountOut, trade.path, address(this), trade.deadline);\\n        _tipPctETH(tipPct);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay % of ETH as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     * @param tipPct % of resulting ETH to pay as tip\\n     */\\n    function swapExactTokensForETHWithPermitAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapExactTokensForETH(router, trade.amountIn, trade.amountOut, trade.path, address(this), trade.deadline);\\n        _tipPctETH(tipPct);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     */\\n    function swapTokensForExactETHAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _swapTokensForExactETH(router, trade.amountOut, trade.amountIn, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     */\\n    function swapTokensForExactETHWithPermitAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForExactETH(router, trade.amountOut, trade.amountIn, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay % of ETH as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipPct % of resulting ETH to pay as tip\\n     */\\n    function swapTokensForExactETHAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _swapTokensForExactETH(router, trade.amountOut, trade.amountIn, trade.path, address(this), trade.deadline);\\n        _tipPctETH(tipPct);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay % of ETH as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     * @param tipPct % of resulting ETH to pay as tip\\n     */\\n    function swapTokensForExactETHWithPermitAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForExactETH(router, trade.amountOut, trade.amountIn, trade.path, address(this), trade.deadline);\\n        _tipPctETH(tipPct);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipAmount amount of ETH to pay as tip\\n     */\\n    function swapExactETHForTokensWithTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint256 tipAmount\\n    ) external payable {\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\n        require(msg.value >= tipAmount, \\\"must send ETH to cover tip\\\");\\n        _tipAmountETH(tipAmount);\\n        _swapExactETHForTokens(router, trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipPct % of ETH to pay as tip\\n     */\\n    function swapExactETHForTokensWithTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        require(msg.value > 0, \\\"must send ETH to cover tip\\\");\\n        uint256 tipAmount = (msg.value * tipPct) / 1000000;\\n        _tipAmountETH(tipAmount);\\n        _swapExactETHForTokens(router, trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap ETH for tokens and pay amount of ETH input as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipAmount amount of ETH to pay as tip\\n     */\\n    function swapETHForExactTokensWithTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint256 tipAmount\\n    ) external payable {\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\n        require(msg.value >= tipAmount, \\\"must send ETH to cover tip\\\");\\n        _tipAmountETH(tipAmount);\\n        _swapETHForExactTokens(router, trade.amountOut, trade.amountIn, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipPct % of ETH to pay as tip\\n     */\\n    function swapETHForExactTokensWithTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        require(msg.value > 0, \\\"must send ETH to cover tip\\\");\\n        uint256 tipAmount = (msg.value * tipPct) / 1000000;\\n        _tipAmountETH(tipAmount);\\n        _swapETHForExactTokens(router, trade.amountOut, trade.amountIn, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     */\\n    function swapExactTokensForTokensWithTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _swapExactTokensForTokens(router, trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     */\\n    function swapExactTokensForTokensWithPermitAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapExactTokensForTokens(router, trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay % of tokens as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param pathToEth Path to ETH for tip\\n     * @param minEth ETH minimum for tip conversion\\n     * @param tipPct % of resulting tokens to pay as tip\\n     */\\n    function swapExactTokensForTokensWithTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        address[] calldata pathToEth,\\n        uint256 minEth,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _swapExactTokensForTokens(router, trade.amountIn, trade.amountOut, trade.path, address(this), trade.deadline);\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\n        _transferContractTokenBalance(toToken, trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay % of tokens as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     * @param pathToEth Path to ETH for tip\\n     * @param minEth ETH minimum for tip conversion\\n     * @param tipPct % of resulting tokens to pay as tip\\n     */\\n    function swapExactTokensForTokensWithPermitAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit,\\n        address[] calldata pathToEth,\\n        uint256 minEth,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapExactTokensForTokens(router, trade.amountIn, trade.amountOut, trade.path, address(this), trade.deadline);\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\n        _transferContractTokenBalance(toToken, trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     */\\n    function swapTokensForExactTokensWithTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _swapTokensForExactTokens(router, trade.amountOut, trade.amountIn, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     */\\n    function swapTokensForExactTokensWithPermitAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForExactTokens(router, trade.amountOut, trade.amountIn, trade.path, trade.to, trade.deadline);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay % of tokens as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param pathToEth Path to ETH for tip\\n     * @param minEth ETH minimum for tip conversion\\n     * @param tipPct % of resulting tokens to pay as tip\\n     */\\n    function swapTokensForExactTokensWithTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        address[] calldata pathToEth,\\n        uint256 minEth,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _swapTokensForExactTokens(router, trade.amountOut, trade.amountIn, trade.path, address(this), trade.deadline);\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\n        _transferContractTokenBalance(toToken, trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay % of tokens as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     * @param pathToEth Path to ETH for tip\\n     * @param minEth ETH minimum for tip conversion\\n     * @param tipPct % of resulting tokens to pay as tip\\n     */\\n    function swapTokensForExactTokensWithPermitAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit,\\n        address[] calldata pathToEth,\\n        uint256 minEth,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForExactTokens(router, trade.amountOut, trade.amountIn, trade.path, address(this), trade.deadline);\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\n        _transferContractTokenBalance(toToken, trade.to);\\n    }\\n\\n    function _addLiquidity(\\n        IUniRouter router,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(tokenA);\\n        IERC20Extended toToken = IERC20Extended(tokenB);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountADesired);\\n        fromToken.safeIncreaseAllowance(address(router), amountADesired);\\n        toToken.safeTransferFrom(msg.sender, address(this), amountBDesired);\\n        toToken.safeIncreaseAllowance(address(router), amountBDesired);\\n        (uint256 amountA, uint256 amountB, ) = router.addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline);\\n        if(amountADesired > amountA) {\\n            fromToken.safeTransfer(msg.sender, fromToken.balanceOf(address(this)));\\n        }\\n        if(amountBDesired > amountB) {\\n            toToken.safeTransfer(msg.sender, toToken.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function _addLiquidityETH(\\n        IUniRouter router,\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountETHDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(token);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountTokenDesired);\\n        fromToken.safeIncreaseAllowance(address(router), amountTokenDesired);\\n        (uint256 amountToken, uint256 amountETH, ) = router.addLiquidityETH{value: amountETHDesired}(token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline);\\n        if(amountTokenDesired > amountToken) {\\n            fromToken.safeTransfer(msg.sender, amountTokenDesired - amountToken);\\n        }\\n        if(amountETHDesired > amountETH) {\\n            (bool success, ) = msg.sender.call{value: amountETHDesired - amountETH}(\\\"\\\");\\n            require(success);\\n        }\\n    }\\n\\n    function _removeLiquidity(\\n        IUniRouter router,\\n        IERC20Extended lpToken,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        lpToken.safeTransferFrom(msg.sender, address(this), liquidity);\\n        lpToken.safeIncreaseAllowance(address(router), liquidity);\\n        (uint256 amountA, uint256 amountB) = router.removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\\n        IERC20Extended fromToken = IERC20Extended(tokenA);\\n        IERC20Extended toToken = IERC20Extended(tokenB);\\n        fromToken.safeTransfer(msg.sender, amountA);\\n        toToken.safeTransfer(msg.sender, amountB);\\n    }\\n\\n    function _removeLiquidityETH(\\n        IUniRouter router,\\n        IERC20Extended lpToken,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        lpToken.safeTransferFrom(msg.sender, address(this), liquidity);\\n        lpToken.safeIncreaseAllowance(address(router), liquidity);\\n        (uint256 amountToken, uint256 amountETH) = router.removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\\n        IERC20Extended fromToken = IERC20Extended(token);\\n        fromToken.safeTransfer(msg.sender, amountToken);\\n        (bool success, ) = msg.sender.call{value: amountETH}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap ETH for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapExactETHForTokens(\\n        IUniRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountIn}(amountOutMin, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap ETH for tokens\\n     * @param amountOut Amount of ETH out\\n     * @param amountInMax Max amount in\\n     * @param path Path for swap\\n     * @param to Address to receive ETH\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapETHForExactTokens(\\n        IUniRouter router,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        router.swapETHForExactTokens{value: amountInMax}(amountOut, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for ETH\\n     * @param amountOut Amount of ETH out\\n     * @param amountInMax Max amount in\\n     * @param path Path for swap\\n     * @param to Address to receive ETH\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForExactETH(\\n        IUniRouter router,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountInMax);\\n        fromToken.safeIncreaseAllowance(address(router), amountInMax);\\n        router.swapTokensForExactETH(amountOut, amountInMax, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for ETH\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapExactTokensForETH(\\n        IUniRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapExactTokensForTokens(\\n        IUniRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for tokens\\n     * @param amountOut Amount of tokens out\\n     * @param amountInMax Max amount in\\n     * @param path Path for swap\\n     * @param to Address to receive tokens\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForExactTokens(\\n        IUniRouter router,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountInMax);\\n        fromToken.safeIncreaseAllowance(address(router), amountInMax);\\n        router.swapTokensForExactTokens(amountOut, amountInMax, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Tip % of ETH contract balance\\n     * @param tipPct % to tip\\n     */\\n    function _tipPctETH(uint32 tipPct) internal {\\n        uint256 contractBalance = address(this).balance;\\n        uint256 tipAmount = (contractBalance * tipPct) / 1000000;\\n        tipJar.tip{value: tipAmount}();\\n    }\\n\\n    /**\\n     * @notice Tip specific amount of ETH\\n     * @param tipAmount Amount to tip\\n     */\\n    function _tipAmountETH(uint256 tipAmount) internal {\\n        tipJar.tip{value: tipAmount}();\\n    }\\n\\n    /**\\n     * @notice Transfer contract ETH balance to specified user\\n     * @param to User to receive transfer\\n     */\\n    function _transferContractETHBalance(address payable to) internal {\\n        (bool success, ) = to.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /**\\n     * @notice Transfer contract token balance to specified user\\n     * @param token Token to transfer\\n     * @param to User to receive transfer\\n     */\\n    function _transferContractTokenBalance(IERC20Extended token, address payable to) internal {\\n        token.safeTransfer(to, token.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Convert a token balance into ETH and then tip\\n     * @param amountIn Amount to swap\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _tipWithTokens(\\n        IUniRouter router,\\n        uint amountIn,\\n        address[] memory path,\\n        uint256 deadline,\\n        uint256 minEth\\n    ) internal {\\n        IERC20Extended(path[0]).safeIncreaseAllowance(address(router), amountIn);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, minEth, path, address(this), deadline);\\n        tipJar.tip{value: address(this).balance}();\\n    }\\n\\n    /**\\n     * @notice Permit contract to spend user's balance\\n     * @param token Token to permit\\n     * @param amount Amount to permit\\n     * @param deadline Block timestamp deadline for permit\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _permit(\\n        IERC20Extended token, \\n        uint amount,\\n        uint deadline,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) internal {\\n        token.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    }\\n}\",\"keccak256\":\"0x49800c9e3cdfca837f7131086269c33805feab200743aaace0a72ed8fc967b7d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IERC20Extended {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function version() external view returns (uint8);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function receiveWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function nonces(address) external view returns (uint);\\n    function getDomainSeparator() external view returns (bytes32);\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n    function VERSION_HASH() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n    function TRANSFER_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    function RECEIVE_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n}\",\"keccak256\":\"0xb13d030cbb52ac71b1f2e338b3821b29e188dd50c8b62c82ba319be3441ecb49\",\"license\":\"MIT\"},\"contracts/interfaces/ITipJar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITipJar {\\n    function tip() external payable;\\n    function updateMinerSplit(address minerAddress, address splitTo, uint32 splitPct) external;\\n    function setFeeCollector(address newCollector) external;\\n    function setFee(uint32 newFee) external;\\n    function changeAdmin(address newAdmin) external;\\n    function upgradeTo(address newImplementation) external;\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable; \\n}\",\"keccak256\":\"0xb8c5d3f6c6952fcaa36cde58e09128208bad87f7ead3c222853f1286072ba052\",\"license\":\"MIT\"},\"contracts/interfaces/IUniRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniRouter is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\",\"keccak256\":\"0x49a06a7ec967301e97b888a345574626d617691cf85ad27ea7f59ceed8e2ffb4\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xd217e5030771ed77e0df8d1028f05abdaba7df6991fc6e03229d8624c1999d9a\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20Extended.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20Extended;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20Extended token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Extended token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20Extended-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Extended token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Extended token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xa676267f3885c91fe8ded15c38a9ddb8889e5b1aa031f103e88f8a1f8f71646d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620040513803806200405183398101604081905262000034916200004a565b60601b6001600160601b0319166080526200007a565b6000602082840312156200005c578081fd5b81516001600160a01b038116811462000073578182fd5b9392505050565b60805160601c613fa3620000ae600039600081816102c501528181611e6e015281816127060152612e0c0152613fa36000f3fe6080604052600436106101c65760003560e01c80639a2d8b8a116100f7578063c89b8c0011610095578063eb8175b311610064578063eb8175b3146103f4578063ef973cc014610407578063f29bbc721461041a578063f83dd82a1461042d576101cd565b8063c89b8c00146103a8578063dcf651b3146103bb578063e6f03f72146103ce578063e7bea530146103e1576101cd565b8063a7778b49116100d1578063a7778b491461035c578063a8bd55bf1461036f578063b37aced314610382578063c44aa00d14610395576101cd565b80639a2d8b8a146103235780639f05e4c614610336578063a1fa54f214610349576101cd565b80634ea618ac116101645780637366e8841161013e5780637366e8841461028d5780637583d2bd146102a05780637aaceb95146102b35780638be1984a14610310576101cd565b80634ea618ac146102545780635e52f39e1461026757806361692ecf1461027a576101cd565b806314c32946116101a057806314c329461461020857806328230aa11461021b57806329f3219f1461022e5780634c2ed35f14610241576101cd565b8063018d30d8146101cf5780630a3a3ae9146101e25780630c8a3d7a146101f5576101cd565b366101cd57005b005b6101cd6101dd366004613afa565b610440565b6101cd6101f0366004613aa3565b610582565b6101cd61020336600461393c565b610696565b6101cd61021636600461393c565b610774565b6101cd610229366004613814565b610829565b6101cd61023c3660046138aa565b6108f6565b6101cd61024f3660046138aa565b610b08565b6101cd610262366004613715565b610b9b565b6101cd61027536600461385c565b610cba565b6101cd6102883660046137c1565b610d63565b6101cd61029b3660046136df565b610eb2565b6101cd6102ae366004613814565b610f74565b3480156102bf57600080fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6101cd61031e366004613a3c565b611051565b6101cd610331366004613afa565b611115565b6101cd610344366004613a3c565b6111c4565b6101cd610357366004613afa565b611267565b6101cd61036a36600461393c565b6112fa565b6101cd61037d366004613801565b6113af565b6101cd610390366004613993565b61146c565b6101cd6103a3366004613aa3565b6116b3565b6101cd6103b636600461385c565b6117c2565b6101cd6103c936600461385c565b611867565b6101cd6103dc366004613801565b61190c565b6101cd6103ef36600461393c565b6119d9565b6101cd610402366004613993565b611a8e565b6101cd610415366004613770565b611b31565b6101cd610428366004613afa565b611c90565b6101cd61043b36600461385c565b611dc7565b60008163ffffffff16116104b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e2030000000000000000000000000000060448201526064015b60405180910390fd5b6000341161051f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f7665722074697000000000000060448201526064016104ac565b6000620f424061053563ffffffff841634613e6a565b61053f9190613e31565b905061054a81611e6c565b61057c84843560208601356105626040880188613db3565b61057260808a0160608b016135c5565b8960800135611ef0565b50505050565b600081116105ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b80341015610656576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f7665722074697000000000000060448201526064016104ac565b61065f81611e6c565b61069183602084013584356106776040870187613db3565b6106876080890160608a016135c5565b8860800135611f87565b505050565b60003411610700576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b61070934611e6c565b61074261071960208301836135c5565b602083013560408401356107336080860160608701613bb7565b85608001358660a00135612061565b610691836020840135843561075a6040870187613db3565b61076a6080890160608a016135c5565b8860800135612107565b600034116107de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b6107ee61071960208301836135c5565b6107f734611e6c565b610691838335602085013561080f6040870187613db3565b61081f6080890160608a016135c5565b886080013561226d565b60003411610893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b61089c34611e6c565b6108ac61071960208301836135c5565b610691836108bd60208501856135c5565b6108cd60408601602087016135c5565b6060860135608087013560a08801356108ec60e08a0160c08b016135c5565b8960e00135612379565b60008163ffffffff1611610966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e2030000000000000000000000000000060448201526064016104ac565b610989868635602088013561097e60408a018a613db3565b308b6080013561251a565b6000848460008181106109c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906109da91906135c5565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015610a4557600080fd5b505afa158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d9190613b4f565b90506000620f4240610a9563ffffffff861684613e6a565b610a9f9190613e31565b9050610ae4898289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808c01358961260c565b610afd83610af860808b0160608c016135c5565b61276c565b505050505050505050565b60008163ffffffff1611610b78576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e2030000000000000000000000000000060448201526064016104ac565b6109898660208701358735610b9060408a018a613db3565b308b60800135612107565b60003411610c05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b602082013515610c4857610c48610c1f60208401846135c5565b60208401356040850135610c396080870160608801613bb7565b86608001358760a00135612061565b602081013515610c6257610c6261071960208301836135c5565b610c6b34611e6c565b61057c84610c7c60208601866135c5565b610c8c60408701602088016135c5565b60408701356060880135608089013560a08a0135610cb060e08c0160c08d016135c5565b8b60e0013561282d565b60003411610d24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b610d2d34611e6c565b610d5f8260208301358335610d456040860186613db3565b610d5560808801606089016135c5565b8760800135612107565b5050565b60008111610dcd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b610ddb816060840135613e19565b341015610e6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d7573742073656e642045544820746f20636f76657220746970202b206c697160448201527f756964697479000000000000000000000000000000000000000000000000000060648201526084016104ac565b610e7381611e6c565b61069183610e8460208501856135c5565b60408501356060860135608087013560a0880135610ea860e08a0160c08b016135c5565b8960e00135612b35565b60003411610f1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b610f2534611e6c565b610d5f82610f3660208401846135c5565b610f4660408501602086016135c5565b60408501356060860135608087013560a0880135610f6a60e08a0160c08b016135c5565b8960e0013561282d565b60003411610fde576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b610fe734611e6c565b610ff761071960208301836135c5565b6106918361100860208501856135c5565b61101860408601602087016135c5565b61102860608701604088016135c5565b6060870135608088013560a089013561104760e08b0160c08c016135c5565b8a60e00135612c8a565b60008163ffffffff16116110c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e2030000000000000000000000000000060448201526064016104ac565b6110d1610c1f60208401846135c5565b6110f484843560208601356110e96040880188613db3565b30896080013561226d565b6110fd81612de7565b61057c61111060808501606086016135c5565b612e86565b60008163ffffffff1611611185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e2030000000000000000000000000000060448201526064016104ac565b6111a8838335602085013561119d6040870187613db3565b30886080013561226d565b6111b181612de7565b61069161111060808401606085016135c5565b60008163ffffffff1611611234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e2030000000000000000000000000000060448201526064016104ac565b611244610c1f60208401846135c5565b6110f4846020850135853561125c6040880188613db3565b308960800135612ef3565b60008163ffffffff16116112d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e2030000000000000000000000000000060448201526064016104ac565b6111a883602084013584356112ef6040870187613db3565b308860800135612ef3565b60003411611364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b61136d34611e6c565b61137d61071960208301836135c5565b61069183602084013584356113956040870187613db3565b6113a56080890160608a016135c5565b8860800135612ef3565b60003411611419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b61142234611e6c565b610d5f8261143360208401846135c5565b61144360408501602086016135c5565b6060850135608086013560a087013561146260e0890160c08a016135c5565b8860e00135612379565b60008163ffffffff16116114dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e2030000000000000000000000000000060448201526064016104ac565b6115156114ec60208701876135c5565b6020870135604088013561150660808a0160608b01613bb7565b89608001358a60a00135612061565b611538876020880135883561152d60408b018b613db3565b308c60800135612107565b600084846000818110611574577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061158991906135c5565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156115f457600080fd5b505afa158015611608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162c9190613b4f565b90506000620f424061164463ffffffff861684613e6a565b61164e9190613e31565b90506116938a8289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808d01358961260c565b6116a783610af860808c0160608d016135c5565b50505050505050505050565b6000811161171d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b80341015611787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f7665722074697000000000000060448201526064016104ac565b61179081611e6c565b61069183833560208501356117a86040870187613db3565b6117b86080890160608a016135c5565b8860800135611ef0565b6000341161182c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b61183534611e6c565b610d5f828235602084013561184d6040860186613db3565b61185d60808801606089016135c5565b876080013561251a565b600034116118d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b6118da34611e6c565b610d5f82602083013583356118f26040860186613db3565b61190260808801606089016135c5565b8760800135612ef3565b60003411611976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b61197f34611e6c565b610d5f8261199060208401846135c5565b6119a060408501602086016135c5565b6119b060608601604087016135c5565b6060860135608087013560a08801356119cf60e08a0160c08b016135c5565b8960e00135612c8a565b60003411611a43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b611a4c34611e6c565b611a5c61071960208301836135c5565b6106918383356020850135611a746040870187613db3565b611a846080890160608a016135c5565b886080013561251a565b60008163ffffffff1611611afe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e2030000000000000000000000000000060448201526064016104ac565b611b0e6114ec60208701876135c5565b6115388787356020890135611b2660408b018b613db3565b308c6080013561251a565b60008111611b9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b611ba9816060850135613e19565b341015611c38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d7573742073656e642045544820746f20636f76657220746970202b206c697160448201527f756964697479000000000000000000000000000000000000000000000000000060648201526084016104ac565b611c48610c1f60208401846135c5565b611c5181611e6c565b61057c84611c6260208601866135c5565b60408601356060870135608088013560a0890135611c8660e08b0160c08c016135c5565b8a60e00135612b35565b60008163ffffffff1611611d00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e2030000000000000000000000000000060448201526064016104ac565b60003411611d6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f7665722074697000000000000060448201526064016104ac565b6000620f4240611d8063ffffffff841634613e6a565b611d8a9190613e31565b9050611d9581611e6c565b61057c8460208501358535611dad6040880188613db3565b611dbd60808a0160608b016135c5565b8960800135611f87565b60003411611e31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064016104ac565b611e3a34611e6c565b610d5f8282356020840135611e526040860186613db3565b611e6260808801606089016135c5565b876080013561226d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611ed457600080fd5b505af1158015611ee8573d6000803e3d6000fd5b505050505050565b6040517fb6f9de9500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063b6f9de95908890611f4c9089908990899089908990600401613c9a565b6000604051808303818588803b158015611f6557600080fd5b505af1158015611f79573d6000803e3d6000fd5b505050505050505050505050565b6040517ffb3bdb4100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063fb3bdb41908790611fe3908a908990899089908990600401613c9a565b6000604051808303818588803b158015611ffc57600080fd5b505af1158015612010573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261205791908101906135e1565b5050505050505050565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c4810182905273ffffffffffffffffffffffffffffffffffffffff87169063d505accf9060e401600060405180830381600087803b1580156120f357600080fd5b505af11580156116a7573d6000803e3d6000fd5b600084846000818110612143577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061215891906135c5565b905061217c73ffffffffffffffffffffffffffffffffffffffff8216333089612fe5565b61219d73ffffffffffffffffffffffffffffffffffffffff821689886130c1565b6040517f8803dbee00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff891690638803dbee906121f9908a908a908a908a908a908a90600401613cde565b600060405180830381600087803b15801561221357600080fd5b505af1158015612227573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610afd91908101906135e1565b6000848460008181106122a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906122be91906135c5565b90506122e273ffffffffffffffffffffffffffffffffffffffff821633308a612fe5565b61230373ffffffffffffffffffffffffffffffffffffffff821689896130c1565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169063791ac9479061235f908a908a908a908a908a908a90600401613cde565b600060405180830381600087803b158015611f6557600080fd5b61239b73ffffffffffffffffffffffffffffffffffffffff8816333088612fe5565b6123bc73ffffffffffffffffffffffffffffffffffffffff881689876130c1565b6040517f02751cec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018790526044820186905260648201859052838116608483015260a4820183905260009182918b16906302751cec9060c4016040805180830381600087803b15801561244d57600080fd5b505af1158015612461573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124859190613b67565b9092509050876124ac73ffffffffffffffffffffffffffffffffffffffff821633856131ce565b60003373ffffffffffffffffffffffffffffffffffffffff16836040515b60006040518083038185875af1925050503d8060008114612507576040519150601f19603f3d011682016040523d82523d6000602084013e61250c565b606091505b5050905080611f7957600080fd5b600084846000818110612556577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061256b91906135c5565b905061258f73ffffffffffffffffffffffffffffffffffffffff821633308a612fe5565b6125b073ffffffffffffffffffffffffffffffffffffffff821689896130c1565b6040517f5c11d79500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff891690635c11d7959061235f908a908a908a908a908a908a90600401613cde565b61267885858560008151811061264b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166130c19092919063ffffffff16565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063791ac947906126d29087908590889030908990600401613d29565b600060405180830381600087803b1580156126ec57600080fd5b505af1158015612700573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156120f357600080fd5b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152610d5f90829073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b1580156127d757600080fd5b505afa1580156127eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280f9190613b4f565b73ffffffffffffffffffffffffffffffffffffffff851691906131ce565b878761285173ffffffffffffffffffffffffffffffffffffffff831633308b612fe5565b61287273ffffffffffffffffffffffffffffffffffffffff83168c8a6130c1565b61289473ffffffffffffffffffffffffffffffffffffffff821633308a612fe5565b6128b573ffffffffffffffffffffffffffffffffffffffff82168c896130c1565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301528a81166024830152604482018a9052606482018990526084820188905260a4820187905285811660c483015260e4820185905260009182918e169063e8e337009061010401606060405180830381600087803b15801561295757600080fd5b505af115801561296b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298f9190613b8a565b5091509150818a1115612a5d576040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152612a5d90339073ffffffffffffffffffffffffffffffffffffffff8716906370a082319060240160206040518083038186803b158015612a0757600080fd5b505afa158015612a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3f9190613b4f565b73ffffffffffffffffffffffffffffffffffffffff871691906131ce565b80891115612b26576040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152612b2690339073ffffffffffffffffffffffffffffffffffffffff8616906370a082319060240160206040518083038186803b158015612ad057600080fd5b505afa158015612ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b089190613b4f565b73ffffffffffffffffffffffffffffffffffffffff861691906131ce565b50505050505050505050505050565b86612b5873ffffffffffffffffffffffffffffffffffffffff821633308a612fe5565b612b7973ffffffffffffffffffffffffffffffffffffffff82168a896130c1565b6040517ff305d71900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152602482018990526044820187905260648201869052848116608483015260a4820184905260009182918c169063f305d719908a9060c4016060604051808303818588803b158015612c0c57600080fd5b505af1158015612c20573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612c459190613b8a565b509150915081891115612c6057612c6033612b08848c613ea7565b80881115612c7d57600033612c75838b613ea7565b6040516124ca565b5050505050505050505050565b612cac73ffffffffffffffffffffffffffffffffffffffff8916333088612fe5565b612ccd73ffffffffffffffffffffffffffffffffffffffff89168a876130c1565b6040517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015260448201879052606482018690526084820185905283811660a483015260c4820183905260009182918c169063baa2abde9060e4016040805180830381600087803b158015612d6657600080fd5b505af1158015612d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9e9190613b67565b90925090508888612dc673ffffffffffffffffffffffffffffffffffffffff831633866131ce565b612b2673ffffffffffffffffffffffffffffffffffffffff821633856131ce565b476000620f4240612dfe63ffffffff851684613e6a565b612e089190613e31565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612e7257600080fd5b505af1158015612057573d6000803e3d6000fd5b60008173ffffffffffffffffffffffffffffffffffffffff164760405160006040518083038185875af1925050503d8060008114612ee0576040519150601f19603f3d011682016040523d82523d6000602084013e612ee5565b606091505b5050905080610d5f57600080fd5b600084846000818110612f2f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190612f4491906135c5565b9050612f6873ffffffffffffffffffffffffffffffffffffffff8216333089612fe5565b612f8973ffffffffffffffffffffffffffffffffffffffff821689886130c1565b6040517f4a25d94a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff891690634a25d94a906121f9908a908a908a908a908a908a90600401613cde565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261057c9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613224565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561313357600080fd5b505afa158015613147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316b9190613b4f565b6131759190613e19565b60405173ffffffffffffffffffffffffffffffffffffffff851660248201526044810182905290915061057c9085907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161303f565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106919084907fa9059cbb000000000000000000000000000000000000000000000000000000009060640161303f565b6000613286826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166133309092919063ffffffff16565b80519091501561069157808060200190518101906132a491906136bf565b610691576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104ac565b606061333f8484600085613349565b90505b9392505050565b6060824710156133db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104ac565b6133e4856134d0565b61344a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104ac565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516134739190613c2d565b60006040518083038185875af1925050503d80600081146134b0576040519150601f19603f3d011682016040523d82523d6000602084013e6134b5565b606091505b50915091506134c58282866134da565b979650505050505050565b803b15155b919050565b606083156134e9575081613342565b8251156134f95782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ac9190613c49565b60008083601f84011261353e578081fd5b50813567ffffffffffffffff811115613555578182fd5b6020830191508360208260051b850101111561357057600080fd5b9250929050565b60006101008284031215613589578081fd5b50919050565b600060c08284031215613589578081fd5b600060a08284031215613589578081fd5b803563ffffffff811681146134d557600080fd5b6000602082840312156135d6578081fd5b813561334281613f48565b600060208083850312156135f3578182fd5b825167ffffffffffffffff8082111561360a578384fd5b818501915085601f83011261361d578384fd5b81518181111561362f5761362f613f19565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561367257613672613f19565b604052828152858101935084860182860187018a1015613690578788fd5b8795505b838610156136b2578051855260019590950194938601938601613694565b5098975050505050505050565b6000602082840312156136d0578081fd5b81518015158114613342578182fd5b60008061012083850312156136f2578081fd5b82356136fd81613f48565b915061370c8460208501613577565b90509250929050565b6000806000806102a0858703121561372b578182fd5b843561373681613f48565b93506137458660208701613577565b925061375586610120870161358f565b9150613765866101e0870161358f565b905092959194509250565b6000806000806102008587031215613786578384fd5b843561379181613f48565b93506137a08660208701613577565b92506137b086610120870161358f565b939692955092936101e00135925050565b600080600061014084860312156137d6578283fd5b83356137e181613f48565b92506137f08560208601613577565b915061012084013590509250925092565b60008061012083850312156136f2578182fd5b60008060006101e08486031215613829578081fd5b833561383481613f48565b92506138438560208601613577565b915061385385610120860161358f565b90509250925092565b6000806040838503121561386e578182fd5b823561387981613f48565b9150602083013567ffffffffffffffff811115613894578182fd5b6138a0858286016135a0565b9150509250929050565b60008060008060008060a087890312156138c2578384fd5b86356138cd81613f48565b9550602087013567ffffffffffffffff808211156138e9578586fd5b6138f58a838b016135a0565b9650604089013591508082111561390a578586fd5b5061391789828a0161352d565b90955093505060608701359150613930608088016135b1565b90509295509295509295565b60008060006101008486031215613951578081fd5b833561395c81613f48565b9250602084013567ffffffffffffffff811115613977578182fd5b613983868287016135a0565b925050613853856040860161358f565b6000806000806000806000610160888a0312156139ae578485fd5b87356139b981613f48565b9650602088013567ffffffffffffffff808211156139d5578687fd5b6139e18b838c016135a0565b97506139f08b60408c0161358f565b96506101008a0135915080821115613a06578283fd5b50613a138a828b0161352d565b9095509350506101208801359150613a2e61014089016135b1565b905092959891949750929550565b6000806000806101208587031215613a52578182fd5b8435613a5d81613f48565b9350602085013567ffffffffffffffff811115613a78578283fd5b613a84878288016135a0565b935050613a94866040870161358f565b915061376561010086016135b1565b600080600060608486031215613ab7578081fd5b8335613ac281613f48565b9250602084013567ffffffffffffffff811115613add578182fd5b613ae9868287016135a0565b925050604084013590509250925092565b600080600060608486031215613b0e578081fd5b8335613b1981613f48565b9250602084013567ffffffffffffffff811115613b34578182fd5b613b40868287016135a0565b925050613853604085016135b1565b600060208284031215613b60578081fd5b5051919050565b60008060408385031215613b79578182fd5b505080516020909101519092909150565b600080600060608486031215613b9e578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215613bc8578081fd5b813560ff81168114613342578182fd5b60008284526020808501945082825b85811015613c22578135613bfa81613f48565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101613be7565b509495945050505050565b60008251613c3f818460208701613ebe565b9190910192915050565b6000602082528251806020840152613c68816040850160208701613ebe565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600086825260806020830152613cb4608083018688613bd8565b73ffffffffffffffffffffffffffffffffffffffff94909416604083015250606001529392505050565b600087825286602083015260a06040830152613cfe60a083018688613bd8565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015613d8557845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101613d53565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613de7578283fd5b83018035915067ffffffffffffffff821115613e01578283fd5b6020019150600581901b360382131561357057600080fd5b60008219821115613e2c57613e2c613eea565b500190565b600082613e65577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613ea257613ea2613eea565b500290565b600082821015613eb957613eb9613eea565b500390565b60005b83811015613ed9578181015183820152602001613ec1565b8381111561057c5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114613f6a57600080fd5b5056fea26469706673582212208cc776a3ef117e9402a9ad8a1f13f6ec933aa59c94df5b2248689f718fe0dc6764736f6c63430008030033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas",
    "kind": "dev",
    "methods": {
      "addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "tip amount"
        }
      },
      "addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "tip amount"
        }
      },
      "addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "liquidity": "Liquidity details",
          "permitA": "Permit details for token A",
          "permitB": "Permit details for token B",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "constructor": {
        "params": {
          "_tipJar": "Address of TipJar contract"
        }
      },
      "removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "liquidity": "Liquidity details",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "liquidity": "Liquidity details",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "swapETHForExactTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "amount of ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapETHForExactTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapExactETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "amount of ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapExactETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapExactTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapExactTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapExactTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapExactTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapExactTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapExactTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)": {
        "params": {
          "minEth": "ETH minimum for tip conversion",
          "pathToEth": "Path to ETH for tip",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting tokens to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapExactTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapExactTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)": {
        "params": {
          "minEth": "ETH minimum for tip conversion",
          "pathToEth": "Path to ETH for tip",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting tokens to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForExactETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForExactETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForExactETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForExactETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForExactTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForExactTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)": {
        "params": {
          "minEth": "ETH minimum for tip conversion",
          "pathToEth": "Path to ETH for tip",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting tokens to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForExactTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForExactTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)": {
        "params": {
          "minEth": "ETH minimum for tip conversion",
          "pathToEth": "Path to ETH for tip",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting tokens to pay as tip",
          "trade": "Trade details"
        }
      }
    },
    "title": "ArcherSwapRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))": {
        "notice": "Add liquidity to token pair"
      },
      "addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)": {
        "notice": "Add liquidity to ETH>Token pair"
      },
      "addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)": {
        "notice": "Add liquidity to ETH>Token pair"
      },
      "addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Add liquidity to pair, using permit for approvals"
      },
      "constructor": {
        "notice": "Contructs a new ArcherSwap Router"
      },
      "removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "notice": "Remove liquidity from token>token pair"
      },
      "removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "notice": "Remove liquidity from ETH>token pair"
      },
      "removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Remove liquidity from ETH>token pair, using permit for approval"
      },
      "removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Remove liquidity from token>token pair, using permit for approval"
      },
      "swapETHForExactTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)": {
        "notice": "Swap ETH for tokens and pay amount of ETH input as tip"
      },
      "swapETHForExactTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "notice": "Swap ETH for tokens and pay % of ETH input as tip"
      },
      "swapExactETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)": {
        "notice": "Swap ETH for tokens and pay % of ETH input as tip"
      },
      "swapExactETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "notice": "Swap ETH for tokens and pay % of ETH input as tip"
      },
      "swapExactTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for ETH and pay amount of ETH as tip"
      },
      "swapExactTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "notice": "Swap tokens for ETH and pay % of ETH as tip"
      },
      "swapExactTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Swap tokens for ETH and pay amount of ETH as tip, using permit for approval"
      },
      "swapExactTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)": {
        "notice": "Swap tokens for ETH and pay % of ETH as tip, using permit for approval"
      },
      "swapExactTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Swap tokens for tokens and pay ETH amount as tip"
      },
      "swapExactTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)": {
        "notice": "Swap tokens for tokens and pay % of tokens as tip, using permit for approval"
      },
      "swapExactTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for tokens and pay ETH amount as tip"
      },
      "swapExactTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)": {
        "notice": "Swap tokens for tokens and pay % of tokens as tip"
      },
      "swapTokensForExactETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for ETH and pay amount of ETH as tip"
      },
      "swapTokensForExactETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "notice": "Swap tokens for ETH and pay % of ETH as tip"
      },
      "swapTokensForExactETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Swap tokens for ETH and pay amount of ETH as tip, using permit for approval"
      },
      "swapTokensForExactETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)": {
        "notice": "Swap tokens for ETH and pay % of ETH as tip, using permit for approval"
      },
      "swapTokensForExactTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Swap tokens for tokens and pay ETH amount as tip"
      },
      "swapTokensForExactTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)": {
        "notice": "Swap tokens for tokens and pay % of tokens as tip, using permit for approval"
      },
      "swapTokensForExactTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for tokens and pay ETH amount as tip"
      },
      "swapTokensForExactTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)": {
        "notice": "Swap tokens for tokens and pay % of tokens as tip"
      },
      "tipJar()": {
        "notice": "TipJar proxy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}