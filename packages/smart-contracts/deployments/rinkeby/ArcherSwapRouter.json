{
  "address": "0xd972238A69AdeC97619538Ebd4fD5996161D1930",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tipJar",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        }
      ],
      "name": "swapETHForTokensWithTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapETHForTokensWithTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForETHAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForETHAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "swapTokensForETHWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "swapTokensForETHWithPermitAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "swapTokensForTokensWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "pathToEth",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "swapTokensForTokensWithPermitAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForTokensWithTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "pathToEth",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForTokensWithTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tipJar",
      "outputs": [
        {
          "internalType": "contract ITipJar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1f17dcc164f1d41e29c315e3e4f178205fc61ce39deff19d0de9de78b5ab4fd9",
  "receipt": {
    "to": null,
    "from": "0x188f7652808a36A2904531699ccfeE8B6Bbdf77b",
    "contractAddress": "0xd972238A69AdeC97619538Ebd4fD5996161D1930",
    "transactionIndex": 2,
    "gasUsed": "1941101",
    "logsBloom": "0x
    "blockHash": "0xe55dd512a242fe0c5d63fc49e699400ba8a0e55038dd573d19c03a28fca5f444",
    "transactionHash": "0x1f17dcc164f1d41e29c315e3e4f178205fc61ce39deff19d0de9de78b5ab4fd9",
    "logs": [],
    "blockNumber": 8413331,
    "cumulativeGasUsed": "2183929",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x914528335B5d031c93Ac86e6F6A6C67052Eb44f0"
  ],
  "solcInputHash": "e59c8fbc821fa42bb47b501c5499c5dd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tipJar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"swapETHForTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapETHForTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForETHAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"swapTokensForETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"swapTokensForETHWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"swapTokensForTokensWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"swapTokensForTokensWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tipJar\",\"outputs\":[{\"internalType\":\"contract ITipJar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas\",\"kind\":\"dev\",\"methods\":{\"swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipAmount\":\"amount of ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)\":{\"params\":{\"r\":\"Half of the ECDSA signature pair\",\"router\":\"Uniswap V2-compliant Router contract\",\"s\":\"Half of the ECDSA signature pair\",\"trade\":\"Trade details\",\"v\":\"The recovery byte of the signature\"}},\"swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32,uint8,bytes32,bytes32)\":{\"params\":{\"r\":\"Half of the ECDSA signature pair\",\"router\":\"Uniswap V2-compliant Router contract\",\"s\":\"Half of the ECDSA signature pair\",\"tipPct\":\"% of resulting ETH to pay as tip\",\"trade\":\"Trade details\",\"v\":\"The recovery byte of the signature\"}},\"swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)\":{\"params\":{\"r\":\"Half of the ECDSA signature pair\",\"router\":\"Uniswap V2-compliant Router contract\",\"s\":\"Half of the ECDSA signature pair\",\"trade\":\"Trade details\",\"v\":\"The recovery byte of the signature\"}},\"swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32,uint8,bytes32,bytes32)\":{\"params\":{\"minEth\":\"ETH minimum for tip conversion\",\"pathToEth\":\"Path to ETH for tip\",\"r\":\"Half of the ECDSA signature pair\",\"router\":\"Uniswap V2-compliant Router contract\",\"s\":\"Half of the ECDSA signature pair\",\"tipPct\":\"% of resulting tokens to pay as tip\",\"trade\":\"Trade details\",\"v\":\"The recovery byte of the signature\"}},\"swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)\":{\"params\":{\"minEth\":\"ETH minimum for tip conversion\",\"pathToEth\":\"Path to ETH for tip\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting tokens to pay as tip\",\"trade\":\"Trade details\"}}},\"title\":\"ArcherSwapRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)\":{\"notice\":\"Swap ETH for tokens and pay % of ETH input as tip\"},\"swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"notice\":\"Swap ETH for tokens and pay % of ETH input as tip\"},\"swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for ETH and pay amount of ETH as tip\"},\"swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"notice\":\"Swap tokens for ETH and pay % of ETH as tip\"},\"swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)\":{\"notice\":\"Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\"},\"swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32,uint8,bytes32,bytes32)\":{\"notice\":\"Swap tokens for ETH and pay % of ETH as tip, using permit for approval\"},\"swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)\":{\"notice\":\"Swap tokens for tokens and pay ETH amount as tip\"},\"swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32,uint8,bytes32,bytes32)\":{\"notice\":\"Swap tokens for tokens and pay % of tokens as tip, using permit for approval\"},\"swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for tokens and pay ETH amount as tip\"},\"swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)\":{\"notice\":\"Swap tokens for tokens and pay % of tokens as tip\"},\"tipJar()\":{\"notice\":\"TipJar proxy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArcherSwapRouter.sol\":\"ArcherSwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/ArcherSwapRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Archer DAO: Chris Piatt (chris@archerdao.io).\\r\\n*/\\r\\n\\r\\nimport \\\"./interfaces/IUniRouter.sol\\\";\\r\\nimport \\\"./interfaces/ITipJar.sol\\\";\\r\\nimport \\\"./interfaces/IERC20Extended.sol\\\";\\r\\nimport \\\"./lib/SafeERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ArcherSwapRouter\\r\\n * @dev Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas\\r\\n */\\r\\ncontract ArcherSwapRouter {\\r\\n    using SafeERC20 for IERC20Extended;\\r\\n\\r\\n    /// @notice TipJar proxy\\r\\n    ITipJar public immutable tipJar;\\r\\n\\r\\n    /// @notice Trade details\\r\\n    struct Trade {\\r\\n        uint amountIn;\\r\\n        uint amountOutMin;\\r\\n        address[] path;\\r\\n        address payable to;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    constructor(address _tipJar) {\\r\\n        tipJar = ITipJar(_tipJar);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     */\\r\\n    function swapTokensForETHAndTipAmount(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade\\r\\n    ) external payable {\\r\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\r\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _tipAmountETH(msg.value);\\r\\n        _transferContractETHBalance(trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function swapTokensForETHWithPermitAndTipAmount(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        uint8 v, \\r\\n        bytes32 r, \\r\\n        bytes32 s\\r\\n    ) external payable {\\r\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\r\\n        _permit(IERC20Extended(trade.path[0]), trade.amountIn, trade.deadline, v, r, s);\\r\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _tipAmountETH(msg.value);\\r\\n        _transferContractETHBalance(trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for ETH and pay % of ETH as tip\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param tipPct % of resulting ETH to pay as tip\\r\\n     */\\r\\n    function swapTokensForETHAndTipPct(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        uint32 tipPct\\r\\n    ) external payable {\\r\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\r\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _tipPctETH(tipPct);\\r\\n        _transferContractETHBalance(trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for ETH and pay % of ETH as tip, using permit for approval\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param tipPct % of resulting ETH to pay as tip\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function swapTokensForETHWithPermitAndTipPct(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        uint32 tipPct,\\r\\n        uint8 v, \\r\\n        bytes32 r, \\r\\n        bytes32 s\\r\\n    ) external payable {\\r\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\r\\n        _permit(IERC20Extended(trade.path[0]), trade.amountIn, trade.deadline, v, r, s);\\r\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _tipPctETH(tipPct);\\r\\n        _transferContractETHBalance(trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param tipAmount amount of ETH to pay as tip\\r\\n     */\\r\\n    function swapETHForTokensWithTipAmount(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        uint256 tipAmount\\r\\n    ) external payable {\\r\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\r\\n        require(msg.value >= tipAmount, \\\"must send ETH to cover tip\\\");\\r\\n        _tipAmountETH(tipAmount);\\r\\n        _swapETHForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _transferContractETHBalance(trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param tipPct % of ETH to pay as tip\\r\\n     */\\r\\n    function swapETHForTokensWithTipPct(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        uint32 tipPct\\r\\n    ) external payable {\\r\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\r\\n        require(msg.value > 0, \\\"must send ETH to cover tip\\\");\\r\\n        uint256 tipAmount = (msg.value * tipPct) / 1000000;\\r\\n        _tipAmountETH(tipAmount);\\r\\n        _swapETHForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _transferContractETHBalance(trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     */\\r\\n    function swapTokensForTokensWithTipAmount(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade\\r\\n    ) external payable {\\r\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\r\\n        _tipAmountETH(msg.value);\\r\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _transferContractTokenBalance(IERC20Extended(trade.path[trade.path.length]), trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function swapTokensForTokensWithPermitAndTipAmount(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        uint8 v, \\r\\n        bytes32 r, \\r\\n        bytes32 s\\r\\n    ) external payable {\\r\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\r\\n        _tipAmountETH(msg.value);\\r\\n        _permit(IERC20Extended(trade.path[0]), trade.amountIn, trade.deadline, v, r, s);\\r\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _transferContractTokenBalance(IERC20Extended(trade.path[trade.path.length]), trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for tokens and pay % of tokens as tip\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param pathToEth Path to ETH for tip\\r\\n     * @param minEth ETH minimum for tip conversion\\r\\n     * @param tipPct % of resulting tokens to pay as tip\\r\\n     */\\r\\n    function swapTokensForTokensWithTipPct(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        address[] calldata pathToEth,\\r\\n        uint256 minEth,\\r\\n        uint32 tipPct\\r\\n    ) external payable {\\r\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\r\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\r\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\r\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\r\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\r\\n        _transferContractTokenBalance(toToken, trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for tokens and pay % of tokens as tip, using permit for approval\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param pathToEth Path to ETH for tip\\r\\n     * @param minEth ETH minimum for tip conversion\\r\\n     * @param tipPct % of resulting tokens to pay as tip\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function swapTokensForTokensWithPermitAndTipPct(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        address[] calldata pathToEth,\\r\\n        uint256 minEth,\\r\\n        uint32 tipPct,\\r\\n        uint8 v, \\r\\n        bytes32 r, \\r\\n        bytes32 s\\r\\n    ) external payable {\\r\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\r\\n        _permit(IERC20Extended(trade.path[0]), trade.amountIn, trade.deadline, v, r, s);\\r\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\r\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\r\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\r\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\r\\n        _transferContractTokenBalance(toToken, trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal implementation of swap ETH for tokens\\r\\n     * @param amountIn Amount to swap\\r\\n     * @param amountOutMin Minimum amount out\\r\\n     * @param path Path for swap\\r\\n     * @param deadline Block timestamp deadline for trade\\r\\n     */\\r\\n    function _swapETHForTokens(\\r\\n        IUniRouter router,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) internal {\\r\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountIn}(amountOutMin, path, address(this), deadline);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal implementation of swap tokens for ETH\\r\\n     * @param amountIn Amount to swap\\r\\n     * @param amountOutMin Minimum amount out\\r\\n     * @param path Path for swap\\r\\n     * @param deadline Block timestamp deadline for trade\\r\\n     */\\r\\n    function _swapTokensForETH(\\r\\n        IUniRouter router,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) internal {\\r\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\r\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal implementation of swap tokens for tokens\\r\\n     * @param amountIn Amount to swap\\r\\n     * @param amountOutMin Minimum amount out\\r\\n     * @param path Path for swap\\r\\n     * @param deadline Block timestamp deadline for trade\\r\\n     */\\r\\n    function _swapTokensForTokens(\\r\\n        IUniRouter router,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint deadline\\r\\n    ) internal {\\r\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\r\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\r\\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Tip % of ETH contract balance\\r\\n     * @param tipPct % to tip\\r\\n     */\\r\\n    function _tipPctETH(uint32 tipPct) internal {\\r\\n        uint256 contractBalance = address(this).balance;\\r\\n        uint256 tipAmount = (contractBalance * tipPct) / 1000000;\\r\\n        tipJar.tip{value: tipAmount}();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Tip specific amount of ETH\\r\\n     * @param tipAmount Amount to tip\\r\\n     */\\r\\n    function _tipAmountETH(uint256 tipAmount) internal {\\r\\n        tipJar.tip{value: tipAmount}();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer contract ETH balance to specified user\\r\\n     * @param to User to receive transfer\\r\\n     */\\r\\n    function _transferContractETHBalance(address payable to) internal {\\r\\n        (bool success, ) = to.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer contract token balance to specified user\\r\\n     * @param token Token to transfer\\r\\n     * @param to User to receive transfer\\r\\n     */\\r\\n    function _transferContractTokenBalance(IERC20Extended token, address payable to) internal {\\r\\n        token.safeTransfer(to, token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Convert a token balance into ETH and then tip\\r\\n     * @param amountIn Amount to swap\\r\\n     * @param path Path for swap\\r\\n     * @param deadline Block timestamp deadline for trade\\r\\n     */\\r\\n    function _tipWithTokens(\\r\\n        IUniRouter router,\\r\\n        uint amountIn,\\r\\n        address[] memory path,\\r\\n        uint256 deadline,\\r\\n        uint256 minEth\\r\\n    ) internal {\\r\\n        IERC20Extended(path[0]).safeIncreaseAllowance(address(router), amountIn);\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, minEth, path, address(this), deadline);\\r\\n        tipJar.tip{value: address(this).balance}();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Permit contract to spend user's balance\\r\\n     * @param token Token to permit\\r\\n     * @param amount Amount to permit\\r\\n     * @param deadline Block timestamp deadline for permit\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function _permit(\\r\\n        IERC20Extended token, \\r\\n        uint amount,\\r\\n        uint deadline,\\r\\n        uint8 v, \\r\\n        bytes32 r, \\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        token.permit(msg.sender, address(this), amount, deadline, v, r, s);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4c7c1abcb58dc004466381e4c83fd9c6f0856d6eaa5caef30d8732b69c40a1f4\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\ninterface IERC20Extended {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function version() external view returns (uint8);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function transferWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    function receiveWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    function getDomainSeparator() external view returns (bytes32);\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\r\\n    function VERSION_HASH() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\r\\n    function TRANSFER_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\r\\n    function RECEIVE_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\r\\n}\",\"keccak256\":\"0x2226562a3a3120356ab01f6dc24e6aba341efe85e9c9c9bb9e0f390b278a30d8\",\"license\":\"MIT\"},\"contracts/interfaces/ITipJar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITipJar {\\r\\n    function tip() external payable;\\r\\n    function updateMinerSplit(address minerAddress, address splitTo, uint32 splitPct) external;\\r\\n    function setFeeCollector(address newCollector) external;\\r\\n    function setFee(uint32 newFee) external;\\r\\n    function changeAdmin(address newAdmin) external;\\r\\n    function upgradeTo(address newImplementation) external;\\r\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable; \\r\\n}\",\"keccak256\":\"0xa145a5877791f99debf33d2654456599834c3016e82c4093dd373a145ca75921\",\"license\":\"MIT\"},\"contracts/interfaces/IUniRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniRouter is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x305c4cc627c68e2e6c26a1dd9344fd9a0919e226b29cbd64421f2a18c7a3a5c7\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x56995dd42ce308cec23c0395dd4319beec31fe36a5622b0298d1d29ddc92f5a1\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IERC20Extended.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20Extended;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20Extended token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20Extended token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20Extended-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20Extended token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20Extended token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x9b8b56fe1babede97026f6d9206b601659db634dedfee057201b105c1663c3d7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051620023113803806200231183398101604081905261003191610046565b60601b6001600160601b031916608052610074565b600060208284031215610057578081fd5b81516001600160a01b038116811461006d578182fd5b9392505050565b60805160601c612269620000a86000396000818161016d01528181610fbb0152818161128e01526113fa01526122696000f3fe6080604052600436106100bc5760003560e01c806364631838116100745780637aaceb951161004e5780637aaceb951461015b57806390b181c3146101b8578063ed65f37e146101cb576100bc565b806364631838146101225780636d11b22a1461013557806375b7155814610148576100bc565b806333228746116100a557806333228746146100e95780633caf8ea9146100fc578063500e5c7b1461010f576100bc565b806319a0f5a0146100c15780632fce1561146100d6575b600080fd5b6100d46100cf366004611b8f565b6101de565b005b6100d46100e4366004611bdd565b610294565b6100d46100f7366004611d7d565b6104a5565b6100d461010a366004611e5c565b610558565b6100d461011d366004611d7d565b610673565b6100d4610130366004611d26565b6107b3565b6100d4610143366004611c6f565b6108b2565b6100d4610156366004611b8f565b610b3c565b34801561016757600080fd5b5061018f7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100d46101c6366004611e5c565b610c4b565b6100d46101d9366004611ddb565b610d6a565b6000341161024d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064015b60405180910390fd5b61026f828235602084013561026560408601866120bf565b8660800135610e8c565b61027834610fb9565b61029061028b6080830160608401611b53565b611035565b5050565b60008163ffffffff1611610304576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610244565b610326868635602088013561031c60408a018a6120bf565b8a608001356110a2565b600084846000818110610362577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906103779190611b53565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156103e257600080fd5b505afa1580156103f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041a9190611ecc565b90506000620f424061043263ffffffff861684612176565b61043c919061213d565b9050610481898289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808c013589611194565b61049a8361049560808b0160608c01611b53565b611314565b505050505050505050565b60008163ffffffff1611610515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610244565b610537838335602085013561052d60408701876120bf565b8760800135610e8c565b610540816113d5565b61055361028b6080840160608501611b53565b505050565b600034116105c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610244565b61062e6105d260408601866120bf565b600081811061060a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061061f9190611b53565b8535608087013586868661147e565b610650858535602087013561064660408901896120bf565b8960800135610e8c565b61065934610fb9565b61066c61028b6080860160608701611b53565b5050505050565b60008163ffffffff16116106e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610244565b6000341161074d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610244565b6000620f424061076363ffffffff841634612176565b61076d919061213d565b905061077881610fb9565b61079a848435602086013561079060408801886120bf565b8860800135611510565b6107ad61028b6080850160608601611b53565b50505050565b6000811161081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610244565b80341015610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610244565b61089081610fb9565b61054083833560208501356108a860408701876120bf565b8760800135611510565b60008463ffffffff1611610922576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610244565b61098e61093260408a018a6120bf565b600081811061096a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061097f9190611b53565b893560808b013586868661147e565b6109b089893560208b01356109a660408d018d6120bf565b8d608001356110a2565b6000878760008181106109ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610a019190611b53565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015610a6c57600080fd5b505afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa49190611ecc565b90506000620f4240610abc63ffffffff891684612176565b610ac6919061213d565b9050610b1a8c828c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508e608001358c611194565b610b2e8361049560808e0160608f01611b53565b505050505050505050505050565b60003411610ba6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610244565b610baf34610fb9565b610bd18282356020840135610bc760408601866120bf565b86608001356110a2565b610290610be160408301836120bf565b610bee60408501856120bf565b9050818110610c26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610c3b9190611b53565b6104956080840160608501611b53565b60003411610cb5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610244565b610cbe34610fb9565b610cce6105d260408601866120bf565b610cf08585356020870135610ce660408901896120bf565b89608001356110a2565b61066c610d0060408601866120bf565b610d0d60408801886120bf565b9050818110610d45577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610d5a9190611b53565b6104956080870160608801611b53565b60008463ffffffff1611610dda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610244565b610e46610dea60408701876120bf565b6000818110610e22577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610e379190611b53565b8635608088013586868661147e565b610e688686356020880135610e5e60408a018a6120bf565b8a60800135610e8c565b610e71846113d5565b610e8461028b6080870160608801611b53565b505050505050565b600083836000818110610ec8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610edd9190611b53565b9050610f0173ffffffffffffffffffffffffffffffffffffffff8216333089611585565b610f2273ffffffffffffffffffffffffffffffffffffffff82168888611661565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063791ac94790610f7e90899089908990899030908a90600401611fea565b600060405180830381600087803b158015610f9857600080fd5b505af1158015610fac573d6000803e3d6000fd5b5050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561102157600080fd5b505af1158015610e84573d6000803e3d6000fd5b60008173ffffffffffffffffffffffffffffffffffffffff164760405160006040518083038185875af1925050503d806000811461108f576040519150601f19603f3d011682016040523d82523d6000602084013e611094565b606091505b505090508061029057600080fd5b6000838360008181106110de577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906110f39190611b53565b905061111773ffffffffffffffffffffffffffffffffffffffff8216333089611585565b61113873ffffffffffffffffffffffffffffffffffffffff82168888611661565b6040517f5c11d79500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690635c11d79590610f7e90899089908990899030908a90600401611fea565b6112008585856000815181106111d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166116619092919063ffffffff16565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063791ac9479061125a9087908590889030908990600401612035565b600060405180830381600087803b15801561127457600080fd5b505af1158015611288573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156112f457600080fd5b505af1158015611308573d6000803e3d6000fd5b50505050505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015261029090829073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b15801561137f57600080fd5b505afa158015611393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b79190611ecc565b73ffffffffffffffffffffffffffffffffffffffff8516919061176e565b476000620f42406113ec63ffffffff851684612176565b6113f6919061213d565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561146057600080fd5b505af1158015611474573d6000803e3d6000fd5b5050505050505050565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c4810182905273ffffffffffffffffffffffffffffffffffffffff87169063d505accf9060e401600060405180830381600087803b1580156112f457600080fd5b6040517fb6f9de9500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87169063b6f9de9590879061156c9088908890889030908990600401611fa6565b6000604051808303818588803b158015610f9857600080fd5b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526107ad9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526117c4565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156116d357600080fd5b505afa1580156116e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170b9190611ecc565b6117159190612125565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506107ad9085907f095ea7b300000000000000000000000000000000000000000000000000000000906064016115df565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526105539084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016115df565b6000611826826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118d09092919063ffffffff16565b80519091501561055357808060200190518101906118449190611b6f565b610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610244565b60606118df84846000856118e9565b90505b9392505050565b60608247101561197b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610244565b61198485611a70565b6119ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610244565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611a139190611f39565b60006040518083038185875af1925050503d8060008114611a50576040519150601f19603f3d011682016040523d82523d6000602084013e611a55565b606091505b5091509150611a65828286611a7a565b979650505050505050565b803b15155b919050565b60608315611a895750816118e2565b825115611a995782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102449190611f55565b60008083601f840112611ade578182fd5b50813567ffffffffffffffff811115611af5578182fd5b6020830191508360208260051b8501011115611b1057600080fd5b9250929050565b600060a08284031215611b28578081fd5b50919050565b803563ffffffff81168114611a7557600080fd5b803560ff81168114611a7557600080fd5b600060208284031215611b64578081fd5b81356118e28161220e565b600060208284031215611b80578081fd5b815180151581146118e2578182fd5b60008060408385031215611ba1578081fd5b8235611bac8161220e565b9150602083013567ffffffffffffffff811115611bc7578182fd5b611bd385828601611b17565b9150509250929050565b60008060008060008060a08789031215611bf5578182fd5b8635611c008161220e565b9550602087013567ffffffffffffffff80821115611c1c578384fd5b611c288a838b01611b17565b96506040890135915080821115611c3d578384fd5b50611c4a89828a01611acd565b90955093505060608701359150611c6360808801611b2e565b90509295509295509295565b60008060008060008060008060006101008a8c031215611c8d578283fd5b8935611c988161220e565b985060208a013567ffffffffffffffff80821115611cb4578485fd5b611cc08d838e01611b17565b995060408c0135915080821115611cd5578485fd5b50611ce28c828d01611acd565b90985096505060608a01359450611cfb60808b01611b2e565b9350611d0960a08b01611b42565b925060c08a0135915060e08a013590509295985092959850929598565b600080600060608486031215611d3a578283fd5b8335611d458161220e565b9250602084013567ffffffffffffffff811115611d60578283fd5b611d6c86828701611b17565b925050604084013590509250925092565b600080600060608486031215611d91578283fd5b8335611d9c8161220e565b9250602084013567ffffffffffffffff811115611db7578283fd5b611dc386828701611b17565b925050611dd260408501611b2e565b90509250925092565b60008060008060008060c08789031215611df3578182fd5b8635611dfe8161220e565b9550602087013567ffffffffffffffff811115611e19578283fd5b611e2589828a01611b17565b955050611e3460408801611b2e565b9350611e4260608801611b42565b92506080870135915060a087013590509295509295509295565b600080600080600060a08688031215611e73578283fd5b8535611e7e8161220e565b9450602086013567ffffffffffffffff811115611e99578384fd5b611ea588828901611b17565b945050611eb460408701611b42565b94979396509394606081013594506080013592915050565b600060208284031215611edd578081fd5b5051919050565b60008284526020808501945082825b85811015611f2e578135611f068161220e565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611ef3565b509495945050505050565b60008251611f4b8184602087016121b3565b9190910192915050565b6000602082528251806020840152611f748160408501602087016121b3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600086825260806020830152611fc0608083018688611ee4565b73ffffffffffffffffffffffffffffffffffffffff94909416604083015250606001529392505050565b600087825286602083015260a0604083015261200a60a083018688611ee4565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b8181101561209157845173ffffffffffffffffffffffffffffffffffffffff168352938301939183019160010161205f565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126120f3578283fd5b83018035915067ffffffffffffffff82111561210d578283fd5b6020019150600581901b3603821315611b1057600080fd5b60008219821115612138576121386121df565b500190565b600082612171577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156121ae576121ae6121df565b500290565b60005b838110156121ce5781810151838201526020016121b6565b838111156107ad5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461223057600080fd5b5056fea26469706673582212209eb9589df1cef562b03b2ddc070322c628e6afaa9f31cbd4058c0766eb603cef64736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106100bc5760003560e01c806364631838116100745780637aaceb951161004e5780637aaceb951461015b57806390b181c3146101b8578063ed65f37e146101cb576100bc565b806364631838146101225780636d11b22a1461013557806375b7155814610148576100bc565b806333228746116100a557806333228746146100e95780633caf8ea9146100fc578063500e5c7b1461010f576100bc565b806319a0f5a0146100c15780632fce1561146100d6575b600080fd5b6100d46100cf366004611b8f565b6101de565b005b6100d46100e4366004611bdd565b610294565b6100d46100f7366004611d7d565b6104a5565b6100d461010a366004611e5c565b610558565b6100d461011d366004611d7d565b610673565b6100d4610130366004611d26565b6107b3565b6100d4610143366004611c6f565b6108b2565b6100d4610156366004611b8f565b610b3c565b34801561016757600080fd5b5061018f7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100d46101c6366004611e5c565b610c4b565b6100d46101d9366004611ddb565b610d6a565b6000341161024d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064015b60405180910390fd5b61026f828235602084013561026560408601866120bf565b8660800135610e8c565b61027834610fb9565b61029061028b6080830160608401611b53565b611035565b5050565b60008163ffffffff1611610304576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610244565b610326868635602088013561031c60408a018a6120bf565b8a608001356110a2565b600084846000818110610362577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906103779190611b53565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156103e257600080fd5b505afa1580156103f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041a9190611ecc565b90506000620f424061043263ffffffff861684612176565b61043c919061213d565b9050610481898289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808c013589611194565b61049a8361049560808b0160608c01611b53565b611314565b505050505050505050565b60008163ffffffff1611610515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610244565b610537838335602085013561052d60408701876120bf565b8760800135610e8c565b610540816113d5565b61055361028b6080840160608501611b53565b505050565b600034116105c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610244565b61062e6105d260408601866120bf565b600081811061060a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061061f9190611b53565b8535608087013586868661147e565b610650858535602087013561064660408901896120bf565b8960800135610e8c565b61065934610fb9565b61066c61028b6080860160608701611b53565b5050505050565b60008163ffffffff16116106e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610244565b6000341161074d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610244565b6000620f424061076363ffffffff841634612176565b61076d919061213d565b905061077881610fb9565b61079a848435602086013561079060408801886120bf565b8860800135611510565b6107ad61028b6080850160608601611b53565b50505050565b6000811161081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610244565b80341015610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610244565b61089081610fb9565b61054083833560208501356108a860408701876120bf565b8760800135611510565b60008463ffffffff1611610922576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610244565b61098e61093260408a018a6120bf565b600081811061096a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061097f9190611b53565b893560808b013586868661147e565b6109b089893560208b01356109a660408d018d6120bf565b8d608001356110a2565b6000878760008181106109ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610a019190611b53565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015610a6c57600080fd5b505afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa49190611ecc565b90506000620f4240610abc63ffffffff891684612176565b610ac6919061213d565b9050610b1a8c828c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508e608001358c611194565b610b2e8361049560808e0160608f01611b53565b505050505050505050505050565b60003411610ba6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610244565b610baf34610fb9565b610bd18282356020840135610bc760408601866120bf565b86608001356110a2565b610290610be160408301836120bf565b610bee60408501856120bf565b9050818110610c26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610c3b9190611b53565b6104956080840160608501611b53565b60003411610cb5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610244565b610cbe34610fb9565b610cce6105d260408601866120bf565b610cf08585356020870135610ce660408901896120bf565b89608001356110a2565b61066c610d0060408601866120bf565b610d0d60408801886120bf565b9050818110610d45577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610d5a9190611b53565b6104956080870160608801611b53565b60008463ffffffff1611610dda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610244565b610e46610dea60408701876120bf565b6000818110610e22577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610e379190611b53565b8635608088013586868661147e565b610e688686356020880135610e5e60408a018a6120bf565b8a60800135610e8c565b610e71846113d5565b610e8461028b6080870160608801611b53565b505050505050565b600083836000818110610ec8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610edd9190611b53565b9050610f0173ffffffffffffffffffffffffffffffffffffffff8216333089611585565b610f2273ffffffffffffffffffffffffffffffffffffffff82168888611661565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063791ac94790610f7e90899089908990899030908a90600401611fea565b600060405180830381600087803b158015610f9857600080fd5b505af1158015610fac573d6000803e3d6000fd5b5050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561102157600080fd5b505af1158015610e84573d6000803e3d6000fd5b60008173ffffffffffffffffffffffffffffffffffffffff164760405160006040518083038185875af1925050503d806000811461108f576040519150601f19603f3d011682016040523d82523d6000602084013e611094565b606091505b505090508061029057600080fd5b6000838360008181106110de577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906110f39190611b53565b905061111773ffffffffffffffffffffffffffffffffffffffff8216333089611585565b61113873ffffffffffffffffffffffffffffffffffffffff82168888611661565b6040517f5c11d79500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690635c11d79590610f7e90899089908990899030908a90600401611fea565b6112008585856000815181106111d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166116619092919063ffffffff16565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063791ac9479061125a9087908590889030908990600401612035565b600060405180830381600087803b15801561127457600080fd5b505af1158015611288573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156112f457600080fd5b505af1158015611308573d6000803e3d6000fd5b50505050505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015261029090829073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b15801561137f57600080fd5b505afa158015611393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b79190611ecc565b73ffffffffffffffffffffffffffffffffffffffff8516919061176e565b476000620f42406113ec63ffffffff851684612176565b6113f6919061213d565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561146057600080fd5b505af1158015611474573d6000803e3d6000fd5b5050505050505050565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c4810182905273ffffffffffffffffffffffffffffffffffffffff87169063d505accf9060e401600060405180830381600087803b1580156112f457600080fd5b6040517fb6f9de9500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87169063b6f9de9590879061156c9088908890889030908990600401611fa6565b6000604051808303818588803b158015610f9857600080fd5b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526107ad9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526117c4565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156116d357600080fd5b505afa1580156116e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170b9190611ecc565b6117159190612125565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506107ad9085907f095ea7b300000000000000000000000000000000000000000000000000000000906064016115df565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526105539084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016115df565b6000611826826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118d09092919063ffffffff16565b80519091501561055357808060200190518101906118449190611b6f565b610553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610244565b60606118df84846000856118e9565b90505b9392505050565b60608247101561197b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610244565b61198485611a70565b6119ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610244565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611a139190611f39565b60006040518083038185875af1925050503d8060008114611a50576040519150601f19603f3d011682016040523d82523d6000602084013e611a55565b606091505b5091509150611a65828286611a7a565b979650505050505050565b803b15155b919050565b60608315611a895750816118e2565b825115611a995782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102449190611f55565b60008083601f840112611ade578182fd5b50813567ffffffffffffffff811115611af5578182fd5b6020830191508360208260051b8501011115611b1057600080fd5b9250929050565b600060a08284031215611b28578081fd5b50919050565b803563ffffffff81168114611a7557600080fd5b803560ff81168114611a7557600080fd5b600060208284031215611b64578081fd5b81356118e28161220e565b600060208284031215611b80578081fd5b815180151581146118e2578182fd5b60008060408385031215611ba1578081fd5b8235611bac8161220e565b9150602083013567ffffffffffffffff811115611bc7578182fd5b611bd385828601611b17565b9150509250929050565b60008060008060008060a08789031215611bf5578182fd5b8635611c008161220e565b9550602087013567ffffffffffffffff80821115611c1c578384fd5b611c288a838b01611b17565b96506040890135915080821115611c3d578384fd5b50611c4a89828a01611acd565b90955093505060608701359150611c6360808801611b2e565b90509295509295509295565b60008060008060008060008060006101008a8c031215611c8d578283fd5b8935611c988161220e565b985060208a013567ffffffffffffffff80821115611cb4578485fd5b611cc08d838e01611b17565b995060408c0135915080821115611cd5578485fd5b50611ce28c828d01611acd565b90985096505060608a01359450611cfb60808b01611b2e565b9350611d0960a08b01611b42565b925060c08a0135915060e08a013590509295985092959850929598565b600080600060608486031215611d3a578283fd5b8335611d458161220e565b9250602084013567ffffffffffffffff811115611d60578283fd5b611d6c86828701611b17565b925050604084013590509250925092565b600080600060608486031215611d91578283fd5b8335611d9c8161220e565b9250602084013567ffffffffffffffff811115611db7578283fd5b611dc386828701611b17565b925050611dd260408501611b2e565b90509250925092565b60008060008060008060c08789031215611df3578182fd5b8635611dfe8161220e565b9550602087013567ffffffffffffffff811115611e19578283fd5b611e2589828a01611b17565b955050611e3460408801611b2e565b9350611e4260608801611b42565b92506080870135915060a087013590509295509295509295565b600080600080600060a08688031215611e73578283fd5b8535611e7e8161220e565b9450602086013567ffffffffffffffff811115611e99578384fd5b611ea588828901611b17565b945050611eb460408701611b42565b94979396509394606081013594506080013592915050565b600060208284031215611edd578081fd5b5051919050565b60008284526020808501945082825b85811015611f2e578135611f068161220e565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611ef3565b509495945050505050565b60008251611f4b8184602087016121b3565b9190910192915050565b6000602082528251806020840152611f748160408501602087016121b3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600086825260806020830152611fc0608083018688611ee4565b73ffffffffffffffffffffffffffffffffffffffff94909416604083015250606001529392505050565b600087825286602083015260a0604083015261200a60a083018688611ee4565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b8181101561209157845173ffffffffffffffffffffffffffffffffffffffff168352938301939183019160010161205f565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126120f3578283fd5b83018035915067ffffffffffffffff82111561210d578283fd5b6020019150600581901b3603821315611b1057600080fd5b60008219821115612138576121386121df565b500190565b600082612171577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156121ae576121ae6121df565b500290565b60005b838110156121ce5781810151838201526020016121b6565b838111156107ad5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461223057600080fd5b5056fea26469706673582212209eb9589df1cef562b03b2ddc070322c628e6afaa9f31cbd4058c0766eb603cef64736f6c63430008030033",
  "devdoc": {
    "details": "Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas",
    "kind": "dev",
    "methods": {
<<<<<<< HEAD
      "addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "tip amount"
        }
      },
      "addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "tip amount"
        }
      },
      "addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "liquidity": "Liquidity details",
          "permitA": "Permit details for token A",
          "permitB": "Permit details for token B",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "liquidity": "Liquidity details",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "liquidity": "Liquidity details",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
=======
>>>>>>> 28e9c73 (frontend can send transactions through ArcherSwapRouter and update ArcherSwapRouter to take TipJar address as argument)
      "swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "amount of ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting ETH to pay as tip",
          "trade": "Trade details"
        }
      },
<<<<<<< HEAD
      "swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)": {
        "params": {
          "minEth": "ETH minimum for tip conversion",
          "pathToEth": "Path to ETH for tip",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting tokens to pay as tip",
          "trade": "Trade details"
=======
      "swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)": {
        "params": {
          "r": "Half of the ECDSA signature pair",
          "router": "Uniswap V2-compliant Router contract",
          "s": "Half of the ECDSA signature pair",
          "trade": "Trade details",
          "v": "The recovery byte of the signature"
        }
      },
      "swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32,uint8,bytes32,bytes32)": {
        "params": {
          "r": "Half of the ECDSA signature pair",
          "router": "Uniswap V2-compliant Router contract",
          "s": "Half of the ECDSA signature pair",
          "tipPct": "% of resulting ETH to pay as tip",
          "trade": "Trade details",
          "v": "The recovery byte of the signature"
        }
      },
      "swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)": {
        "params": {
          "r": "Half of the ECDSA signature pair",
          "router": "Uniswap V2-compliant Router contract",
          "s": "Half of the ECDSA signature pair",
          "trade": "Trade details",
          "v": "The recovery byte of the signature"
        }
      },
      "swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32,uint8,bytes32,bytes32)": {
        "params": {
          "minEth": "ETH minimum for tip conversion",
          "pathToEth": "Path to ETH for tip",
          "r": "Half of the ECDSA signature pair",
          "router": "Uniswap V2-compliant Router contract",
          "s": "Half of the ECDSA signature pair",
          "tipPct": "% of resulting tokens to pay as tip",
          "trade": "Trade details",
          "v": "The recovery byte of the signature"
>>>>>>> 28e9c73 (frontend can send transactions through ArcherSwapRouter and update ArcherSwapRouter to take TipJar address as argument)
        }
      },
      "swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)": {
        "params": {
          "minEth": "ETH minimum for tip conversion",
          "pathToEth": "Path to ETH for tip",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting tokens to pay as tip",
          "trade": "Trade details"
        }
      }
    },
    "title": "ArcherSwapRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
<<<<<<< HEAD
      "addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))": {
        "notice": "Add liquidity to token pair"
      },
      "addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)": {
        "notice": "Add liquidity to ETH>Token pair"
      },
      "addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)": {
        "notice": "Add liquidity to ETH>Token pair"
      },
      "addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Add liquidity to pair, using permit for approvals"
      },
      "removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "notice": "Remove liquidity from token>token pair"
      },
      "removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "notice": "Remove liquidity from ETH>token pair"
      },
      "removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Remove liquidity from ETH>token pair, using permit for approval"
      },
      "removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Remove liquidity from token>token pair, using permit for approval"
      },
=======
>>>>>>> 28e9c73 (frontend can send transactions through ArcherSwapRouter and update ArcherSwapRouter to take TipJar address as argument)
      "swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)": {
        "notice": "Swap ETH for tokens and pay % of ETH input as tip"
      },
      "swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "notice": "Swap ETH for tokens and pay % of ETH input as tip"
      },
      "swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for ETH and pay amount of ETH as tip"
      },
      "swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "notice": "Swap tokens for ETH and pay % of ETH as tip"
      },
<<<<<<< HEAD
      "swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Swap tokens for ETH and pay amount of ETH as tip, using permit for approval"
      },
      "swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)": {
        "notice": "Swap tokens for ETH and pay % of ETH as tip, using permit for approval"
      },
      "swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Swap tokens for tokens and pay ETH amount as tip"
      },
      "swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)": {
=======
      "swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)": {
        "notice": "Swap tokens for ETH and pay amount of ETH as tip, using permit for approval"
      },
      "swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32,uint8,bytes32,bytes32)": {
        "notice": "Swap tokens for ETH and pay % of ETH as tip, using permit for approval"
      },
      "swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)": {
        "notice": "Swap tokens for tokens and pay ETH amount as tip"
      },
      "swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32,uint8,bytes32,bytes32)": {
>>>>>>> 28e9c73 (frontend can send transactions through ArcherSwapRouter and update ArcherSwapRouter to take TipJar address as argument)
        "notice": "Swap tokens for tokens and pay % of tokens as tip, using permit for approval"
      },
      "swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for tokens and pay ETH amount as tip"
      },
      "swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)": {
        "notice": "Swap tokens for tokens and pay % of tokens as tip"
      },
      "tipJar()": {
        "notice": "TipJar proxy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}