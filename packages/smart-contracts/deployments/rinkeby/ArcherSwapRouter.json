{
  "address": "0xa8374A422D7e1F2d9882BAd9fC165481a332aAf6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        }
      ],
      "name": "swapETHForTokensWithTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapETHForTokensWithTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForETHAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForETHAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "swapTokensForETHWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "swapTokensForETHWithPermitAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "swapTokensForTokensWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "pathToEth",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "swapTokensForTokensWithPermitAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForTokensWithTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "pathToEth",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForTokensWithTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tipJar",
      "outputs": [
        {
          "internalType": "contract ITipJar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1df1937a8110716cf79b1edaf562867b971a6cd240331635202c65f7dbb1b65",
  "receipt": {
    "to": null,
    "from": "0x4F8f512Dab59F227EA70B1D8A0044aFa95CC80C3",
    "contractAddress": "0xa8374A422D7e1F2d9882BAd9fC165481a332aAf6",
    "transactionIndex": 12,
    "gasUsed": "1929561",
    "logsBloom": "0x
    "blockHash": "0x9a5b3cd1a3e687ce948936fe7be0f97a3664fab60e87ddb3b8efd56f8284463a",
    "transactionHash": "0xc1df1937a8110716cf79b1edaf562867b971a6cd240331635202c65f7dbb1b65",
    "logs": [],
    "blockNumber": 8406017,
    "cumulativeGasUsed": "3511265",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "12ac1fb5e9fce4d54a3f9f45e9779629",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"swapETHForTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapETHForTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForETHAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"swapTokensForETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"swapTokensForETHWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"swapTokensForTokensWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"swapTokensForTokensWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tipJar\",\"outputs\":[{\"internalType\":\"contract ITipJar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas\",\"kind\":\"dev\",\"methods\":{\"swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipAmount\":\"amount of ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)\":{\"params\":{\"r\":\"Half of the ECDSA signature pair\",\"router\":\"Uniswap V2-compliant Router contract\",\"s\":\"Half of the ECDSA signature pair\",\"trade\":\"Trade details\",\"v\":\"The recovery byte of the signature\"}},\"swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32,uint8,bytes32,bytes32)\":{\"params\":{\"r\":\"Half of the ECDSA signature pair\",\"router\":\"Uniswap V2-compliant Router contract\",\"s\":\"Half of the ECDSA signature pair\",\"tipPct\":\"% of resulting ETH to pay as tip\",\"trade\":\"Trade details\",\"v\":\"The recovery byte of the signature\"}},\"swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)\":{\"params\":{\"r\":\"Half of the ECDSA signature pair\",\"router\":\"Uniswap V2-compliant Router contract\",\"s\":\"Half of the ECDSA signature pair\",\"trade\":\"Trade details\",\"v\":\"The recovery byte of the signature\"}},\"swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32,uint8,bytes32,bytes32)\":{\"params\":{\"minEth\":\"ETH minimum for tip conversion\",\"pathToEth\":\"Path to ETH for tip\",\"r\":\"Half of the ECDSA signature pair\",\"router\":\"Uniswap V2-compliant Router contract\",\"s\":\"Half of the ECDSA signature pair\",\"tipPct\":\"% of resulting tokens to pay as tip\",\"trade\":\"Trade details\",\"v\":\"The recovery byte of the signature\"}},\"swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)\":{\"params\":{\"minEth\":\"ETH minimum for tip conversion\",\"pathToEth\":\"Path to ETH for tip\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting tokens to pay as tip\",\"trade\":\"Trade details\"}}},\"title\":\"ArcherSwapRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)\":{\"notice\":\"Swap ETH for tokens and pay % of ETH input as tip\"},\"swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"notice\":\"Swap ETH for tokens and pay % of ETH input as tip\"},\"swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for ETH and pay amount of ETH as tip\"},\"swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"notice\":\"Swap tokens for ETH and pay % of ETH as tip\"},\"swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)\":{\"notice\":\"Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\"},\"swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32,uint8,bytes32,bytes32)\":{\"notice\":\"Swap tokens for ETH and pay % of ETH as tip, using permit for approval\"},\"swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)\":{\"notice\":\"Swap tokens for tokens and pay ETH amount as tip\"},\"swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32,uint8,bytes32,bytes32)\":{\"notice\":\"Swap tokens for tokens and pay % of tokens as tip, using permit for approval\"},\"swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for tokens and pay ETH amount as tip\"},\"swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)\":{\"notice\":\"Swap tokens for tokens and pay % of tokens as tip\"},\"tipJar()\":{\"notice\":\"TipJar proxy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArcherSwapRouter.sol\":\"ArcherSwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/ArcherSwapRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n  Copyright 2021 Archer DAO: Chris Piatt (chris@archerdao.io).\\n*/\\n\\nimport \\\"./interfaces/IUniRouter.sol\\\";\\nimport \\\"./interfaces/ITipJar.sol\\\";\\nimport \\\"./interfaces/IERC20Extended.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @title ArcherSwapRouter\\n * @dev Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas\\n */\\ncontract ArcherSwapRouter {\\n    using SafeERC20 for IERC20Extended;\\n\\n    /// @notice TipJar proxy\\n    ITipJar public constant tipJar = ITipJar(0x5312B0d160E16feeeec13437a0053009e7564287);\\n\\n    /// @notice Trade details\\n    struct Trade {\\n        uint amountIn;\\n        uint amountOutMin;\\n        address[] path;\\n        address payable to;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     */\\n    function swapTokensForETHAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _tipAmountETH(msg.value);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function swapTokensForETHWithPermitAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _permit(IERC20Extended(trade.path[0]), trade.amountIn, trade.deadline, v, r, s);\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _tipAmountETH(msg.value);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay % of ETH as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipPct % of resulting ETH to pay as tip\\n     */\\n    function swapTokensForETHAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _tipPctETH(tipPct);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay % of ETH as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipPct % of resulting ETH to pay as tip\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function swapTokensForETHWithPermitAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint32 tipPct,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _permit(IERC20Extended(trade.path[0]), trade.amountIn, trade.deadline, v, r, s);\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _tipPctETH(tipPct);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipAmount amount of ETH to pay as tip\\n     */\\n    function swapETHForTokensWithTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint256 tipAmount\\n    ) external payable {\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\n        require(msg.value >= tipAmount, \\\"must send ETH to cover tip\\\");\\n        _tipAmountETH(tipAmount);\\n        _swapETHForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipPct % of ETH to pay as tip\\n     */\\n    function swapETHForTokensWithTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        require(msg.value > 0, \\\"must send ETH to cover tip\\\");\\n        uint256 tipAmount = (msg.value * tipPct) / 1000000;\\n        _tipAmountETH(tipAmount);\\n        _swapETHForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     */\\n    function swapTokensForTokensWithTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _transferContractTokenBalance(IERC20Extended(trade.path[trade.path.length]), trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function swapTokensForTokensWithPermitAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(IERC20Extended(trade.path[0]), trade.amountIn, trade.deadline, v, r, s);\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _transferContractTokenBalance(IERC20Extended(trade.path[trade.path.length]), trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay % of tokens as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param pathToEth Path to ETH for tip\\n     * @param minEth ETH minimum for tip conversion\\n     * @param tipPct % of resulting tokens to pay as tip\\n     */\\n    function swapTokensForTokensWithTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        address[] calldata pathToEth,\\n        uint256 minEth,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\n        _transferContractTokenBalance(toToken, trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay % of tokens as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param pathToEth Path to ETH for tip\\n     * @param minEth ETH minimum for tip conversion\\n     * @param tipPct % of resulting tokens to pay as tip\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function swapTokensForTokensWithPermitAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        address[] calldata pathToEth,\\n        uint256 minEth,\\n        uint32 tipPct,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _permit(IERC20Extended(trade.path[0]), trade.amountIn, trade.deadline, v, r, s);\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\n        _transferContractTokenBalance(toToken, trade.to);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap ETH for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapETHForTokens(\\n        IUniRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) internal {\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountIn}(amountOutMin, path, address(this), deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for ETH\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForETH(\\n        IUniRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForTokens(\\n        IUniRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\\n    }\\n\\n    /**\\n     * @notice Tip % of ETH contract balance\\n     * @param tipPct % to tip\\n     */\\n    function _tipPctETH(uint32 tipPct) internal {\\n        uint256 contractBalance = address(this).balance;\\n        uint256 tipAmount = (contractBalance * tipPct) / 1000000;\\n        tipJar.tip{value: tipAmount}();\\n    }\\n\\n    /**\\n     * @notice Tip specific amount of ETH\\n     * @param tipAmount Amount to tip\\n     */\\n    function _tipAmountETH(uint256 tipAmount) internal {\\n        tipJar.tip{value: tipAmount}();\\n    }\\n\\n    /**\\n     * @notice Transfer contract ETH balance to specified user\\n     * @param to User to receive transfer\\n     */\\n    function _transferContractETHBalance(address payable to) internal {\\n        (bool success, ) = to.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /**\\n     * @notice Transfer contract token balance to specified user\\n     * @param token Token to transfer\\n     * @param to User to receive transfer\\n     */\\n    function _transferContractTokenBalance(IERC20Extended token, address payable to) internal {\\n        token.safeTransfer(to, token.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Convert a token balance into ETH and then tip\\n     * @param amountIn Amount to swap\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _tipWithTokens(\\n        IUniRouter router,\\n        uint amountIn,\\n        address[] memory path,\\n        uint256 deadline,\\n        uint256 minEth\\n    ) internal {\\n        IERC20Extended(path[0]).safeIncreaseAllowance(address(router), amountIn);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, minEth, path, address(this), deadline);\\n        tipJar.tip{value: address(this).balance}();\\n    }\\n\\n    /**\\n     * @notice Permit contract to spend user's balance\\n     * @param token Token to permit\\n     * @param amount Amount to permit\\n     * @param deadline Block timestamp deadline for permit\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _permit(\\n        IERC20Extended token, \\n        uint amount,\\n        uint deadline,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) internal {\\n        token.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    }\\n}\",\"keccak256\":\"0xde29d86a857e9f9bba2f00349200df8df227e047160b5aee3b8e833dc102e94b\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IERC20Extended {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function version() external view returns (uint8);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function receiveWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function getDomainSeparator() external view returns (bytes32);\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n    function VERSION_HASH() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n    function TRANSFER_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    function RECEIVE_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n}\",\"keccak256\":\"0x936db14ac1661c9acb6a2567152c0c5d63c39dc4932f6465c4a5e98be999857d\",\"license\":\"MIT\"},\"contracts/interfaces/ITipJar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITipJar {\\n    function tip() external payable;\\n    function updateMinerSplit(address minerAddress, address splitTo, uint32 splitPct) external;\\n    function setFeeCollector(address newCollector) external;\\n    function setFee(uint32 newFee) external;\\n    function changeAdmin(address newAdmin) external;\\n    function upgradeTo(address newImplementation) external;\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable; \\n}\",\"keccak256\":\"0xb8c5d3f6c6952fcaa36cde58e09128208bad87f7ead3c222853f1286072ba052\",\"license\":\"MIT\"},\"contracts/interfaces/IUniRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniRouter is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\",\"keccak256\":\"0x49a06a7ec967301e97b888a345574626d617691cf85ad27ea7f59ceed8e2ffb4\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xd217e5030771ed77e0df8d1028f05abdaba7df6991fc6e03229d8624c1999d9a\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20Extended.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20Extended;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20Extended token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Extended token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20Extended-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Extended token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Extended token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xa676267f3885c91fe8ded15c38a9ddb8889e5b1aa031f103e88f8a1f8f71646d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612239806100206000396000f3fe6080604052600436106100bc5760003560e01c806364631838116100745780637aaceb951161004e5780637aaceb951461015b57806390b181c3146101ac578063ed65f37e146101bf576100bc565b806364631838146101225780636d11b22a1461013557806375b7155814610148576100bc565b806333228746116100a557806333228746146100e95780633caf8ea9146100fc578063500e5c7b1461010f576100bc565b806319a0f5a0146100c15780632fce1561146100d6575b600080fd5b6100d46100cf366004611b5f565b6101d2565b005b6100d46100e4366004611bad565b610288565b6100d46100f7366004611d4d565b610499565b6100d461010a366004611e2c565b61054c565b6100d461011d366004611d4d565b610667565b6100d4610130366004611cf6565b6107a7565b6100d4610143366004611c3f565b6108a6565b6100d4610156366004611b5f565b610b30565b34801561016757600080fd5b50610183735312b0d160e16feeeec13437a0053009e756428781565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100d46101ba366004611e2c565b610c3f565b6100d46101cd366004611dab565b610d5e565b60003411610241576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064015b60405180910390fd5b6102638282356020840135610259604086018661208f565b8660800135610e80565b61026c34610fad565b61028461027f6080830160608401611b23565b61101d565b5050565b60008163ffffffff16116102f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610238565b61031a868635602088013561031060408a018a61208f565b8a6080013561108a565b600084846000818110610356577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061036b9190611b23565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156103d657600080fd5b505afa1580156103ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e9190611e9c565b90506000620f424061042663ffffffff861684612146565b610430919061210d565b9050610475898289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808c01358961117c565b61048e8361048960808b0160608c01611b23565b6112f0565b505050505050505050565b60008163ffffffff1611610509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610238565b61052b8383356020850135610521604087018761208f565b8760800135610e80565b610534816113b1565b61054761027f6080840160608501611b23565b505050565b600034116105b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610238565b6106226105c6604086018661208f565b60008181106105fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906106139190611b23565b8535608087013586868661144e565b610644858535602087013561063a604089018961208f565b8960800135610e80565b61064d34610fad565b61066061027f6080860160608701611b23565b5050505050565b60008163ffffffff16116106d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610238565b60003411610741576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610238565b6000620f424061075763ffffffff841634612146565b610761919061210d565b905061076c81610fad565b61078e8484356020860135610784604088018861208f565b88608001356114e0565b6107a161027f6080850160608601611b23565b50505050565b60008111610811576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610238565b8034101561087b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610238565b61088481610fad565b610534838335602085013561089c604087018761208f565b87608001356114e0565b60008463ffffffff1611610916576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610238565b61098261092660408a018a61208f565b600081811061095e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906109739190611b23565b893560808b013586868661144e565b6109a489893560208b013561099a60408d018d61208f565b8d6080013561108a565b6000878760008181106109e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906109f59190611b23565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015610a6057600080fd5b505afa158015610a74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a989190611e9c565b90506000620f4240610ab063ffffffff891684612146565b610aba919061210d565b9050610b0e8c828c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508e608001358c61117c565b610b228361048960808e0160608f01611b23565b505050505050505050505050565b60003411610b9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610238565b610ba334610fad565b610bc58282356020840135610bbb604086018661208f565b866080013561108a565b610284610bd5604083018361208f565b610be2604085018561208f565b9050818110610c1a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610c2f9190611b23565b6104896080840160608501611b23565b60003411610ca9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610238565b610cb234610fad565b610cc26105c6604086018661208f565b610ce48585356020870135610cda604089018961208f565b896080013561108a565b610660610cf4604086018661208f565b610d01604088018861208f565b9050818110610d39577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610d4e9190611b23565b6104896080870160608801611b23565b60008463ffffffff1611610dce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610238565b610e3a610dde604087018761208f565b6000818110610e16577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610e2b9190611b23565b8635608088013586868661144e565b610e5c8686356020880135610e5260408a018a61208f565b8a60800135610e80565b610e65846113b1565b610e7861027f6080870160608801611b23565b505050505050565b600083836000818110610ebc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610ed19190611b23565b9050610ef573ffffffffffffffffffffffffffffffffffffffff8216333089611555565b610f1673ffffffffffffffffffffffffffffffffffffffff82168888611631565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063791ac94790610f7290899089908990899030908a90600401611fba565b600060405180830381600087803b158015610f8c57600080fd5b505af1158015610fa0573d6000803e3d6000fd5b5050505050505050505050565b735312b0d160e16feeeec13437a0053009e756428773ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561100957600080fd5b505af1158015610e78573d6000803e3d6000fd5b60008173ffffffffffffffffffffffffffffffffffffffff164760405160006040518083038185875af1925050503d8060008114611077576040519150601f19603f3d011682016040523d82523d6000602084013e61107c565b606091505b505090508061028457600080fd5b6000838360008181106110c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906110db9190611b23565b90506110ff73ffffffffffffffffffffffffffffffffffffffff8216333089611555565b61112073ffffffffffffffffffffffffffffffffffffffff82168888611631565b6040517f5c11d79500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690635c11d79590610f7290899089908990899030908a90600401611fba565b6111e88585856000815181106111bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166116319092919063ffffffff16565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063791ac947906112429087908590889030908990600401612005565b600060405180830381600087803b15801561125c57600080fd5b505af1158015611270573d6000803e3d6000fd5b50505050735312b0d160e16feeeec13437a0053009e756428773ffffffffffffffffffffffffffffffffffffffff16632755cd2d476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156112d057600080fd5b505af11580156112e4573d6000803e3d6000fd5b50505050505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015261028490829073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b15801561135b57600080fd5b505afa15801561136f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113939190611e9c565b73ffffffffffffffffffffffffffffffffffffffff8516919061173e565b476000620f42406113c863ffffffff851684612146565b6113d2919061210d565b9050735312b0d160e16feeeec13437a0053009e756428773ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561143057600080fd5b505af1158015611444573d6000803e3d6000fd5b5050505050505050565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c4810182905273ffffffffffffffffffffffffffffffffffffffff87169063d505accf9060e401600060405180830381600087803b1580156112d057600080fd5b6040517fb6f9de9500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87169063b6f9de9590879061153c9088908890889030908990600401611f76565b6000604051808303818588803b158015610f8c57600080fd5b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526107a19085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611794565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156116a357600080fd5b505afa1580156116b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116db9190611e9c565b6116e591906120f5565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506107a19085907f095ea7b300000000000000000000000000000000000000000000000000000000906064016115af565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526105479084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016115af565b60006117f6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118a09092919063ffffffff16565b80519091501561054757808060200190518101906118149190611b3f565b610547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610238565b60606118af84846000856118b9565b90505b9392505050565b60608247101561194b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610238565b61195485611a40565b6119ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610238565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516119e39190611f09565b60006040518083038185875af1925050503d8060008114611a20576040519150601f19603f3d011682016040523d82523d6000602084013e611a25565b606091505b5091509150611a35828286611a4a565b979650505050505050565b803b15155b919050565b60608315611a595750816118b2565b825115611a695782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102389190611f25565b60008083601f840112611aae578182fd5b50813567ffffffffffffffff811115611ac5578182fd5b6020830191508360208260051b8501011115611ae057600080fd5b9250929050565b600060a08284031215611af8578081fd5b50919050565b803563ffffffff81168114611a4557600080fd5b803560ff81168114611a4557600080fd5b600060208284031215611b34578081fd5b81356118b2816121de565b600060208284031215611b50578081fd5b815180151581146118b2578182fd5b60008060408385031215611b71578081fd5b8235611b7c816121de565b9150602083013567ffffffffffffffff811115611b97578182fd5b611ba385828601611ae7565b9150509250929050565b60008060008060008060a08789031215611bc5578182fd5b8635611bd0816121de565b9550602087013567ffffffffffffffff80821115611bec578384fd5b611bf88a838b01611ae7565b96506040890135915080821115611c0d578384fd5b50611c1a89828a01611a9d565b90955093505060608701359150611c3360808801611afe565b90509295509295509295565b60008060008060008060008060006101008a8c031215611c5d578283fd5b8935611c68816121de565b985060208a013567ffffffffffffffff80821115611c84578485fd5b611c908d838e01611ae7565b995060408c0135915080821115611ca5578485fd5b50611cb28c828d01611a9d565b90985096505060608a01359450611ccb60808b01611afe565b9350611cd960a08b01611b12565b925060c08a0135915060e08a013590509295985092959850929598565b600080600060608486031215611d0a578283fd5b8335611d15816121de565b9250602084013567ffffffffffffffff811115611d30578283fd5b611d3c86828701611ae7565b925050604084013590509250925092565b600080600060608486031215611d61578283fd5b8335611d6c816121de565b9250602084013567ffffffffffffffff811115611d87578283fd5b611d9386828701611ae7565b925050611da260408501611afe565b90509250925092565b60008060008060008060c08789031215611dc3578182fd5b8635611dce816121de565b9550602087013567ffffffffffffffff811115611de9578283fd5b611df589828a01611ae7565b955050611e0460408801611afe565b9350611e1260608801611b12565b92506080870135915060a087013590509295509295509295565b600080600080600060a08688031215611e43578283fd5b8535611e4e816121de565b9450602086013567ffffffffffffffff811115611e69578384fd5b611e7588828901611ae7565b945050611e8460408701611b12565b94979396509394606081013594506080013592915050565b600060208284031215611ead578081fd5b5051919050565b60008284526020808501945082825b85811015611efe578135611ed6816121de565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611ec3565b509495945050505050565b60008251611f1b818460208701612183565b9190910192915050565b6000602082528251806020840152611f44816040850160208701612183565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600086825260806020830152611f90608083018688611eb4565b73ffffffffffffffffffffffffffffffffffffffff94909416604083015250606001529392505050565b600087825286602083015260a06040830152611fda60a083018688611eb4565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b8181101561206157845173ffffffffffffffffffffffffffffffffffffffff168352938301939183019160010161202f565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126120c3578283fd5b83018035915067ffffffffffffffff8211156120dd578283fd5b6020019150600581901b3603821315611ae057600080fd5b60008219821115612108576121086121af565b500190565b600082612141577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561217e5761217e6121af565b500290565b60005b8381101561219e578181015183820152602001612186565b838111156107a15750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461220057600080fd5b5056fea2646970667358221220febbe83c2df33dc11de4b78484b3a9057eae74f03a9160f50040faade061498a64736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106100bc5760003560e01c806364631838116100745780637aaceb951161004e5780637aaceb951461015b57806390b181c3146101ac578063ed65f37e146101bf576100bc565b806364631838146101225780636d11b22a1461013557806375b7155814610148576100bc565b806333228746116100a557806333228746146100e95780633caf8ea9146100fc578063500e5c7b1461010f576100bc565b806319a0f5a0146100c15780632fce1561146100d6575b600080fd5b6100d46100cf366004611b5f565b6101d2565b005b6100d46100e4366004611bad565b610288565b6100d46100f7366004611d4d565b610499565b6100d461010a366004611e2c565b61054c565b6100d461011d366004611d4d565b610667565b6100d4610130366004611cf6565b6107a7565b6100d4610143366004611c3f565b6108a6565b6100d4610156366004611b5f565b610b30565b34801561016757600080fd5b50610183735312b0d160e16feeeec13437a0053009e756428781565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100d46101ba366004611e2c565b610c3f565b6100d46101cd366004611dab565b610d5e565b60003411610241576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064015b60405180910390fd5b6102638282356020840135610259604086018661208f565b8660800135610e80565b61026c34610fad565b61028461027f6080830160608401611b23565b61101d565b5050565b60008163ffffffff16116102f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610238565b61031a868635602088013561031060408a018a61208f565b8a6080013561108a565b600084846000818110610356577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061036b9190611b23565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156103d657600080fd5b505afa1580156103ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e9190611e9c565b90506000620f424061042663ffffffff861684612146565b610430919061210d565b9050610475898289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808c01358961117c565b61048e8361048960808b0160608c01611b23565b6112f0565b505050505050505050565b60008163ffffffff1611610509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610238565b61052b8383356020850135610521604087018761208f565b8760800135610e80565b610534816113b1565b61054761027f6080840160608501611b23565b505050565b600034116105b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610238565b6106226105c6604086018661208f565b60008181106105fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906106139190611b23565b8535608087013586868661144e565b610644858535602087013561063a604089018961208f565b8960800135610e80565b61064d34610fad565b61066061027f6080860160608701611b23565b5050505050565b60008163ffffffff16116106d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610238565b60003411610741576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610238565b6000620f424061075763ffffffff841634612146565b610761919061210d565b905061076c81610fad565b61078e8484356020860135610784604088018861208f565b88608001356114e0565b6107a161027f6080850160608601611b23565b50505050565b60008111610811576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610238565b8034101561087b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610238565b61088481610fad565b610534838335602085013561089c604087018761208f565b87608001356114e0565b60008463ffffffff1611610916576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610238565b61098261092660408a018a61208f565b600081811061095e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906109739190611b23565b893560808b013586868661144e565b6109a489893560208b013561099a60408d018d61208f565b8d6080013561108a565b6000878760008181106109e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906109f59190611b23565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015610a6057600080fd5b505afa158015610a74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a989190611e9c565b90506000620f4240610ab063ffffffff891684612146565b610aba919061210d565b9050610b0e8c828c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508e608001358c61117c565b610b228361048960808e0160608f01611b23565b505050505050505050505050565b60003411610b9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610238565b610ba334610fad565b610bc58282356020840135610bbb604086018661208f565b866080013561108a565b610284610bd5604083018361208f565b610be2604085018561208f565b9050818110610c1a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610c2f9190611b23565b6104896080840160608501611b23565b60003411610ca9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610238565b610cb234610fad565b610cc26105c6604086018661208f565b610ce48585356020870135610cda604089018961208f565b896080013561108a565b610660610cf4604086018661208f565b610d01604088018861208f565b9050818110610d39577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610d4e9190611b23565b6104896080870160608801611b23565b60008463ffffffff1611610dce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610238565b610e3a610dde604087018761208f565b6000818110610e16577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610e2b9190611b23565b8635608088013586868661144e565b610e5c8686356020880135610e5260408a018a61208f565b8a60800135610e80565b610e65846113b1565b610e7861027f6080870160608801611b23565b505050505050565b600083836000818110610ebc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610ed19190611b23565b9050610ef573ffffffffffffffffffffffffffffffffffffffff8216333089611555565b610f1673ffffffffffffffffffffffffffffffffffffffff82168888611631565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063791ac94790610f7290899089908990899030908a90600401611fba565b600060405180830381600087803b158015610f8c57600080fd5b505af1158015610fa0573d6000803e3d6000fd5b5050505050505050505050565b735312b0d160e16feeeec13437a0053009e756428773ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561100957600080fd5b505af1158015610e78573d6000803e3d6000fd5b60008173ffffffffffffffffffffffffffffffffffffffff164760405160006040518083038185875af1925050503d8060008114611077576040519150601f19603f3d011682016040523d82523d6000602084013e61107c565b606091505b505090508061028457600080fd5b6000838360008181106110c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906110db9190611b23565b90506110ff73ffffffffffffffffffffffffffffffffffffffff8216333089611555565b61112073ffffffffffffffffffffffffffffffffffffffff82168888611631565b6040517f5c11d79500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690635c11d79590610f7290899089908990899030908a90600401611fba565b6111e88585856000815181106111bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166116319092919063ffffffff16565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063791ac947906112429087908590889030908990600401612005565b600060405180830381600087803b15801561125c57600080fd5b505af1158015611270573d6000803e3d6000fd5b50505050735312b0d160e16feeeec13437a0053009e756428773ffffffffffffffffffffffffffffffffffffffff16632755cd2d476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156112d057600080fd5b505af11580156112e4573d6000803e3d6000fd5b50505050505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015261028490829073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b15801561135b57600080fd5b505afa15801561136f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113939190611e9c565b73ffffffffffffffffffffffffffffffffffffffff8516919061173e565b476000620f42406113c863ffffffff851684612146565b6113d2919061210d565b9050735312b0d160e16feeeec13437a0053009e756428773ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561143057600080fd5b505af1158015611444573d6000803e3d6000fd5b5050505050505050565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c4810182905273ffffffffffffffffffffffffffffffffffffffff87169063d505accf9060e401600060405180830381600087803b1580156112d057600080fd5b6040517fb6f9de9500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87169063b6f9de9590879061153c9088908890889030908990600401611f76565b6000604051808303818588803b158015610f8c57600080fd5b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526107a19085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611794565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156116a357600080fd5b505afa1580156116b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116db9190611e9c565b6116e591906120f5565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506107a19085907f095ea7b300000000000000000000000000000000000000000000000000000000906064016115af565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526105479084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016115af565b60006117f6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118a09092919063ffffffff16565b80519091501561054757808060200190518101906118149190611b3f565b610547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610238565b60606118af84846000856118b9565b90505b9392505050565b60608247101561194b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610238565b61195485611a40565b6119ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610238565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516119e39190611f09565b60006040518083038185875af1925050503d8060008114611a20576040519150601f19603f3d011682016040523d82523d6000602084013e611a25565b606091505b5091509150611a35828286611a4a565b979650505050505050565b803b15155b919050565b60608315611a595750816118b2565b825115611a695782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102389190611f25565b60008083601f840112611aae578182fd5b50813567ffffffffffffffff811115611ac5578182fd5b6020830191508360208260051b8501011115611ae057600080fd5b9250929050565b600060a08284031215611af8578081fd5b50919050565b803563ffffffff81168114611a4557600080fd5b803560ff81168114611a4557600080fd5b600060208284031215611b34578081fd5b81356118b2816121de565b600060208284031215611b50578081fd5b815180151581146118b2578182fd5b60008060408385031215611b71578081fd5b8235611b7c816121de565b9150602083013567ffffffffffffffff811115611b97578182fd5b611ba385828601611ae7565b9150509250929050565b60008060008060008060a08789031215611bc5578182fd5b8635611bd0816121de565b9550602087013567ffffffffffffffff80821115611bec578384fd5b611bf88a838b01611ae7565b96506040890135915080821115611c0d578384fd5b50611c1a89828a01611a9d565b90955093505060608701359150611c3360808801611afe565b90509295509295509295565b60008060008060008060008060006101008a8c031215611c5d578283fd5b8935611c68816121de565b985060208a013567ffffffffffffffff80821115611c84578485fd5b611c908d838e01611ae7565b995060408c0135915080821115611ca5578485fd5b50611cb28c828d01611a9d565b90985096505060608a01359450611ccb60808b01611afe565b9350611cd960a08b01611b12565b925060c08a0135915060e08a013590509295985092959850929598565b600080600060608486031215611d0a578283fd5b8335611d15816121de565b9250602084013567ffffffffffffffff811115611d30578283fd5b611d3c86828701611ae7565b925050604084013590509250925092565b600080600060608486031215611d61578283fd5b8335611d6c816121de565b9250602084013567ffffffffffffffff811115611d87578283fd5b611d9386828701611ae7565b925050611da260408501611afe565b90509250925092565b60008060008060008060c08789031215611dc3578182fd5b8635611dce816121de565b9550602087013567ffffffffffffffff811115611de9578283fd5b611df589828a01611ae7565b955050611e0460408801611afe565b9350611e1260608801611b12565b92506080870135915060a087013590509295509295509295565b600080600080600060a08688031215611e43578283fd5b8535611e4e816121de565b9450602086013567ffffffffffffffff811115611e69578384fd5b611e7588828901611ae7565b945050611e8460408701611b12565b94979396509394606081013594506080013592915050565b600060208284031215611ead578081fd5b5051919050565b60008284526020808501945082825b85811015611efe578135611ed6816121de565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611ec3565b509495945050505050565b60008251611f1b818460208701612183565b9190910192915050565b6000602082528251806020840152611f44816040850160208701612183565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600086825260806020830152611f90608083018688611eb4565b73ffffffffffffffffffffffffffffffffffffffff94909416604083015250606001529392505050565b600087825286602083015260a06040830152611fda60a083018688611eb4565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b8181101561206157845173ffffffffffffffffffffffffffffffffffffffff168352938301939183019160010161202f565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126120c3578283fd5b83018035915067ffffffffffffffff8211156120dd578283fd5b6020019150600581901b3603821315611ae057600080fd5b60008219821115612108576121086121af565b500190565b600082612141577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561217e5761217e6121af565b500290565b60005b8381101561219e578181015183820152602001612186565b838111156107a15750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461220057600080fd5b5056fea2646970667358221220febbe83c2df33dc11de4b78484b3a9057eae74f03a9160f50040faade061498a64736f6c63430008030033",
  "devdoc": {
    "details": "Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas",
    "kind": "dev",
    "methods": {
      "swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "amount of ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)": {
        "params": {
          "r": "Half of the ECDSA signature pair",
          "router": "Uniswap V2-compliant Router contract",
          "s": "Half of the ECDSA signature pair",
          "trade": "Trade details",
          "v": "The recovery byte of the signature"
        }
      },
      "swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32,uint8,bytes32,bytes32)": {
        "params": {
          "r": "Half of the ECDSA signature pair",
          "router": "Uniswap V2-compliant Router contract",
          "s": "Half of the ECDSA signature pair",
          "tipPct": "% of resulting ETH to pay as tip",
          "trade": "Trade details",
          "v": "The recovery byte of the signature"
        }
      },
      "swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)": {
        "params": {
          "r": "Half of the ECDSA signature pair",
          "router": "Uniswap V2-compliant Router contract",
          "s": "Half of the ECDSA signature pair",
          "trade": "Trade details",
          "v": "The recovery byte of the signature"
        }
      },
      "swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32,uint8,bytes32,bytes32)": {
        "params": {
          "minEth": "ETH minimum for tip conversion",
          "pathToEth": "Path to ETH for tip",
          "r": "Half of the ECDSA signature pair",
          "router": "Uniswap V2-compliant Router contract",
          "s": "Half of the ECDSA signature pair",
          "tipPct": "% of resulting tokens to pay as tip",
          "trade": "Trade details",
          "v": "The recovery byte of the signature"
        }
      },
      "swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)": {
        "params": {
          "minEth": "ETH minimum for tip conversion",
          "pathToEth": "Path to ETH for tip",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting tokens to pay as tip",
          "trade": "Trade details"
        }
      }
    },
    "title": "ArcherSwapRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)": {
        "notice": "Swap ETH for tokens and pay % of ETH input as tip"
      },
      "swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "notice": "Swap ETH for tokens and pay % of ETH input as tip"
      },
      "swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for ETH and pay amount of ETH as tip"
      },
      "swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "notice": "Swap tokens for ETH and pay % of ETH as tip"
      },
      "swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)": {
        "notice": "Swap tokens for ETH and pay amount of ETH as tip, using permit for approval"
      },
      "swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32,uint8,bytes32,bytes32)": {
        "notice": "Swap tokens for ETH and pay % of ETH as tip, using permit for approval"
      },
      "swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),uint8,bytes32,bytes32)": {
        "notice": "Swap tokens for tokens and pay ETH amount as tip"
      },
      "swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32,uint8,bytes32,bytes32)": {
        "notice": "Swap tokens for tokens and pay % of tokens as tip, using permit for approval"
      },
      "swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for tokens and pay ETH amount as tip"
      },
      "swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)": {
        "notice": "Swap tokens for tokens and pay % of tokens as tip"
      },
      "tipJar()": {
        "notice": "TipJar proxy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}