{
  "address": "0x3C2E7A0616d205eEB6a0b49dFE98b3d364F38796",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        }
      ],
      "name": "addLiquidityAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETHAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETHWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permitA",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permitB",
          "type": "tuple"
        }
      ],
      "name": "addLiquidityWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityETHAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityETHWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        }
      ],
      "name": "swapETHForTokensWithTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapETHForTokensWithTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForETHAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForETHAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForETHWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForETHWithPermitAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForTokensWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "pathToEth",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForTokensWithPermitAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForTokensWithTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "pathToEth",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForTokensWithTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tipJar",
      "outputs": [
        {
          "internalType": "contract ITipJar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d99f38b8205df0f569b4029948f29e6471d07fa6327779402fc23d582c24621",
  "receipt": {
    "to": null,
    "from": "0x4F8f512Dab59F227EA70B1D8A0044aFa95CC80C3",
    "contractAddress": "0x3C2E7A0616d205eEB6a0b49dFE98b3d364F38796",
    "transactionIndex": 4,
    "gasUsed": "2862131",
    "logsBloom": "0x
    "blockHash": "0xe5074d08143a0c7b5cb5f882a213702e5013d20ee3b16b92cac74f1383ae0980",
    "transactionHash": "0x1d99f38b8205df0f569b4029948f29e6471d07fa6327779402fc23d582c24621",
    "logs": [],
    "blockNumber": 8411637,
    "cumulativeGasUsed": "4806211",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "aa97a7fbad5819b3e188951a4299a465",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"name\":\"addLiquidityAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permitA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permitB\",\"type\":\"tuple\"}],\"name\":\"addLiquidityWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"swapETHForTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapETHForTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForETHAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"swapTokensForETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForETHWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"swapTokensForTokensWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForTokensWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tipJar\",\"outputs\":[{\"internalType\":\"contract ITipJar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas\",\"kind\":\"dev\",\"methods\":{\"addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipAmount\":\"tip amount\"}},\"addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipAmount\":\"tip amount\"}},\"addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"permitA\":\"Permit details for token A\",\"permitB\":\"Permit details for token B\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipAmount\":\"amount of ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)\":{\"params\":{\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)\":{\"params\":{\"minEth\":\"ETH minimum for tip conversion\",\"pathToEth\":\"Path to ETH for tip\",\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting tokens to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)\":{\"params\":{\"minEth\":\"ETH minimum for tip conversion\",\"pathToEth\":\"Path to ETH for tip\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting tokens to pay as tip\",\"trade\":\"Trade details\"}}},\"title\":\"ArcherSwapRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Add liquidity to token pair\"},\"addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)\":{\"notice\":\"Add liquidity to ETH>Token pair\"},\"addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)\":{\"notice\":\"Add liquidity to ETH>Token pair\"},\"addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Add liquidity to pair, using permit for approvals\"},\"removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Remove liquidity from token>token pair\"},\"removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Remove liquidity from ETH>token pair\"},\"removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Remove liquidity from ETH>token pair, using permit for approval\"},\"removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Remove liquidity from token>token pair, using permit for approval\"},\"swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)\":{\"notice\":\"Swap ETH for tokens and pay % of ETH input as tip\"},\"swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"notice\":\"Swap ETH for tokens and pay % of ETH input as tip\"},\"swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for ETH and pay amount of ETH as tip\"},\"swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"notice\":\"Swap tokens for ETH and pay % of ETH as tip\"},\"swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\"},\"swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)\":{\"notice\":\"Swap tokens for ETH and pay % of ETH as tip, using permit for approval\"},\"swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Swap tokens for tokens and pay ETH amount as tip\"},\"swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)\":{\"notice\":\"Swap tokens for tokens and pay % of tokens as tip, using permit for approval\"},\"swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for tokens and pay ETH amount as tip\"},\"swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)\":{\"notice\":\"Swap tokens for tokens and pay % of tokens as tip\"},\"tipJar()\":{\"notice\":\"TipJar proxy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArcherSwapRouter.sol\":\"ArcherSwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/ArcherSwapRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n  Copyright 2021 Archer DAO: Chris Piatt (chris@archerdao.io).\\n*/\\n\\nimport \\\"./interfaces/IUniRouter.sol\\\";\\nimport \\\"./interfaces/ITipJar.sol\\\";\\nimport \\\"./interfaces/IERC20Extended.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @title ArcherSwapRouter\\n * @dev Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas\\n */\\ncontract ArcherSwapRouter {\\n    using SafeERC20 for IERC20Extended;\\n\\n    /// @notice TipJar proxy\\n    ITipJar public constant tipJar = ITipJar(0x5312B0d160E16feeeec13437a0053009e7564287);\\n\\n    /// @notice Trade details\\n    struct Trade {\\n        uint amountIn;\\n        uint amountOutMin;\\n        address[] path;\\n        address payable to;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Add Liquidity details\\n    struct AddLiquidity {\\n        address tokenA;\\n        address tokenB;\\n        uint amountADesired;\\n        uint amountBDesired;\\n        uint amountAMin;\\n        uint amountBMin;\\n        address to;\\n        uint deadline;\\n    }\\n\\n    /// @notice Remove Liquidity details\\n    struct RemoveLiquidity {\\n        IERC20Extended lpToken;\\n        address tokenA;\\n        address tokenB;\\n        uint liquidity;\\n        uint amountAMin;\\n        uint amountBMin;\\n        address to;\\n        uint deadline;\\n    }\\n\\n    /// @notice Permit details\\n    struct Permit {\\n        IERC20Extended token;\\n        uint256 amount;\\n        uint deadline;\\n        uint8 v;\\n        bytes32 r; \\n        bytes32 s;\\n    }\\n\\n    /**\\n     * @notice Add liquidity to token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     */\\n    function addLiquidityAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _addLiquidity(\\n            router,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Add liquidity to pair, using permit for approvals\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param permitA Permit details for token A\\n     * @param permitB Permit details for token B\\n     */\\n    function addLiquidityWithPermitAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity,\\n        Permit calldata permitA,\\n        Permit calldata permitB\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        if(permitA.amount > 0) {\\n            _permit(permitA.token, permitA.amount, permitA.deadline, permitA.v, permitA.r, permitA.s);\\n        }\\n        if(permitB.amount > 0) {\\n            _permit(permitB.token, permitB.amount, permitB.deadline, permitB.v, permitB.r, permitB.s);\\n        }\\n        _tipAmountETH(msg.value);\\n        _addLiquidity(\\n            router,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin, \\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Add liquidity to ETH>Token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param tipAmount tip amount\\n     */\\n    function addLiquidityETHAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity,\\n        uint256 tipAmount\\n    ) external payable {\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\n        require(msg.value >= liquidity.amountBDesired + tipAmount, \\\"must send ETH to cover tip + liquidity\\\");\\n        _tipAmountETH(tipAmount);\\n        _addLiquidityETH(\\n            router,\\n            liquidity.tokenA,\\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Add liquidity to ETH>Token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param tipAmount tip amount\\n     */\\n    function addLiquidityETHWithPermitAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity,\\n        Permit calldata permit,\\n        uint256 tipAmount\\n    ) external payable {\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\n        require(msg.value >= liquidity.amountBDesired + tipAmount, \\\"must send ETH to cover tip + liquidity\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _tipAmountETH(tipAmount);\\n        _addLiquidityETH(\\n            router,\\n            liquidity.tokenA,\\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from token>token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     */\\n    function removeLiquidityAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _removeLiquidity(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.liquidity,\\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from ETH>token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     */\\n    function removeLiquidityETHAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _removeLiquidityETH(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA,\\n            liquidity.liquidity, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from token>token pair, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param permit Permit details\\n     */\\n    function removeLiquidityWithPermitAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _removeLiquidity(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.liquidity,\\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from ETH>token pair, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param permit Permit details\\n     */\\n    function removeLiquidityETHWithPermitAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _removeLiquidityETH(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA,\\n            liquidity.liquidity, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     */\\n    function swapTokensForETHAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _tipAmountETH(msg.value);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     */\\n    function swapTokensForETHWithPermitAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _tipAmountETH(msg.value);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay % of ETH as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipPct % of resulting ETH to pay as tip\\n     */\\n    function swapTokensForETHAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _tipPctETH(tipPct);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay % of ETH as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     * @param tipPct % of resulting ETH to pay as tip\\n     */\\n    function swapTokensForETHWithPermitAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _tipPctETH(tipPct);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipAmount amount of ETH to pay as tip\\n     */\\n    function swapETHForTokensWithTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint256 tipAmount\\n    ) external payable {\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\n        require(msg.value >= tipAmount, \\\"must send ETH to cover tip\\\");\\n        _tipAmountETH(tipAmount);\\n        _swapETHForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipPct % of ETH to pay as tip\\n     */\\n    function swapETHForTokensWithTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        require(msg.value > 0, \\\"must send ETH to cover tip\\\");\\n        uint256 tipAmount = (msg.value * tipPct) / 1000000;\\n        _tipAmountETH(tipAmount);\\n        _swapETHForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     */\\n    function swapTokensForTokensWithTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _transferContractTokenBalance(IERC20Extended(trade.path[trade.path.length]), trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     */\\n    function swapTokensForTokensWithPermitAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _transferContractTokenBalance(IERC20Extended(trade.path[trade.path.length]), trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay % of tokens as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param pathToEth Path to ETH for tip\\n     * @param minEth ETH minimum for tip conversion\\n     * @param tipPct % of resulting tokens to pay as tip\\n     */\\n    function swapTokensForTokensWithTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        address[] calldata pathToEth,\\n        uint256 minEth,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\n        _transferContractTokenBalance(toToken, trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay % of tokens as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     * @param pathToEth Path to ETH for tip\\n     * @param minEth ETH minimum for tip conversion\\n     * @param tipPct % of resulting tokens to pay as tip\\n     */\\n    function swapTokensForTokensWithPermitAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit,\\n        address[] calldata pathToEth,\\n        uint256 minEth,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\n        _transferContractTokenBalance(toToken, trade.to);\\n    }\\n\\n    function _addLiquidity(\\n        IUniRouter router,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(tokenA);\\n        IERC20Extended toToken = IERC20Extended(tokenB);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountADesired);\\n        fromToken.safeIncreaseAllowance(address(router), amountADesired);\\n        toToken.safeTransferFrom(msg.sender, address(this), amountBDesired);\\n        toToken.safeIncreaseAllowance(address(router), amountBDesired);\\n        (uint256 amountA, uint256 amountB, ) = router.addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline);\\n        if(amountADesired > amountA) {\\n            fromToken.safeTransfer(msg.sender, fromToken.balanceOf(address(this)));\\n        }\\n        if(amountBDesired > amountB) {\\n            toToken.safeTransfer(msg.sender, toToken.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function _addLiquidityETH(\\n        IUniRouter router,\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountETHDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(token);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountTokenDesired);\\n        fromToken.safeIncreaseAllowance(address(router), amountTokenDesired);\\n        (uint256 amountToken, uint256 amountETH, ) = router.addLiquidityETH{value: amountETHDesired}(token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline);\\n        if(amountTokenDesired > amountToken) {\\n            fromToken.safeTransfer(msg.sender, amountTokenDesired - amountToken);\\n        }\\n        if(amountETHDesired > amountETH) {\\n            (bool success, ) = msg.sender.call{value: amountETHDesired - amountETH}(\\\"\\\");\\n            require(success);\\n        }\\n    }\\n\\n    function _removeLiquidity(\\n        IUniRouter router,\\n        IERC20Extended lpToken,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        lpToken.safeTransferFrom(msg.sender, address(this), liquidity);\\n        lpToken.safeIncreaseAllowance(address(router), liquidity);\\n        (uint256 amountA, uint256 amountB) = router.removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\\n        IERC20Extended fromToken = IERC20Extended(tokenA);\\n        IERC20Extended toToken = IERC20Extended(tokenB);\\n        fromToken.safeTransfer(msg.sender, amountA);\\n        toToken.safeTransfer(msg.sender, amountB);\\n    }\\n\\n    function _removeLiquidityETH(\\n        IUniRouter router,\\n        IERC20Extended lpToken,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        lpToken.safeTransferFrom(msg.sender, address(this), liquidity);\\n        lpToken.safeIncreaseAllowance(address(router), liquidity);\\n        (uint256 amountToken, uint256 amountETH) = router.removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\\n        IERC20Extended fromToken = IERC20Extended(token);\\n        fromToken.safeTransfer(msg.sender, amountToken);\\n        (bool success, ) = msg.sender.call{value: amountETH}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap ETH for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapETHForTokens(\\n        IUniRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) internal {\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountIn}(amountOutMin, path, address(this), deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for ETH\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForETH(\\n        IUniRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForTokens(\\n        IUniRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\\n    }\\n\\n    /**\\n     * @notice Tip % of ETH contract balance\\n     * @param tipPct % to tip\\n     */\\n    function _tipPctETH(uint32 tipPct) internal {\\n        uint256 contractBalance = address(this).balance;\\n        uint256 tipAmount = (contractBalance * tipPct) / 1000000;\\n        tipJar.tip{value: tipAmount}();\\n    }\\n\\n    /**\\n     * @notice Tip specific amount of ETH\\n     * @param tipAmount Amount to tip\\n     */\\n    function _tipAmountETH(uint256 tipAmount) internal {\\n        tipJar.tip{value: tipAmount}();\\n    }\\n\\n    /**\\n     * @notice Transfer contract ETH balance to specified user\\n     * @param to User to receive transfer\\n     */\\n    function _transferContractETHBalance(address payable to) internal {\\n        (bool success, ) = to.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /**\\n     * @notice Transfer contract token balance to specified user\\n     * @param token Token to transfer\\n     * @param to User to receive transfer\\n     */\\n    function _transferContractTokenBalance(IERC20Extended token, address payable to) internal {\\n        token.safeTransfer(to, token.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Convert a token balance into ETH and then tip\\n     * @param amountIn Amount to swap\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _tipWithTokens(\\n        IUniRouter router,\\n        uint amountIn,\\n        address[] memory path,\\n        uint256 deadline,\\n        uint256 minEth\\n    ) internal {\\n        IERC20Extended(path[0]).safeIncreaseAllowance(address(router), amountIn);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, minEth, path, address(this), deadline);\\n        tipJar.tip{value: address(this).balance}();\\n    }\\n\\n    /**\\n     * @notice Permit contract to spend user's balance\\n     * @param token Token to permit\\n     * @param amount Amount to permit\\n     * @param deadline Block timestamp deadline for permit\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _permit(\\n        IERC20Extended token, \\n        uint amount,\\n        uint deadline,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) internal {\\n        token.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    }\\n}\",\"keccak256\":\"0x351598415f325cdca3455613be96e887d7b289b51c8cfc6f92f2fc2ea1ae3eec\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IERC20Extended {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function version() external view returns (uint8);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function receiveWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function getDomainSeparator() external view returns (bytes32);\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n    function VERSION_HASH() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n    function TRANSFER_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    function RECEIVE_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n}\",\"keccak256\":\"0x936db14ac1661c9acb6a2567152c0c5d63c39dc4932f6465c4a5e98be999857d\",\"license\":\"MIT\"},\"contracts/interfaces/ITipJar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITipJar {\\n    function tip() external payable;\\n    function updateMinerSplit(address minerAddress, address splitTo, uint32 splitPct) external;\\n    function setFeeCollector(address newCollector) external;\\n    function setFee(uint32 newFee) external;\\n    function changeAdmin(address newAdmin) external;\\n    function upgradeTo(address newImplementation) external;\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable; \\n}\",\"keccak256\":\"0xb8c5d3f6c6952fcaa36cde58e09128208bad87f7ead3c222853f1286072ba052\",\"license\":\"MIT\"},\"contracts/interfaces/IUniRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniRouter is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\",\"keccak256\":\"0x49a06a7ec967301e97b888a345574626d617691cf85ad27ea7f59ceed8e2ffb4\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xd217e5030771ed77e0df8d1028f05abdaba7df6991fc6e03229d8624c1999d9a\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20Extended.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20Extended;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20Extended token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Extended token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20Extended-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Extended token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Extended token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xa676267f3885c91fe8ded15c38a9ddb8889e5b1aa031f103e88f8a1f8f71646d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061332f806100206000396000f3fe6080604052600436106101445760003560e01c806361692ecf116100c05780637aaceb9511610074578063b05703fc11610059578063b05703fc146102b9578063e6f03f72146102cc578063ef973cc0146102df57610144565b80637aaceb9514610255578063a8bd55bf146102a657610144565b80637366e884116100a55780637366e8841461021c5780637583d2bd1461022f57806375b715581461024257610144565b806361692ecf146101f6578063646318381461020957610144565b80633322874611610117578063500e5c7b116100fc578063500e5c7b146101bd5780635a7df949146101d05780635e94e5d2146101e357610144565b806333228746146101975780634ea618ac146101aa57610144565b806319a0f5a01461014957806328230aa11461015e578063298525f1146101715780632fce156114610184575b600080fd5b61015c610157366004612c17565b6102f2565b005b61015c61016c366004612bcf565b6103a8565b61015c61017f366004612cf7565b6104a3565b61015c610192366004612c65565b61055b565b61015c6101a5366004612eb5565b61076c565b61015c6101b8366004612ad0565b6107fd565b61015c6101cb366004612eb5565b610922565b61015c6101de366004612d4e565b610a5c565b61015c6101f1366004612cf7565b610ca2565b61015c610204366004612b7c565b610dc1565b61015c610217366004612e5e565b610f10565b61015c61022a366004612a9a565b61100f565b61015c61023d366004612bcf565b6110d1565b61015c610250366004612c17565b6111ae565b34801561026157600080fd5b5061027d735312b0d160e16feeeec13437a0053009e756428781565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61015c6102b4366004612bbc565b6112bd565b61015c6102c7366004612df7565b61137a565b61015c6102da366004612bbc565b611425565b61015c6102ed366004612b2b565b6114f2565b60003411610361576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064015b60405180910390fd5b6103838282356020840135610379604086018661316e565b8660800135611651565b61038c3461177e565b6103a461039f6080830160608401612a5e565b6117f6565b5050565b60003411610412576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b61041b3461177e565b61045461042b6020830183612a5e565b602083013560408401356104456080860160608701612f72565b85608001358660a00135611863565b61049e836104656020850185612a5e565b6104756040860160208701612a5e565b6060860135608087013560a088013561049460e08a0160c08b01612a5e565b8960e00135611909565b505050565b6000341161050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b61051d61042b6020830183612a5e565b61053f8383356020850135610535604087018761316e565b8760800135611651565b6105483461177e565b61049e61039f6080840160608501612a5e565b60008163ffffffff16116105cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610358565b6105ed86863560208801356105e360408a018a61316e565b8a60800135611ab8565b600084846000818110610629577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061063e9190612a5e565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156106a957600080fd5b505afa1580156106bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e19190612f0a565b90506000620f42406106f963ffffffff861684613225565b61070391906131ec565b9050610748898289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808c013589611baa565b6107618361075c60808b0160608c01612a5e565b611cfe565b505050505050505050565b60008163ffffffff16116107dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610358565b6107f48383356020850135610535604087018761316e565b61054881611dbf565b60003411610867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b6020820135156108aa576108aa6108816020840184612a5e565b6020840135604085013561089b6080870160608801612f72565b86608001358760a00135611863565b6020810135156108c4576108c461042b6020830183612a5e565b6108cd3461177e565b61091c846108de6020860186612a5e565b6108ee6040870160208801612a5e565b60408701356060880135608089013560a08a013561091260e08c0160c08d01612a5e565b8b60e00135611e5c565b50505050565b60008163ffffffff1611610992576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610358565b600034116109fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610358565b6000620f4240610a1263ffffffff841634613225565b610a1c91906131ec565b9050610a278161177e565b610a498484356020860135610a3f604088018861316e565b8860800135612164565b61091c61039f6080850160608601612a5e565b60008163ffffffff1611610acc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610358565b610b05610adc6020870187612a5e565b60208701356040880135610af660808a0160608b01612f72565b89608001358a60a00135611863565b610b278787356020890135610b1d60408b018b61316e565b8b60800135611ab8565b600084846000818110610b63577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610b789190612a5e565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015610be357600080fd5b505afa158015610bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1b9190612f0a565b90506000620f4240610c3363ffffffff861684613225565b610c3d91906131ec565b9050610c828a8289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808d013589611baa565b610c968361075c60808c0160608d01612a5e565b50505050505050505050565b60003411610d0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b610d153461177e565b610d2561042b6020830183612a5e565b610d478383356020850135610d3d604087018761316e565b8760800135611ab8565b61049e610d57604084018461316e565b610d64604086018661316e565b9050818110610d9c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610db19190612a5e565b61075c6080850160608601612a5e565b60008111610e2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b610e398160608401356131d4565b341015610ec8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d7573742073656e642045544820746f20636f76657220746970202b206c697160448201527f75696469747900000000000000000000000000000000000000000000000000006064820152608401610358565b610ed18161177e565b61049e83610ee26020850185612a5e565b60408501356060860135608087013560a0880135610f0660e08a0160c08b01612a5e565b8960e001356121d9565b60008111610f7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b80341015610fe4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610358565b610fed8161177e565b6105488383356020850135611005604087018761316e565b8760800135612164565b60003411611079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b6110823461177e565b6103a4826110936020840184612a5e565b6110a36040850160208601612a5e565b60408501356060860135608087013560a08801356110c760e08a0160c08b01612a5e565b8960e00135611e5c565b6000341161113b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b6111443461177e565b61115461042b6020830183612a5e565b61049e836111656020850185612a5e565b6111756040860160208701612a5e565b6111856060870160408801612a5e565b6060870135608088013560a08901356111a460e08b0160c08c01612a5e565b8a60e00135612321565b60003411611218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b6112213461177e565b6112438282356020840135611239604086018661316e565b8660800135611ab8565b6103a4611253604083018361316e565b611260604085018561316e565b9050818110611298577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906112ad9190612a5e565b61075c6080840160608501612a5e565b60003411611327576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b6113303461177e565b6103a4826113416020840184612a5e565b6113516040850160208601612a5e565b6060850135608086013560a087013561137060e0890160c08a01612a5e565b8860e00135611909565b60008163ffffffff16116113ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610358565b6113fa6108816020840184612a5e565b61141c8484356020860135611412604088018861316e565b8860800135611651565b610a4981611dbf565b6000341161148f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b6114983461177e565b6103a4826114a96020840184612a5e565b6114b96040850160208601612a5e565b6114c96060860160408701612a5e565b6060860135608087013560a08801356114e860e08a0160c08b01612a5e565b8960e00135612321565b6000811161155c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b61156a8160608501356131d4565b3410156115f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d7573742073656e642045544820746f20636f76657220746970202b206c697160448201527f75696469747900000000000000000000000000000000000000000000000000006064820152608401610358565b6116096108816020840184612a5e565b6116128161177e565b61091c846116236020860186612a5e565b60408601356060870135608088013560a089013561164760e08b0160c08c01612a5e565b8a60e001356121d9565b60008383600081811061168d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906116a29190612a5e565b90506116c673ffffffffffffffffffffffffffffffffffffffff821633308961247e565b6116e773ffffffffffffffffffffffffffffffffffffffff8216888861255a565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063791ac9479061174390899089908990899030908a90600401613099565b600060405180830381600087803b15801561175d57600080fd5b505af1158015611771573d6000803e3d6000fd5b5050505050505050505050565b735312b0d160e16feeeec13437a0053009e756428773ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156117da57600080fd5b505af11580156117ee573d6000803e3d6000fd5b505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff164760405160006040518083038185875af1925050503d8060008114611850576040519150601f19603f3d011682016040523d82523d6000602084013e611855565b606091505b50509050806103a457600080fd5b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c4810182905273ffffffffffffffffffffffffffffffffffffffff87169063d505accf9060e401600060405180830381600087803b1580156118f557600080fd5b505af1158015610c96573d6000803e3d6000fd5b61192b73ffffffffffffffffffffffffffffffffffffffff881633308861247e565b61194c73ffffffffffffffffffffffffffffffffffffffff8816898761255a565b6040517f02751cec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018790526044820186905260648201859052838116608483015260a4820183905260009182918b16906302751cec9060c4016040805180830381600087803b1580156119dd57600080fd5b505af11580156119f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a159190612f22565b909250905087611a3c73ffffffffffffffffffffffffffffffffffffffff82163385612667565b60003373ffffffffffffffffffffffffffffffffffffffff16836040515b60006040518083038185875af1925050503d8060008114611a97576040519150601f19603f3d011682016040523d82523d6000602084013e611a9c565b606091505b5050905080611aaa57600080fd5b505050505050505050505050565b600083836000818110611af4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611b099190612a5e565b9050611b2d73ffffffffffffffffffffffffffffffffffffffff821633308961247e565b611b4e73ffffffffffffffffffffffffffffffffffffffff8216888861255a565b6040517f5c11d79500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690635c11d7959061174390899089908990899030908a90600401613099565b611c16858585600081518110611be9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661255a9092919063ffffffff16565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063791ac94790611c7090879085908890309089906004016130e4565b600060405180830381600087803b158015611c8a57600080fd5b505af1158015611c9e573d6000803e3d6000fd5b50505050735312b0d160e16feeeec13437a0053009e756428773ffffffffffffffffffffffffffffffffffffffff16632755cd2d476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156118f557600080fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526103a490829073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b158015611d6957600080fd5b505afa158015611d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da19190612f0a565b73ffffffffffffffffffffffffffffffffffffffff85169190612667565b476000620f4240611dd663ffffffff851684613225565b611de091906131ec565b9050735312b0d160e16feeeec13437a0053009e756428773ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611e3e57600080fd5b505af1158015611e52573d6000803e3d6000fd5b5050505050505050565b8787611e8073ffffffffffffffffffffffffffffffffffffffff831633308b61247e565b611ea173ffffffffffffffffffffffffffffffffffffffff83168c8a61255a565b611ec373ffffffffffffffffffffffffffffffffffffffff821633308a61247e565b611ee473ffffffffffffffffffffffffffffffffffffffff82168c8961255a565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301528a81166024830152604482018a9052606482018990526084820188905260a4820187905285811660c483015260e4820185905260009182918e169063e8e337009061010401606060405180830381600087803b158015611f8657600080fd5b505af1158015611f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbe9190612f45565b5091509150818a111561208c576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015261208c90339073ffffffffffffffffffffffffffffffffffffffff8716906370a082319060240160206040518083038186803b15801561203657600080fd5b505afa15801561204a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206e9190612f0a565b73ffffffffffffffffffffffffffffffffffffffff87169190612667565b80891115612155576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015261215590339073ffffffffffffffffffffffffffffffffffffffff8616906370a082319060240160206040518083038186803b1580156120ff57600080fd5b505afa158015612113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121379190612f0a565b73ffffffffffffffffffffffffffffffffffffffff86169190612667565b50505050505050505050505050565b6040517fb6f9de9500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87169063b6f9de959087906121c09088908890889030908990600401613055565b6000604051808303818588803b15801561175d57600080fd5b866121fc73ffffffffffffffffffffffffffffffffffffffff821633308a61247e565b61221d73ffffffffffffffffffffffffffffffffffffffff82168a8961255a565b6040517ff305d71900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152602482018990526044820187905260648201869052848116608483015260a4820184905260009182918c169063f305d719908a9060c4016060604051808303818588803b1580156122b057600080fd5b505af11580156122c4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906122e99190612f45565b5091509150818911156123045761230433612137848c613262565b8088111561177157600033612319838b613262565b604051611a5a565b61234373ffffffffffffffffffffffffffffffffffffffff891633308861247e565b61236473ffffffffffffffffffffffffffffffffffffffff89168a8761255a565b6040517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015260448201879052606482018690526084820185905283811660a483015260c4820183905260009182918c169063baa2abde9060e4016040805180830381600087803b1580156123fd57600080fd5b505af1158015612411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124359190612f22565b9092509050888861245d73ffffffffffffffffffffffffffffffffffffffff83163386612667565b61215573ffffffffffffffffffffffffffffffffffffffff82163385612667565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261091c9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526126bd565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156125cc57600080fd5b505afa1580156125e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126049190612f0a565b61260e91906131d4565b60405173ffffffffffffffffffffffffffffffffffffffff851660248201526044810182905290915061091c9085907f095ea7b300000000000000000000000000000000000000000000000000000000906064016124d8565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261049e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016124d8565b600061271f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127c99092919063ffffffff16565b80519091501561049e578080602001905181019061273d9190612a7a565b61049e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610358565b60606127d884846000856127e2565b90505b9392505050565b606082471015612874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610358565b61287d85612969565b6128e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610358565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161290c9190612fe8565b60006040518083038185875af1925050503d8060008114612949576040519150601f19603f3d011682016040523d82523d6000602084013e61294e565b606091505b509150915061295e828286612973565b979650505050505050565b803b15155b919050565b606083156129825750816127db565b8251156129925782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103589190613004565b60008083601f8401126129d7578182fd5b50813567ffffffffffffffff8111156129ee578182fd5b6020830191508360208260051b8501011115612a0957600080fd5b9250929050565b60006101008284031215612a22578081fd5b50919050565b600060c08284031215612a22578081fd5b600060a08284031215612a22578081fd5b803563ffffffff8116811461296e57600080fd5b600060208284031215612a6f578081fd5b81356127db816132d4565b600060208284031215612a8b578081fd5b815180151581146127db578182fd5b6000806101208385031215612aad578081fd5b8235612ab8816132d4565b9150612ac78460208501612a10565b90509250929050565b6000806000806102a08587031215612ae6578182fd5b8435612af1816132d4565b9350612b008660208701612a10565b9250612b10866101208701612a28565b9150612b20866101e08701612a28565b905092959194509250565b6000806000806102008587031215612b41578384fd5b8435612b4c816132d4565b9350612b5b8660208701612a10565b9250612b6b866101208701612a28565b939692955092936101e00135925050565b60008060006101408486031215612b91578283fd5b8335612b9c816132d4565b9250612bab8560208601612a10565b915061012084013590509250925092565b6000806101208385031215612aad578182fd5b60008060006101e08486031215612be4578283fd5b8335612bef816132d4565b9250612bfe8560208601612a10565b9150612c0e856101208601612a28565b90509250925092565b60008060408385031215612c29578081fd5b8235612c34816132d4565b9150602083013567ffffffffffffffff811115612c4f578182fd5b612c5b85828601612a39565b9150509250929050565b60008060008060008060a08789031215612c7d578384fd5b8635612c88816132d4565b9550602087013567ffffffffffffffff80821115612ca4578586fd5b612cb08a838b01612a39565b96506040890135915080821115612cc5578586fd5b50612cd289828a016129c6565b90955093505060608701359150612ceb60808801612a4a565b90509295509295509295565b60008060006101008486031215612d0c578081fd5b8335612d17816132d4565b9250602084013567ffffffffffffffff811115612d32578182fd5b612d3e86828701612a39565b925050612c0e8560408601612a28565b6000806000806000806000610160888a031215612d69578485fd5b8735612d74816132d4565b9650602088013567ffffffffffffffff80821115612d90578687fd5b612d9c8b838c01612a39565b9750612dab8b60408c01612a28565b96506101008a0135915080821115612dc1578283fd5b50612dce8a828b016129c6565b9095509350506101208801359150612de96101408901612a4a565b905092959891949750929550565b6000806000806101208587031215612e0d578182fd5b8435612e18816132d4565b9350602085013567ffffffffffffffff811115612e33578283fd5b612e3f87828801612a39565b935050612e4f8660408701612a28565b9150612b206101008601612a4a565b600080600060608486031215612e72578081fd5b8335612e7d816132d4565b9250602084013567ffffffffffffffff811115612e98578182fd5b612ea486828701612a39565b925050604084013590509250925092565b600080600060608486031215612ec9578081fd5b8335612ed4816132d4565b9250602084013567ffffffffffffffff811115612eef578182fd5b612efb86828701612a39565b925050612c0e60408501612a4a565b600060208284031215612f1b578081fd5b5051919050565b60008060408385031215612f34578182fd5b505080516020909101519092909150565b600080600060608486031215612f59578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215612f83578081fd5b813560ff811681146127db578182fd5b60008284526020808501945082825b85811015612fdd578135612fb5816132d4565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612fa2565b509495945050505050565b60008251612ffa818460208701613279565b9190910192915050565b6000602082528251806020840152613023816040850160208701613279565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008682526080602083015261306f608083018688612f93565b73ffffffffffffffffffffffffffffffffffffffff94909416604083015250606001529392505050565b600087825286602083015260a060408301526130b960a083018688612f93565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b8181101561314057845173ffffffffffffffffffffffffffffffffffffffff168352938301939183019160010161310e565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126131a2578283fd5b83018035915067ffffffffffffffff8211156131bc578283fd5b6020019150600581901b3603821315612a0957600080fd5b600082198211156131e7576131e76132a5565b500190565b600082613220577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561325d5761325d6132a5565b500290565b600082821015613274576132746132a5565b500390565b60005b8381101561329457818101518382015260200161327c565b8381111561091c5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146132f657600080fd5b5056fea264697066735822122055dcef5522aa087429751bdd32dbc2afbde503b29631293f90d384a1e1ea1d3f64736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c806361692ecf116100c05780637aaceb9511610074578063b05703fc11610059578063b05703fc146102b9578063e6f03f72146102cc578063ef973cc0146102df57610144565b80637aaceb9514610255578063a8bd55bf146102a657610144565b80637366e884116100a55780637366e8841461021c5780637583d2bd1461022f57806375b715581461024257610144565b806361692ecf146101f6578063646318381461020957610144565b80633322874611610117578063500e5c7b116100fc578063500e5c7b146101bd5780635a7df949146101d05780635e94e5d2146101e357610144565b806333228746146101975780634ea618ac146101aa57610144565b806319a0f5a01461014957806328230aa11461015e578063298525f1146101715780632fce156114610184575b600080fd5b61015c610157366004612c17565b6102f2565b005b61015c61016c366004612bcf565b6103a8565b61015c61017f366004612cf7565b6104a3565b61015c610192366004612c65565b61055b565b61015c6101a5366004612eb5565b61076c565b61015c6101b8366004612ad0565b6107fd565b61015c6101cb366004612eb5565b610922565b61015c6101de366004612d4e565b610a5c565b61015c6101f1366004612cf7565b610ca2565b61015c610204366004612b7c565b610dc1565b61015c610217366004612e5e565b610f10565b61015c61022a366004612a9a565b61100f565b61015c61023d366004612bcf565b6110d1565b61015c610250366004612c17565b6111ae565b34801561026157600080fd5b5061027d735312b0d160e16feeeec13437a0053009e756428781565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61015c6102b4366004612bbc565b6112bd565b61015c6102c7366004612df7565b61137a565b61015c6102da366004612bbc565b611425565b61015c6102ed366004612b2b565b6114f2565b60003411610361576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064015b60405180910390fd5b6103838282356020840135610379604086018661316e565b8660800135611651565b61038c3461177e565b6103a461039f6080830160608401612a5e565b6117f6565b5050565b60003411610412576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b61041b3461177e565b61045461042b6020830183612a5e565b602083013560408401356104456080860160608701612f72565b85608001358660a00135611863565b61049e836104656020850185612a5e565b6104756040860160208701612a5e565b6060860135608087013560a088013561049460e08a0160c08b01612a5e565b8960e00135611909565b505050565b6000341161050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b61051d61042b6020830183612a5e565b61053f8383356020850135610535604087018761316e565b8760800135611651565b6105483461177e565b61049e61039f6080840160608501612a5e565b60008163ffffffff16116105cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610358565b6105ed86863560208801356105e360408a018a61316e565b8a60800135611ab8565b600084846000818110610629577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061063e9190612a5e565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156106a957600080fd5b505afa1580156106bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e19190612f0a565b90506000620f42406106f963ffffffff861684613225565b61070391906131ec565b9050610748898289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808c013589611baa565b6107618361075c60808b0160608c01612a5e565b611cfe565b505050505050505050565b60008163ffffffff16116107dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610358565b6107f48383356020850135610535604087018761316e565b61054881611dbf565b60003411610867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b6020820135156108aa576108aa6108816020840184612a5e565b6020840135604085013561089b6080870160608801612f72565b86608001358760a00135611863565b6020810135156108c4576108c461042b6020830183612a5e565b6108cd3461177e565b61091c846108de6020860186612a5e565b6108ee6040870160208801612a5e565b60408701356060880135608089013560a08a013561091260e08c0160c08d01612a5e565b8b60e00135611e5c565b50505050565b60008163ffffffff1611610992576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610358565b600034116109fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610358565b6000620f4240610a1263ffffffff841634613225565b610a1c91906131ec565b9050610a278161177e565b610a498484356020860135610a3f604088018861316e565b8860800135612164565b61091c61039f6080850160608601612a5e565b60008163ffffffff1611610acc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610358565b610b05610adc6020870187612a5e565b60208701356040880135610af660808a0160608b01612f72565b89608001358a60a00135611863565b610b278787356020890135610b1d60408b018b61316e565b8b60800135611ab8565b600084846000818110610b63577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610b789190612a5e565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015610be357600080fd5b505afa158015610bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1b9190612f0a565b90506000620f4240610c3363ffffffff861684613225565b610c3d91906131ec565b9050610c828a8289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808d013589611baa565b610c968361075c60808c0160608d01612a5e565b50505050505050505050565b60003411610d0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b610d153461177e565b610d2561042b6020830183612a5e565b610d478383356020850135610d3d604087018761316e565b8760800135611ab8565b61049e610d57604084018461316e565b610d64604086018661316e565b9050818110610d9c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610db19190612a5e565b61075c6080850160608601612a5e565b60008111610e2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b610e398160608401356131d4565b341015610ec8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d7573742073656e642045544820746f20636f76657220746970202b206c697160448201527f75696469747900000000000000000000000000000000000000000000000000006064820152608401610358565b610ed18161177e565b61049e83610ee26020850185612a5e565b60408501356060860135608087013560a0880135610f0660e08a0160c08b01612a5e565b8960e001356121d9565b60008111610f7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b80341015610fe4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610358565b610fed8161177e565b6105488383356020850135611005604087018761316e565b8760800135612164565b60003411611079576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b6110823461177e565b6103a4826110936020840184612a5e565b6110a36040850160208601612a5e565b60408501356060860135608087013560a08801356110c760e08a0160c08b01612a5e565b8960e00135611e5c565b6000341161113b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b6111443461177e565b61115461042b6020830183612a5e565b61049e836111656020850185612a5e565b6111756040860160208701612a5e565b6111856060870160408801612a5e565b6060870135608088013560a08901356111a460e08b0160c08c01612a5e565b8a60e00135612321565b60003411611218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b6112213461177e565b6112438282356020840135611239604086018661316e565b8660800135611ab8565b6103a4611253604083018361316e565b611260604085018561316e565b9050818110611298577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906112ad9190612a5e565b61075c6080840160608501612a5e565b60003411611327576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b6113303461177e565b6103a4826113416020840184612a5e565b6113516040850160208601612a5e565b6060850135608086013560a087013561137060e0890160c08a01612a5e565b8860e00135611909565b60008163ffffffff16116113ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610358565b6113fa6108816020840184612a5e565b61141c8484356020860135611412604088018861316e565b8860800135611651565b610a4981611dbf565b6000341161148f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b6114983461177e565b6103a4826114a96020840184612a5e565b6114b96040850160208601612a5e565b6114c96060860160408701612a5e565b6060860135608087013560a08801356114e860e08a0160c08b01612a5e565b8960e00135612321565b6000811161155c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610358565b61156a8160608501356131d4565b3410156115f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d7573742073656e642045544820746f20636f76657220746970202b206c697160448201527f75696469747900000000000000000000000000000000000000000000000000006064820152608401610358565b6116096108816020840184612a5e565b6116128161177e565b61091c846116236020860186612a5e565b60408601356060870135608088013560a089013561164760e08b0160c08c01612a5e565b8a60e001356121d9565b60008383600081811061168d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906116a29190612a5e565b90506116c673ffffffffffffffffffffffffffffffffffffffff821633308961247e565b6116e773ffffffffffffffffffffffffffffffffffffffff8216888861255a565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063791ac9479061174390899089908990899030908a90600401613099565b600060405180830381600087803b15801561175d57600080fd5b505af1158015611771573d6000803e3d6000fd5b5050505050505050505050565b735312b0d160e16feeeec13437a0053009e756428773ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156117da57600080fd5b505af11580156117ee573d6000803e3d6000fd5b505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff164760405160006040518083038185875af1925050503d8060008114611850576040519150601f19603f3d011682016040523d82523d6000602084013e611855565b606091505b50509050806103a457600080fd5b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c4810182905273ffffffffffffffffffffffffffffffffffffffff87169063d505accf9060e401600060405180830381600087803b1580156118f557600080fd5b505af1158015610c96573d6000803e3d6000fd5b61192b73ffffffffffffffffffffffffffffffffffffffff881633308861247e565b61194c73ffffffffffffffffffffffffffffffffffffffff8816898761255a565b6040517f02751cec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018790526044820186905260648201859052838116608483015260a4820183905260009182918b16906302751cec9060c4016040805180830381600087803b1580156119dd57600080fd5b505af11580156119f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a159190612f22565b909250905087611a3c73ffffffffffffffffffffffffffffffffffffffff82163385612667565b60003373ffffffffffffffffffffffffffffffffffffffff16836040515b60006040518083038185875af1925050503d8060008114611a97576040519150601f19603f3d011682016040523d82523d6000602084013e611a9c565b606091505b5050905080611aaa57600080fd5b505050505050505050505050565b600083836000818110611af4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611b099190612a5e565b9050611b2d73ffffffffffffffffffffffffffffffffffffffff821633308961247e565b611b4e73ffffffffffffffffffffffffffffffffffffffff8216888861255a565b6040517f5c11d79500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690635c11d7959061174390899089908990899030908a90600401613099565b611c16858585600081518110611be9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661255a9092919063ffffffff16565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063791ac94790611c7090879085908890309089906004016130e4565b600060405180830381600087803b158015611c8a57600080fd5b505af1158015611c9e573d6000803e3d6000fd5b50505050735312b0d160e16feeeec13437a0053009e756428773ffffffffffffffffffffffffffffffffffffffff16632755cd2d476040518263ffffffff1660e01b81526004016000604051808303818588803b1580156118f557600080fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526103a490829073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b158015611d6957600080fd5b505afa158015611d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da19190612f0a565b73ffffffffffffffffffffffffffffffffffffffff85169190612667565b476000620f4240611dd663ffffffff851684613225565b611de091906131ec565b9050735312b0d160e16feeeec13437a0053009e756428773ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611e3e57600080fd5b505af1158015611e52573d6000803e3d6000fd5b5050505050505050565b8787611e8073ffffffffffffffffffffffffffffffffffffffff831633308b61247e565b611ea173ffffffffffffffffffffffffffffffffffffffff83168c8a61255a565b611ec373ffffffffffffffffffffffffffffffffffffffff821633308a61247e565b611ee473ffffffffffffffffffffffffffffffffffffffff82168c8961255a565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301528a81166024830152604482018a9052606482018990526084820188905260a4820187905285811660c483015260e4820185905260009182918e169063e8e337009061010401606060405180830381600087803b158015611f8657600080fd5b505af1158015611f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbe9190612f45565b5091509150818a111561208c576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015261208c90339073ffffffffffffffffffffffffffffffffffffffff8716906370a082319060240160206040518083038186803b15801561203657600080fd5b505afa15801561204a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206e9190612f0a565b73ffffffffffffffffffffffffffffffffffffffff87169190612667565b80891115612155576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015261215590339073ffffffffffffffffffffffffffffffffffffffff8616906370a082319060240160206040518083038186803b1580156120ff57600080fd5b505afa158015612113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121379190612f0a565b73ffffffffffffffffffffffffffffffffffffffff86169190612667565b50505050505050505050505050565b6040517fb6f9de9500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87169063b6f9de959087906121c09088908890889030908990600401613055565b6000604051808303818588803b15801561175d57600080fd5b866121fc73ffffffffffffffffffffffffffffffffffffffff821633308a61247e565b61221d73ffffffffffffffffffffffffffffffffffffffff82168a8961255a565b6040517ff305d71900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152602482018990526044820187905260648201869052848116608483015260a4820184905260009182918c169063f305d719908a9060c4016060604051808303818588803b1580156122b057600080fd5b505af11580156122c4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906122e99190612f45565b5091509150818911156123045761230433612137848c613262565b8088111561177157600033612319838b613262565b604051611a5a565b61234373ffffffffffffffffffffffffffffffffffffffff891633308861247e565b61236473ffffffffffffffffffffffffffffffffffffffff89168a8761255a565b6040517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015260448201879052606482018690526084820185905283811660a483015260c4820183905260009182918c169063baa2abde9060e4016040805180830381600087803b1580156123fd57600080fd5b505af1158015612411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124359190612f22565b9092509050888861245d73ffffffffffffffffffffffffffffffffffffffff83163386612667565b61215573ffffffffffffffffffffffffffffffffffffffff82163385612667565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261091c9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526126bd565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156125cc57600080fd5b505afa1580156125e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126049190612f0a565b61260e91906131d4565b60405173ffffffffffffffffffffffffffffffffffffffff851660248201526044810182905290915061091c9085907f095ea7b300000000000000000000000000000000000000000000000000000000906064016124d8565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261049e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016124d8565b600061271f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127c99092919063ffffffff16565b80519091501561049e578080602001905181019061273d9190612a7a565b61049e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610358565b60606127d884846000856127e2565b90505b9392505050565b606082471015612874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610358565b61287d85612969565b6128e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610358565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161290c9190612fe8565b60006040518083038185875af1925050503d8060008114612949576040519150601f19603f3d011682016040523d82523d6000602084013e61294e565b606091505b509150915061295e828286612973565b979650505050505050565b803b15155b919050565b606083156129825750816127db565b8251156129925782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103589190613004565b60008083601f8401126129d7578182fd5b50813567ffffffffffffffff8111156129ee578182fd5b6020830191508360208260051b8501011115612a0957600080fd5b9250929050565b60006101008284031215612a22578081fd5b50919050565b600060c08284031215612a22578081fd5b600060a08284031215612a22578081fd5b803563ffffffff8116811461296e57600080fd5b600060208284031215612a6f578081fd5b81356127db816132d4565b600060208284031215612a8b578081fd5b815180151581146127db578182fd5b6000806101208385031215612aad578081fd5b8235612ab8816132d4565b9150612ac78460208501612a10565b90509250929050565b6000806000806102a08587031215612ae6578182fd5b8435612af1816132d4565b9350612b008660208701612a10565b9250612b10866101208701612a28565b9150612b20866101e08701612a28565b905092959194509250565b6000806000806102008587031215612b41578384fd5b8435612b4c816132d4565b9350612b5b8660208701612a10565b9250612b6b866101208701612a28565b939692955092936101e00135925050565b60008060006101408486031215612b91578283fd5b8335612b9c816132d4565b9250612bab8560208601612a10565b915061012084013590509250925092565b6000806101208385031215612aad578182fd5b60008060006101e08486031215612be4578283fd5b8335612bef816132d4565b9250612bfe8560208601612a10565b9150612c0e856101208601612a28565b90509250925092565b60008060408385031215612c29578081fd5b8235612c34816132d4565b9150602083013567ffffffffffffffff811115612c4f578182fd5b612c5b85828601612a39565b9150509250929050565b60008060008060008060a08789031215612c7d578384fd5b8635612c88816132d4565b9550602087013567ffffffffffffffff80821115612ca4578586fd5b612cb08a838b01612a39565b96506040890135915080821115612cc5578586fd5b50612cd289828a016129c6565b90955093505060608701359150612ceb60808801612a4a565b90509295509295509295565b60008060006101008486031215612d0c578081fd5b8335612d17816132d4565b9250602084013567ffffffffffffffff811115612d32578182fd5b612d3e86828701612a39565b925050612c0e8560408601612a28565b6000806000806000806000610160888a031215612d69578485fd5b8735612d74816132d4565b9650602088013567ffffffffffffffff80821115612d90578687fd5b612d9c8b838c01612a39565b9750612dab8b60408c01612a28565b96506101008a0135915080821115612dc1578283fd5b50612dce8a828b016129c6565b9095509350506101208801359150612de96101408901612a4a565b905092959891949750929550565b6000806000806101208587031215612e0d578182fd5b8435612e18816132d4565b9350602085013567ffffffffffffffff811115612e33578283fd5b612e3f87828801612a39565b935050612e4f8660408701612a28565b9150612b206101008601612a4a565b600080600060608486031215612e72578081fd5b8335612e7d816132d4565b9250602084013567ffffffffffffffff811115612e98578182fd5b612ea486828701612a39565b925050604084013590509250925092565b600080600060608486031215612ec9578081fd5b8335612ed4816132d4565b9250602084013567ffffffffffffffff811115612eef578182fd5b612efb86828701612a39565b925050612c0e60408501612a4a565b600060208284031215612f1b578081fd5b5051919050565b60008060408385031215612f34578182fd5b505080516020909101519092909150565b600080600060608486031215612f59578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215612f83578081fd5b813560ff811681146127db578182fd5b60008284526020808501945082825b85811015612fdd578135612fb5816132d4565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612fa2565b509495945050505050565b60008251612ffa818460208701613279565b9190910192915050565b6000602082528251806020840152613023816040850160208701613279565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008682526080602083015261306f608083018688612f93565b73ffffffffffffffffffffffffffffffffffffffff94909416604083015250606001529392505050565b600087825286602083015260a060408301526130b960a083018688612f93565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b8181101561314057845173ffffffffffffffffffffffffffffffffffffffff168352938301939183019160010161310e565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126131a2578283fd5b83018035915067ffffffffffffffff8211156131bc578283fd5b6020019150600581901b3603821315612a0957600080fd5b600082198211156131e7576131e76132a5565b500190565b600082613220577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561325d5761325d6132a5565b500290565b600082821015613274576132746132a5565b500390565b60005b8381101561329457818101518382015260200161327c565b8381111561091c5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146132f657600080fd5b5056fea264697066735822122055dcef5522aa087429751bdd32dbc2afbde503b29631293f90d384a1e1ea1d3f64736f6c63430008030033",
  "devdoc": {
    "details": "Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas",
    "kind": "dev",
    "methods": {
      "addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "tip amount"
        }
      },
      "addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "tip amount"
        }
      },
      "addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "liquidity": "Liquidity details",
          "permitA": "Permit details for token A",
          "permitB": "Permit details for token B",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "liquidity": "Liquidity details",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "liquidity": "Liquidity details",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "amount of ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)": {
        "params": {
          "minEth": "ETH minimum for tip conversion",
          "pathToEth": "Path to ETH for tip",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting tokens to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)": {
        "params": {
          "minEth": "ETH minimum for tip conversion",
          "pathToEth": "Path to ETH for tip",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting tokens to pay as tip",
          "trade": "Trade details"
        }
      }
    },
    "title": "ArcherSwapRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))": {
        "notice": "Add liquidity to token pair"
      },
      "addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)": {
        "notice": "Add liquidity to ETH>Token pair"
      },
      "addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)": {
        "notice": "Add liquidity to ETH>Token pair"
      },
      "addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Add liquidity to pair, using permit for approvals"
      },
      "removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "notice": "Remove liquidity from token>token pair"
      },
      "removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "notice": "Remove liquidity from ETH>token pair"
      },
      "removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Remove liquidity from ETH>token pair, using permit for approval"
      },
      "removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Remove liquidity from token>token pair, using permit for approval"
      },
      "swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)": {
        "notice": "Swap ETH for tokens and pay % of ETH input as tip"
      },
      "swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "notice": "Swap ETH for tokens and pay % of ETH input as tip"
      },
      "swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for ETH and pay amount of ETH as tip"
      },
      "swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "notice": "Swap tokens for ETH and pay % of ETH as tip"
      },
      "swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Swap tokens for ETH and pay amount of ETH as tip, using permit for approval"
      },
      "swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)": {
        "notice": "Swap tokens for ETH and pay % of ETH as tip, using permit for approval"
      },
      "swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Swap tokens for tokens and pay ETH amount as tip"
      },
      "swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)": {
        "notice": "Swap tokens for tokens and pay % of tokens as tip, using permit for approval"
      },
      "swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for tokens and pay ETH amount as tip"
      },
      "swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)": {
        "notice": "Swap tokens for tokens and pay % of tokens as tip"
      },
      "tipJar()": {
        "notice": "TipJar proxy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}