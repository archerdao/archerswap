{
  "address": "0x14C2C90e876aD185Ad465459aAFE0c833E6CE987",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tipJar",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        }
      ],
      "name": "addLiquidityAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETHAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETHWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permitA",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permitB",
          "type": "tuple"
        }
      ],
      "name": "addLiquidityWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityETHAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityETHWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        }
      ],
      "name": "swapETHForTokensWithTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapETHForTokensWithTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForETHAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForETHAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForETHWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForETHWithPermitAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForTokensWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "pathToEth",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForTokensWithPermitAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForTokensWithTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "pathToEth",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForTokensWithTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tipJar",
      "outputs": [
        {
          "internalType": "contract ITipJar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xce56087aa2cc09071852c7401b83c5e06bdb3377c995174bf32b50a5f985712f",
  "receipt": {
    "to": null,
    "from": "0x4F8f512Dab59F227EA70B1D8A0044aFa95CC80C3",
    "contractAddress": "0x14C2C90e876aD185Ad465459aAFE0c833E6CE987",
    "transactionIndex": 15,
    "gasUsed": "2886220",
    "logsBloom": "0x
    "blockHash": "0xfcacaebbfc04b2688a0045c1c26f39aa98245bdf10d0cb997f91fb91b209ccf3",
    "transactionHash": "0xce56087aa2cc09071852c7401b83c5e06bdb3377c995174bf32b50a5f985712f",
    "logs": [],
    "blockNumber": 8416548,
    "cumulativeGasUsed": "5158388",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x914528335B5d031c93Ac86e6F6A6C67052Eb44f0"
  ],
  "solcInputHash": "5914c5a9c14760eb50683f1cad9eed50",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tipJar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"name\":\"addLiquidityAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permitA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permitB\",\"type\":\"tuple\"}],\"name\":\"addLiquidityWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"swapETHForTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapETHForTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForETHAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"swapTokensForETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForETHWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"swapTokensForTokensWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForTokensWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tipJar\",\"outputs\":[{\"internalType\":\"contract ITipJar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas\",\"kind\":\"dev\",\"methods\":{\"addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipAmount\":\"tip amount\"}},\"addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipAmount\":\"tip amount\"}},\"addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"permitA\":\"Permit details for token A\",\"permitB\":\"Permit details for token B\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"constructor\":{\"params\":{\"_tipJar\":\"Address of TipJar contract\"}},\"removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipAmount\":\"amount of ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)\":{\"params\":{\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)\":{\"params\":{\"minEth\":\"ETH minimum for tip conversion\",\"pathToEth\":\"Path to ETH for tip\",\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting tokens to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)\":{\"params\":{\"minEth\":\"ETH minimum for tip conversion\",\"pathToEth\":\"Path to ETH for tip\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting tokens to pay as tip\",\"trade\":\"Trade details\"}}},\"title\":\"ArcherSwapRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Add liquidity to token pair\"},\"addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)\":{\"notice\":\"Add liquidity to ETH>Token pair\"},\"addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)\":{\"notice\":\"Add liquidity to ETH>Token pair\"},\"addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Add liquidity to pair, using permit for approvals\"},\"constructor\":{\"notice\":\"Contructs a new ArcherSwap Router\"},\"removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Remove liquidity from token>token pair\"},\"removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Remove liquidity from ETH>token pair\"},\"removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Remove liquidity from ETH>token pair, using permit for approval\"},\"removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Remove liquidity from token>token pair, using permit for approval\"},\"swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)\":{\"notice\":\"Swap ETH for tokens and pay % of ETH input as tip\"},\"swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"notice\":\"Swap ETH for tokens and pay % of ETH input as tip\"},\"swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for ETH and pay amount of ETH as tip\"},\"swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"notice\":\"Swap tokens for ETH and pay % of ETH as tip\"},\"swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\"},\"swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)\":{\"notice\":\"Swap tokens for ETH and pay % of ETH as tip, using permit for approval\"},\"swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Swap tokens for tokens and pay ETH amount as tip\"},\"swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)\":{\"notice\":\"Swap tokens for tokens and pay % of tokens as tip, using permit for approval\"},\"swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for tokens and pay ETH amount as tip\"},\"swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)\":{\"notice\":\"Swap tokens for tokens and pay % of tokens as tip\"},\"tipJar()\":{\"notice\":\"TipJar proxy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArcherSwapRouter.sol\":\"ArcherSwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/ArcherSwapRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n  Copyright 2021 Archer DAO: Chris Piatt (chris@archerdao.io).\\n*/\\n\\nimport \\\"./interfaces/IUniRouter.sol\\\";\\nimport \\\"./interfaces/ITipJar.sol\\\";\\nimport \\\"./interfaces/IERC20Extended.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @title ArcherSwapRouter\\n * @dev Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas\\n */\\ncontract ArcherSwapRouter {\\n    using SafeERC20 for IERC20Extended;\\n\\n    /// @notice Receive function to allow contract to accept ETH\\n    receive() external payable {}\\n    \\n    /// @notice Fallback function in case receive function is not matched\\n    fallback() external payable {}\\n\\n    /// @notice TipJar proxy\\n    ITipJar public immutable tipJar;\\n\\n    /// @notice Trade details\\n    struct Trade {\\n        uint amountIn;\\n        uint amountOutMin;\\n        address[] path;\\n        address payable to;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Add Liquidity details\\n    struct AddLiquidity {\\n        address tokenA;\\n        address tokenB;\\n        uint amountADesired;\\n        uint amountBDesired;\\n        uint amountAMin;\\n        uint amountBMin;\\n        address to;\\n        uint deadline;\\n    }\\n\\n    /// @notice Remove Liquidity details\\n    struct RemoveLiquidity {\\n        IERC20Extended lpToken;\\n        address tokenA;\\n        address tokenB;\\n        uint liquidity;\\n        uint amountAMin;\\n        uint amountBMin;\\n        address to;\\n        uint deadline;\\n    }\\n\\n    /// @notice Permit details\\n    struct Permit {\\n        IERC20Extended token;\\n        uint256 amount;\\n        uint deadline;\\n        uint8 v;\\n        bytes32 r; \\n        bytes32 s;\\n    }\\n\\n    /**\\n     * @notice Contructs a new ArcherSwap Router\\n     * @param _tipJar Address of TipJar contract\\n     */\\n    constructor(address _tipJar) {\\n        tipJar = ITipJar(_tipJar);\\n    }\\n\\n    /**\\n     * @notice Add liquidity to token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     */\\n    function addLiquidityAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _addLiquidity(\\n            router,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Add liquidity to pair, using permit for approvals\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param permitA Permit details for token A\\n     * @param permitB Permit details for token B\\n     */\\n    function addLiquidityWithPermitAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity,\\n        Permit calldata permitA,\\n        Permit calldata permitB\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        if(permitA.amount > 0) {\\n            _permit(permitA.token, permitA.amount, permitA.deadline, permitA.v, permitA.r, permitA.s);\\n        }\\n        if(permitB.amount > 0) {\\n            _permit(permitB.token, permitB.amount, permitB.deadline, permitB.v, permitB.r, permitB.s);\\n        }\\n        _tipAmountETH(msg.value);\\n        _addLiquidity(\\n            router,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin, \\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Add liquidity to ETH>Token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param tipAmount tip amount\\n     */\\n    function addLiquidityETHAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity,\\n        uint256 tipAmount\\n    ) external payable {\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\n        require(msg.value >= liquidity.amountBDesired + tipAmount, \\\"must send ETH to cover tip + liquidity\\\");\\n        _tipAmountETH(tipAmount);\\n        _addLiquidityETH(\\n            router,\\n            liquidity.tokenA,\\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Add liquidity to ETH>Token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param tipAmount tip amount\\n     */\\n    function addLiquidityETHWithPermitAndTipAmount(\\n        IUniRouter router,\\n        AddLiquidity calldata liquidity,\\n        Permit calldata permit,\\n        uint256 tipAmount\\n    ) external payable {\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\n        require(msg.value >= liquidity.amountBDesired + tipAmount, \\\"must send ETH to cover tip + liquidity\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _tipAmountETH(tipAmount);\\n        _addLiquidityETH(\\n            router,\\n            liquidity.tokenA,\\n            liquidity.amountADesired, \\n            liquidity.amountBDesired, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from token>token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     */\\n    function removeLiquidityAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _removeLiquidity(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.liquidity,\\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from ETH>token pair\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     */\\n    function removeLiquidityETHAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _removeLiquidityETH(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA,\\n            liquidity.liquidity, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from token>token pair, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param permit Permit details\\n     */\\n    function removeLiquidityWithPermitAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _removeLiquidity(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA, \\n            liquidity.tokenB, \\n            liquidity.liquidity,\\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from ETH>token pair, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param liquidity Liquidity details\\n     * @param permit Permit details\\n     */\\n    function removeLiquidityETHWithPermitAndTipAmount(\\n        IUniRouter router,\\n        RemoveLiquidity calldata liquidity,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _removeLiquidityETH(\\n            router,\\n            liquidity.lpToken,\\n            liquidity.tokenA,\\n            liquidity.liquidity, \\n            liquidity.amountAMin,\\n            liquidity.amountBMin,\\n            liquidity.to,\\n            liquidity.deadline\\n        );\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     */\\n    function swapTokensForETHAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     */\\n    function swapTokensForETHWithPermitAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _tipAmountETH(msg.value);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay % of ETH as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipPct % of resulting ETH to pay as tip\\n     */\\n    function swapTokensForETHAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _tipPctETH(tipPct);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for ETH and pay % of ETH as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     * @param tipPct % of resulting ETH to pay as tip\\n     */\\n    function swapTokensForETHWithPermitAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _tipPctETH(tipPct);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipAmount amount of ETH to pay as tip\\n     */\\n    function swapETHForTokensWithTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint256 tipAmount\\n    ) external payable {\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\n        require(msg.value >= tipAmount, \\\"must send ETH to cover tip\\\");\\n        _tipAmountETH(tipAmount);\\n        _swapETHForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.to, trade.deadline);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param tipPct % of ETH to pay as tip\\n     */\\n    function swapETHForTokensWithTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        require(msg.value > 0, \\\"must send ETH to cover tip\\\");\\n        uint256 tipAmount = (msg.value * tipPct) / 1000000;\\n        _tipAmountETH(tipAmount);\\n        _swapETHForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.to, trade.deadline);\\n        _transferContractETHBalance(trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     */\\n    function swapTokensForTokensWithTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _transferContractTokenBalance(IERC20Extended(trade.path[trade.path.length]), trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     */\\n    function swapTokensForTokensWithPermitAndTipAmount(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit\\n    ) external payable {\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\n        _tipAmountETH(msg.value);\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        _transferContractTokenBalance(IERC20Extended(trade.path[trade.path.length]), trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay % of tokens as tip\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param pathToEth Path to ETH for tip\\n     * @param minEth ETH minimum for tip conversion\\n     * @param tipPct % of resulting tokens to pay as tip\\n     */\\n    function swapTokensForTokensWithTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        address[] calldata pathToEth,\\n        uint256 minEth,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\n        _transferContractTokenBalance(toToken, trade.to);\\n    }\\n\\n    /**\\n     * @notice Swap tokens for tokens and pay % of tokens as tip, using permit for approval\\n     * @param router Uniswap V2-compliant Router contract\\n     * @param trade Trade details\\n     * @param permit Permit details\\n     * @param pathToEth Path to ETH for tip\\n     * @param minEth ETH minimum for tip conversion\\n     * @param tipPct % of resulting tokens to pay as tip\\n     */\\n    function swapTokensForTokensWithPermitAndTipPct(\\n        IUniRouter router,\\n        Trade calldata trade,\\n        Permit calldata permit,\\n        address[] calldata pathToEth,\\n        uint256 minEth,\\n        uint32 tipPct\\n    ) external payable {\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\n        _transferContractTokenBalance(toToken, trade.to);\\n    }\\n\\n    function _addLiquidity(\\n        IUniRouter router,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(tokenA);\\n        IERC20Extended toToken = IERC20Extended(tokenB);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountADesired);\\n        fromToken.safeIncreaseAllowance(address(router), amountADesired);\\n        toToken.safeTransferFrom(msg.sender, address(this), amountBDesired);\\n        toToken.safeIncreaseAllowance(address(router), amountBDesired);\\n        (uint256 amountA, uint256 amountB, ) = router.addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline);\\n        if(amountADesired > amountA) {\\n            fromToken.safeTransfer(msg.sender, fromToken.balanceOf(address(this)));\\n        }\\n        if(amountBDesired > amountB) {\\n            toToken.safeTransfer(msg.sender, toToken.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function _addLiquidityETH(\\n        IUniRouter router,\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountETHDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(token);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountTokenDesired);\\n        fromToken.safeIncreaseAllowance(address(router), amountTokenDesired);\\n        (uint256 amountToken, uint256 amountETH, ) = router.addLiquidityETH{value: amountETHDesired}(token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline);\\n        if(amountTokenDesired > amountToken) {\\n            fromToken.safeTransfer(msg.sender, amountTokenDesired - amountToken);\\n        }\\n        if(amountETHDesired > amountETH) {\\n            (bool success, ) = msg.sender.call{value: amountETHDesired - amountETH}(\\\"\\\");\\n            require(success);\\n        }\\n    }\\n\\n    function _removeLiquidity(\\n        IUniRouter router,\\n        IERC20Extended lpToken,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        lpToken.safeTransferFrom(msg.sender, address(this), liquidity);\\n        lpToken.safeIncreaseAllowance(address(router), liquidity);\\n        (uint256 amountA, uint256 amountB) = router.removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\\n        IERC20Extended fromToken = IERC20Extended(tokenA);\\n        IERC20Extended toToken = IERC20Extended(tokenB);\\n        fromToken.safeTransfer(msg.sender, amountA);\\n        toToken.safeTransfer(msg.sender, amountB);\\n    }\\n\\n    function _removeLiquidityETH(\\n        IUniRouter router,\\n        IERC20Extended lpToken,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        lpToken.safeTransferFrom(msg.sender, address(this), liquidity);\\n        lpToken.safeIncreaseAllowance(address(router), liquidity);\\n        (uint256 amountToken, uint256 amountETH) = router.removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\\n        IERC20Extended fromToken = IERC20Extended(token);\\n        fromToken.safeTransfer(msg.sender, amountToken);\\n        (bool success, ) = msg.sender.call{value: amountETH}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap ETH for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapETHForTokens(\\n        IUniRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) internal {\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountIn}(amountOutMin, path, to, deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for ETH\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForETH(\\n        IUniRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of swap tokens for tokens\\n     * @param amountIn Amount to swap\\n     * @param amountOutMin Minimum amount out\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _swapTokensForTokens(\\n        IUniRouter router,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        uint deadline\\n    ) internal {\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\\n    }\\n\\n    /**\\n     * @notice Tip % of ETH contract balance\\n     * @param tipPct % to tip\\n     */\\n    function _tipPctETH(uint32 tipPct) internal {\\n        uint256 contractBalance = address(this).balance;\\n        uint256 tipAmount = (contractBalance * tipPct) / 1000000;\\n        tipJar.tip{value: tipAmount}();\\n    }\\n\\n    /**\\n     * @notice Tip specific amount of ETH\\n     * @param tipAmount Amount to tip\\n     */\\n    function _tipAmountETH(uint256 tipAmount) internal {\\n        tipJar.tip{value: tipAmount}();\\n    }\\n\\n    /**\\n     * @notice Transfer contract ETH balance to specified user\\n     * @param to User to receive transfer\\n     */\\n    function _transferContractETHBalance(address payable to) internal {\\n        (bool success, ) = to.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /**\\n     * @notice Transfer contract token balance to specified user\\n     * @param token Token to transfer\\n     * @param to User to receive transfer\\n     */\\n    function _transferContractTokenBalance(IERC20Extended token, address payable to) internal {\\n        token.safeTransfer(to, token.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Convert a token balance into ETH and then tip\\n     * @param amountIn Amount to swap\\n     * @param path Path for swap\\n     * @param deadline Block timestamp deadline for trade\\n     */\\n    function _tipWithTokens(\\n        IUniRouter router,\\n        uint amountIn,\\n        address[] memory path,\\n        uint256 deadline,\\n        uint256 minEth\\n    ) internal {\\n        IERC20Extended(path[0]).safeIncreaseAllowance(address(router), amountIn);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, minEth, path, address(this), deadline);\\n        tipJar.tip{value: address(this).balance}();\\n    }\\n\\n    /**\\n     * @notice Permit contract to spend user's balance\\n     * @param token Token to permit\\n     * @param amount Amount to permit\\n     * @param deadline Block timestamp deadline for permit\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _permit(\\n        IERC20Extended token, \\n        uint amount,\\n        uint deadline,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) internal {\\n        token.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    }\\n}\",\"keccak256\":\"0xfe60b3028fef8501d9c0bf135256ace02287c23f606291c31a9d53a8654653e1\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IERC20Extended {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function version() external view returns (uint8);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function receiveWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function nonces(address) external view returns (uint);\\n    function getDomainSeparator() external view returns (bytes32);\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n    function VERSION_HASH() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n    function TRANSFER_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    function RECEIVE_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n}\",\"keccak256\":\"0xb13d030cbb52ac71b1f2e338b3821b29e188dd50c8b62c82ba319be3441ecb49\",\"license\":\"MIT\"},\"contracts/interfaces/ITipJar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITipJar {\\n    function tip() external payable;\\n    function updateMinerSplit(address minerAddress, address splitTo, uint32 splitPct) external;\\n    function setFeeCollector(address newCollector) external;\\n    function setFee(uint32 newFee) external;\\n    function changeAdmin(address newAdmin) external;\\n    function upgradeTo(address newImplementation) external;\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable; \\n}\",\"keccak256\":\"0xb8c5d3f6c6952fcaa36cde58e09128208bad87f7ead3c222853f1286072ba052\",\"license\":\"MIT\"},\"contracts/interfaces/IUniRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniRouter is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\",\"keccak256\":\"0x49a06a7ec967301e97b888a345574626d617691cf85ad27ea7f59ceed8e2ffb4\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xd217e5030771ed77e0df8d1028f05abdaba7df6991fc6e03229d8624c1999d9a\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20Extended.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20Extended;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20Extended token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Extended token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20Extended-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Extended token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Extended token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xa676267f3885c91fe8ded15c38a9ddb8889e5b1aa031f103e88f8a1f8f71646d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620034473803806200344783398101604081905262000034916200004a565b60601b6001600160601b0319166080526200007a565b6000602082840312156200005c578081fd5b81516001600160a01b038116811462000073578182fd5b9392505050565b60805160601c613399620000ae6000396000818161026d0152818161168501528181611ce20152611e2e01526133996000f3fe6080604052600436106101485760003560e01c806361692ecf116100c05780637aaceb9511610074578063b05703fc11610059578063b05703fc146102cb578063e6f03f72146102de578063ef973cc0146102f15761014f565b80637aaceb951461025b578063a8bd55bf146102b85761014f565b80637366e884116100a55780637366e884146102225780637583d2bd1461023557806375b71558146102485761014f565b806361692ecf146101fc578063646318381461020f5761014f565b80633322874611610117578063500e5c7b116100fc578063500e5c7b146101c35780635a7df949146101d65780635e94e5d2146101e95761014f565b8063332287461461019d5780634ea618ac146101b05761014f565b806319a0f5a01461015157806328230aa114610164578063298525f1146101775780632fce15611461018a5761014f565b3661014f57005b005b61014f61015f366004612c81565b610304565b61014f610172366004612c39565b6103ba565b61014f610185366004612d61565b6104b5565b61014f610198366004612ccf565b61056d565b61014f6101ab366004612f1f565b61077e565b61014f6101be366004612b3a565b61080f565b61014f6101d1366004612f1f565b610934565b61014f6101e4366004612db8565b610a7e565b61014f6101f7366004612d61565b610cc4565b61014f61020a366004612be6565b610de3565b61014f61021d366004612ec8565b610f32565b61014f610230366004612b04565b611041565b61014f610243366004612c39565b611103565b61014f610256366004612c81565b6111e0565b34801561026757600080fd5b5061028f7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61014f6102c6366004612c26565b6112ef565b61014f6102d9366004612e61565b6113ac565b61014f6102ec366004612c26565b611457565b61014f6102ff366004612b95565b611524565b60003411610373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064015b60405180910390fd5b61037c34611683565b61039e828235602084013561039460408601866131d8565b8660800135611707565b6103b66103b16080830160608401612ac8565b611834565b5050565b60003411610424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b61042d34611683565b61046661043d6020830183612ac8565b602083013560408401356104576080860160608701612fdc565b85608001358660a001356118a1565b6104b0836104776020850185612ac8565b6104876040860160208701612ac8565b6060860135608087013560a08801356104a660e08a0160c08b01612ac8565b8960e00135611947565b505050565b6000341161051f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b61052f61043d6020830183612ac8565b610551838335602085013561054760408701876131d8565b8760800135611707565b61055a34611683565b6104b06103b16080840160608501612ac8565b60008163ffffffff16116105dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e20300000000000000000000000000000604482015260640161036a565b6105ff86863560208801356105f560408a018a6131d8565b8a60800135611af6565b60008484600081811061063b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906106509190612ac8565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156106bb57600080fd5b505afa1580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f39190612f74565b90506000620f424061070b63ffffffff86168461328f565b6107159190613256565b905061075a898289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808c013589611be8565b6107738361076e60808b0160608c01612ac8565b611d48565b505050505050505050565b60008163ffffffff16116107ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e20300000000000000000000000000000604482015260640161036a565b610806838335602085013561054760408701876131d8565b61055a81611e09565b60003411610879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b6020820135156108bc576108bc6108936020840184612ac8565b602084013560408501356108ad6080870160608801612fdc565b86608001358760a001356118a1565b6020810135156108d6576108d661043d6020830183612ac8565b6108df34611683565b61092e846108f06020860186612ac8565b6109006040870160208801612ac8565b60408701356060880135608089013560a08a013561092460e08c0160c08d01612ac8565b8b60e00135611eb2565b50505050565b60008163ffffffff16116109a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e20300000000000000000000000000000604482015260640161036a565b60003411610a0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f76657220746970000000000000604482015260640161036a565b6000620f4240610a2463ffffffff84163461328f565b610a2e9190613256565b9050610a3981611683565b610a6b8484356020860135610a5160408801886131d8565b610a6160808a0160608b01612ac8565b89608001356121ba565b61092e6103b16080850160608601612ac8565b60008163ffffffff1611610aee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e20300000000000000000000000000000604482015260640161036a565b610b27610afe6020870187612ac8565b60208701356040880135610b1860808a0160608b01612fdc565b89608001358a60a001356118a1565b610b498787356020890135610b3f60408b018b6131d8565b8b60800135611af6565b600084846000818110610b85577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610b9a9190612ac8565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015610c0557600080fd5b505afa158015610c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3d9190612f74565b90506000620f4240610c5563ffffffff86168461328f565b610c5f9190613256565b9050610ca48a8289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808d013589611be8565b610cb88361076e60808c0160608d01612ac8565b50505050505050505050565b60003411610d2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b610d3734611683565b610d4761043d6020830183612ac8565b610d698383356020850135610d5f60408701876131d8565b8760800135611af6565b6104b0610d7960408401846131d8565b610d8660408601866131d8565b9050818110610dbe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610dd39190612ac8565b61076e6080850160608601612ac8565b60008111610e4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b610e5b81606084013561323e565b341015610eea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d7573742073656e642045544820746f20636f76657220746970202b206c697160448201527f7569646974790000000000000000000000000000000000000000000000000000606482015260840161036a565b610ef381611683565b6104b083610f046020850185612ac8565b60408501356060860135608087013560a0880135610f2860e08a0160c08b01612ac8565b8960e00135612243565b60008111610f9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b80341015611006576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f76657220746970000000000000604482015260640161036a565b61100f81611683565b61055a838335602085013561102760408701876131d8565b6110376080890160608a01612ac8565b88608001356121ba565b600034116110ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b6110b434611683565b6103b6826110c56020840184612ac8565b6110d56040850160208601612ac8565b60408501356060860135608087013560a08801356110f960e08a0160c08b01612ac8565b8960e00135611eb2565b6000341161116d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b61117634611683565b61118661043d6020830183612ac8565b6104b0836111976020850185612ac8565b6111a76040860160208701612ac8565b6111b76060870160408801612ac8565b6060870135608088013560a08901356111d660e08b0160c08c01612ac8565b8a60e0013561238b565b6000341161124a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b61125334611683565b611275828235602084013561126b60408601866131d8565b8660800135611af6565b6103b661128560408301836131d8565b61129260408501856131d8565b90508181106112ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906112df9190612ac8565b61076e6080840160608501612ac8565b60003411611359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b61136234611683565b6103b6826113736020840184612ac8565b6113836040850160208601612ac8565b6060850135608086013560a08701356113a260e0890160c08a01612ac8565b8860e00135611947565b60008163ffffffff161161141c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e20300000000000000000000000000000604482015260640161036a565b61142c6108936020840184612ac8565b61144e848435602086013561144460408801886131d8565b8860800135611707565b610a6b81611e09565b600034116114c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b6114ca34611683565b6103b6826114db6020840184612ac8565b6114eb6040850160208601612ac8565b6114fb6060860160408701612ac8565b6060860135608087013560a088013561151a60e08a0160c08b01612ac8565b8960e0013561238b565b6000811161158e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b61159c81606085013561323e565b34101561162b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d7573742073656e642045544820746f20636f76657220746970202b206c697160448201527f7569646974790000000000000000000000000000000000000000000000000000606482015260840161036a565b61163b6108936020840184612ac8565b61164481611683565b61092e846116556020860186612ac8565b60408601356060870135608088013560a089013561167960e08b0160c08c01612ac8565b8a60e00135612243565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156116eb57600080fd5b505af11580156116ff573d6000803e3d6000fd5b505050505050565b600083836000818110611743577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906117589190612ac8565b905061177c73ffffffffffffffffffffffffffffffffffffffff82163330896124e8565b61179d73ffffffffffffffffffffffffffffffffffffffff821688886125c4565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063791ac947906117f990899089908990899030908a90600401613103565b600060405180830381600087803b15801561181357600080fd5b505af1158015611827573d6000803e3d6000fd5b5050505050505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff164760405160006040518083038185875af1925050503d806000811461188e576040519150601f19603f3d011682016040523d82523d6000602084013e611893565b606091505b50509050806103b657600080fd5b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c4810182905273ffffffffffffffffffffffffffffffffffffffff87169063d505accf9060e401600060405180830381600087803b15801561193357600080fd5b505af1158015610cb8573d6000803e3d6000fd5b61196973ffffffffffffffffffffffffffffffffffffffff88163330886124e8565b61198a73ffffffffffffffffffffffffffffffffffffffff881689876125c4565b6040517f02751cec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018790526044820186905260648201859052838116608483015260a4820183905260009182918b16906302751cec9060c4016040805180830381600087803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a539190612f8c565b909250905087611a7a73ffffffffffffffffffffffffffffffffffffffff821633856126d1565b60003373ffffffffffffffffffffffffffffffffffffffff16836040515b60006040518083038185875af1925050503d8060008114611ad5576040519150601f19603f3d011682016040523d82523d6000602084013e611ada565b606091505b5050905080611ae857600080fd5b505050505050505050505050565b600083836000818110611b32577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611b479190612ac8565b9050611b6b73ffffffffffffffffffffffffffffffffffffffff82163330896124e8565b611b8c73ffffffffffffffffffffffffffffffffffffffff821688886125c4565b6040517f5c11d79500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690635c11d795906117f990899089908990899030908a90600401613103565b611c54858585600081518110611c27577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166125c49092919063ffffffff16565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063791ac94790611cae908790859088903090899060040161314e565b600060405180830381600087803b158015611cc857600080fd5b505af1158015611cdc573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561193357600080fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526103b690829073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b158015611db357600080fd5b505afa158015611dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611deb9190612f74565b73ffffffffffffffffffffffffffffffffffffffff851691906126d1565b476000620f4240611e2063ffffffff85168461328f565b611e2a9190613256565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611e9457600080fd5b505af1158015611ea8573d6000803e3d6000fd5b5050505050505050565b8787611ed673ffffffffffffffffffffffffffffffffffffffff831633308b6124e8565b611ef773ffffffffffffffffffffffffffffffffffffffff83168c8a6125c4565b611f1973ffffffffffffffffffffffffffffffffffffffff821633308a6124e8565b611f3a73ffffffffffffffffffffffffffffffffffffffff82168c896125c4565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301528a81166024830152604482018a9052606482018990526084820188905260a4820187905285811660c483015260e4820185905260009182918e169063e8e337009061010401606060405180830381600087803b158015611fdc57600080fd5b505af1158015611ff0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120149190612faf565b5091509150818a11156120e2576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526120e290339073ffffffffffffffffffffffffffffffffffffffff8716906370a082319060240160206040518083038186803b15801561208c57600080fd5b505afa1580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c49190612f74565b73ffffffffffffffffffffffffffffffffffffffff871691906126d1565b808911156121ab576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526121ab90339073ffffffffffffffffffffffffffffffffffffffff8616906370a082319060240160206040518083038186803b15801561215557600080fd5b505afa158015612169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218d9190612f74565b73ffffffffffffffffffffffffffffffffffffffff861691906126d1565b50505050505050505050505050565b6040517fb6f9de9500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063b6f9de9590889061221690899089908990899089906004016130bf565b6000604051808303818588803b15801561222f57600080fd5b505af1158015611ae8573d6000803e3d6000fd5b8661226673ffffffffffffffffffffffffffffffffffffffff821633308a6124e8565b61228773ffffffffffffffffffffffffffffffffffffffff82168a896125c4565b6040517ff305d71900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152602482018990526044820187905260648201869052848116608483015260a4820184905260009182918c169063f305d719908a9060c4016060604051808303818588803b15801561231a57600080fd5b505af115801561232e573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906123539190612faf565b50915091508189111561236e5761236e3361218d848c6132cc565b8088111561182757600033612383838b6132cc565b604051611a98565b6123ad73ffffffffffffffffffffffffffffffffffffffff89163330886124e8565b6123ce73ffffffffffffffffffffffffffffffffffffffff89168a876125c4565b6040517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015260448201879052606482018690526084820185905283811660a483015260c4820183905260009182918c169063baa2abde9060e4016040805180830381600087803b15801561246757600080fd5b505af115801561247b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249f9190612f8c565b909250905088886124c773ffffffffffffffffffffffffffffffffffffffff831633866126d1565b6121ab73ffffffffffffffffffffffffffffffffffffffff821633856126d1565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261092e9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612727565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561263657600080fd5b505afa15801561264a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266e9190612f74565b612678919061323e565b60405173ffffffffffffffffffffffffffffffffffffffff851660248201526044810182905290915061092e9085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401612542565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526104b09084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612542565b6000612789826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166128339092919063ffffffff16565b8051909150156104b057808060200190518101906127a79190612ae4565b6104b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161036a565b6060612842848460008561284c565b90505b9392505050565b6060824710156128de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161036a565b6128e7856129d3565b61294d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161036a565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516129769190613052565b60006040518083038185875af1925050503d80600081146129b3576040519150601f19603f3d011682016040523d82523d6000602084013e6129b8565b606091505b50915091506129c88282866129dd565b979650505050505050565b803b15155b919050565b606083156129ec575081612845565b8251156129fc5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036a919061306e565b60008083601f840112612a41578182fd5b50813567ffffffffffffffff811115612a58578182fd5b6020830191508360208260051b8501011115612a7357600080fd5b9250929050565b60006101008284031215612a8c578081fd5b50919050565b600060c08284031215612a8c578081fd5b600060a08284031215612a8c578081fd5b803563ffffffff811681146129d857600080fd5b600060208284031215612ad9578081fd5b81356128458161333e565b600060208284031215612af5578081fd5b81518015158114612845578182fd5b6000806101208385031215612b17578081fd5b8235612b228161333e565b9150612b318460208501612a7a565b90509250929050565b6000806000806102a08587031215612b50578182fd5b8435612b5b8161333e565b9350612b6a8660208701612a7a565b9250612b7a866101208701612a92565b9150612b8a866101e08701612a92565b905092959194509250565b6000806000806102008587031215612bab578384fd5b8435612bb68161333e565b9350612bc58660208701612a7a565b9250612bd5866101208701612a92565b939692955092936101e00135925050565b60008060006101408486031215612bfb578283fd5b8335612c068161333e565b9250612c158560208601612a7a565b915061012084013590509250925092565b6000806101208385031215612b17578182fd5b60008060006101e08486031215612c4e578283fd5b8335612c598161333e565b9250612c688560208601612a7a565b9150612c78856101208601612a92565b90509250925092565b60008060408385031215612c93578081fd5b8235612c9e8161333e565b9150602083013567ffffffffffffffff811115612cb9578182fd5b612cc585828601612aa3565b9150509250929050565b60008060008060008060a08789031215612ce7578384fd5b8635612cf28161333e565b9550602087013567ffffffffffffffff80821115612d0e578586fd5b612d1a8a838b01612aa3565b96506040890135915080821115612d2f578586fd5b50612d3c89828a01612a30565b90955093505060608701359150612d5560808801612ab4565b90509295509295509295565b60008060006101008486031215612d76578081fd5b8335612d818161333e565b9250602084013567ffffffffffffffff811115612d9c578182fd5b612da886828701612aa3565b925050612c788560408601612a92565b6000806000806000806000610160888a031215612dd3578485fd5b8735612dde8161333e565b9650602088013567ffffffffffffffff80821115612dfa578687fd5b612e068b838c01612aa3565b9750612e158b60408c01612a92565b96506101008a0135915080821115612e2b578283fd5b50612e388a828b01612a30565b9095509350506101208801359150612e536101408901612ab4565b905092959891949750929550565b6000806000806101208587031215612e77578182fd5b8435612e828161333e565b9350602085013567ffffffffffffffff811115612e9d578283fd5b612ea987828801612aa3565b935050612eb98660408701612a92565b9150612b8a6101008601612ab4565b600080600060608486031215612edc578081fd5b8335612ee78161333e565b9250602084013567ffffffffffffffff811115612f02578182fd5b612f0e86828701612aa3565b925050604084013590509250925092565b600080600060608486031215612f33578081fd5b8335612f3e8161333e565b9250602084013567ffffffffffffffff811115612f59578182fd5b612f6586828701612aa3565b925050612c7860408501612ab4565b600060208284031215612f85578081fd5b5051919050565b60008060408385031215612f9e578182fd5b505080516020909101519092909150565b600080600060608486031215612fc3578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215612fed578081fd5b813560ff81168114612845578182fd5b60008284526020808501945082825b8581101561304757813561301f8161333e565b73ffffffffffffffffffffffffffffffffffffffff168752958201959082019060010161300c565b509495945050505050565b600082516130648184602087016132e3565b9190910192915050565b600060208252825180602084015261308d8160408501602087016132e3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000868252608060208301526130d9608083018688612ffd565b73ffffffffffffffffffffffffffffffffffffffff94909416604083015250606001529392505050565b600087825286602083015260a0604083015261312360a083018688612ffd565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156131aa57845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101613178565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261320c578283fd5b83018035915067ffffffffffffffff821115613226578283fd5b6020019150600581901b3603821315612a7357600080fd5b600082198211156132515761325161330f565b500190565b60008261328a577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156132c7576132c761330f565b500290565b6000828210156132de576132de61330f565b500390565b60005b838110156132fe5781810151838201526020016132e6565b8381111561092e5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461336057600080fd5b5056fea2646970667358221220fca530d303e5787e01c5d7c5723e48d2386651d6fab95cae6339212be915a83864736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106101485760003560e01c806361692ecf116100c05780637aaceb9511610074578063b05703fc11610059578063b05703fc146102cb578063e6f03f72146102de578063ef973cc0146102f15761014f565b80637aaceb951461025b578063a8bd55bf146102b85761014f565b80637366e884116100a55780637366e884146102225780637583d2bd1461023557806375b71558146102485761014f565b806361692ecf146101fc578063646318381461020f5761014f565b80633322874611610117578063500e5c7b116100fc578063500e5c7b146101c35780635a7df949146101d65780635e94e5d2146101e95761014f565b8063332287461461019d5780634ea618ac146101b05761014f565b806319a0f5a01461015157806328230aa114610164578063298525f1146101775780632fce15611461018a5761014f565b3661014f57005b005b61014f61015f366004612c81565b610304565b61014f610172366004612c39565b6103ba565b61014f610185366004612d61565b6104b5565b61014f610198366004612ccf565b61056d565b61014f6101ab366004612f1f565b61077e565b61014f6101be366004612b3a565b61080f565b61014f6101d1366004612f1f565b610934565b61014f6101e4366004612db8565b610a7e565b61014f6101f7366004612d61565b610cc4565b61014f61020a366004612be6565b610de3565b61014f61021d366004612ec8565b610f32565b61014f610230366004612b04565b611041565b61014f610243366004612c39565b611103565b61014f610256366004612c81565b6111e0565b34801561026757600080fd5b5061028f7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61014f6102c6366004612c26565b6112ef565b61014f6102d9366004612e61565b6113ac565b61014f6102ec366004612c26565b611457565b61014f6102ff366004612b95565b611524565b60003411610373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064015b60405180910390fd5b61037c34611683565b61039e828235602084013561039460408601866131d8565b8660800135611707565b6103b66103b16080830160608401612ac8565b611834565b5050565b60003411610424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b61042d34611683565b61046661043d6020830183612ac8565b602083013560408401356104576080860160608701612fdc565b85608001358660a001356118a1565b6104b0836104776020850185612ac8565b6104876040860160208701612ac8565b6060860135608087013560a08801356104a660e08a0160c08b01612ac8565b8960e00135611947565b505050565b6000341161051f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b61052f61043d6020830183612ac8565b610551838335602085013561054760408701876131d8565b8760800135611707565b61055a34611683565b6104b06103b16080840160608501612ac8565b60008163ffffffff16116105dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e20300000000000000000000000000000604482015260640161036a565b6105ff86863560208801356105f560408a018a6131d8565b8a60800135611af6565b60008484600081811061063b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906106509190612ac8565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156106bb57600080fd5b505afa1580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f39190612f74565b90506000620f424061070b63ffffffff86168461328f565b6107159190613256565b905061075a898289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808c013589611be8565b6107738361076e60808b0160608c01612ac8565b611d48565b505050505050505050565b60008163ffffffff16116107ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e20300000000000000000000000000000604482015260640161036a565b610806838335602085013561054760408701876131d8565b61055a81611e09565b60003411610879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b6020820135156108bc576108bc6108936020840184612ac8565b602084013560408501356108ad6080870160608801612fdc565b86608001358760a001356118a1565b6020810135156108d6576108d661043d6020830183612ac8565b6108df34611683565b61092e846108f06020860186612ac8565b6109006040870160208801612ac8565b60408701356060880135608089013560a08a013561092460e08c0160c08d01612ac8565b8b60e00135611eb2565b50505050565b60008163ffffffff16116109a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e20300000000000000000000000000000604482015260640161036a565b60003411610a0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f76657220746970000000000000604482015260640161036a565b6000620f4240610a2463ffffffff84163461328f565b610a2e9190613256565b9050610a3981611683565b610a6b8484356020860135610a5160408801886131d8565b610a6160808a0160608b01612ac8565b89608001356121ba565b61092e6103b16080850160608601612ac8565b60008163ffffffff1611610aee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e20300000000000000000000000000000604482015260640161036a565b610b27610afe6020870187612ac8565b60208701356040880135610b1860808a0160608b01612fdc565b89608001358a60a001356118a1565b610b498787356020890135610b3f60408b018b6131d8565b8b60800135611af6565b600084846000818110610b85577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610b9a9190612ac8565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015610c0557600080fd5b505afa158015610c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3d9190612f74565b90506000620f4240610c5563ffffffff86168461328f565b610c5f9190613256565b9050610ca48a8289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808d013589611be8565b610cb88361076e60808c0160608d01612ac8565b50505050505050505050565b60003411610d2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b610d3734611683565b610d4761043d6020830183612ac8565b610d698383356020850135610d5f60408701876131d8565b8760800135611af6565b6104b0610d7960408401846131d8565b610d8660408601866131d8565b9050818110610dbe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610dd39190612ac8565b61076e6080850160608601612ac8565b60008111610e4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b610e5b81606084013561323e565b341015610eea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d7573742073656e642045544820746f20636f76657220746970202b206c697160448201527f7569646974790000000000000000000000000000000000000000000000000000606482015260840161036a565b610ef381611683565b6104b083610f046020850185612ac8565b60408501356060860135608087013560a0880135610f2860e08a0160c08b01612ac8565b8960e00135612243565b60008111610f9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b80341015611006576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f76657220746970000000000000604482015260640161036a565b61100f81611683565b61055a838335602085013561102760408701876131d8565b6110376080890160608a01612ac8565b88608001356121ba565b600034116110ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b6110b434611683565b6103b6826110c56020840184612ac8565b6110d56040850160208601612ac8565b60408501356060860135608087013560a08801356110f960e08a0160c08b01612ac8565b8960e00135611eb2565b6000341161116d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b61117634611683565b61118661043d6020830183612ac8565b6104b0836111976020850185612ac8565b6111a76040860160208701612ac8565b6111b76060870160408801612ac8565b6060870135608088013560a08901356111d660e08b0160c08c01612ac8565b8a60e0013561238b565b6000341161124a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b61125334611683565b611275828235602084013561126b60408601866131d8565b8660800135611af6565b6103b661128560408301836131d8565b61129260408501856131d8565b90508181106112ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906112df9190612ac8565b61076e6080840160608501612ac8565b60003411611359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b61136234611683565b6103b6826113736020840184612ac8565b6113836040850160208601612ac8565b6060850135608086013560a08701356113a260e0890160c08a01612ac8565b8860e00135611947565b60008163ffffffff161161141c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e20300000000000000000000000000000604482015260640161036a565b61142c6108936020840184612ac8565b61144e848435602086013561144460408801886131d8565b8860800135611707565b610a6b81611e09565b600034116114c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b6114ca34611683565b6103b6826114db6020840184612ac8565b6114eb6040850160208601612ac8565b6114fb6060860160408701612ac8565b6060860135608087013560a088013561151a60e08a0160c08b01612ac8565b8960e0013561238b565b6000811161158e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e203000000000000000000000604482015260640161036a565b61159c81606085013561323e565b34101561162b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d7573742073656e642045544820746f20636f76657220746970202b206c697160448201527f7569646974790000000000000000000000000000000000000000000000000000606482015260840161036a565b61163b6108936020840184612ac8565b61164481611683565b61092e846116556020860186612ac8565b60408601356060870135608088013560a089013561167960e08b0160c08c01612ac8565b8a60e00135612243565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156116eb57600080fd5b505af11580156116ff573d6000803e3d6000fd5b505050505050565b600083836000818110611743577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906117589190612ac8565b905061177c73ffffffffffffffffffffffffffffffffffffffff82163330896124e8565b61179d73ffffffffffffffffffffffffffffffffffffffff821688886125c4565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063791ac947906117f990899089908990899030908a90600401613103565b600060405180830381600087803b15801561181357600080fd5b505af1158015611827573d6000803e3d6000fd5b5050505050505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff164760405160006040518083038185875af1925050503d806000811461188e576040519150601f19603f3d011682016040523d82523d6000602084013e611893565b606091505b50509050806103b657600080fd5b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c4810182905273ffffffffffffffffffffffffffffffffffffffff87169063d505accf9060e401600060405180830381600087803b15801561193357600080fd5b505af1158015610cb8573d6000803e3d6000fd5b61196973ffffffffffffffffffffffffffffffffffffffff88163330886124e8565b61198a73ffffffffffffffffffffffffffffffffffffffff881689876125c4565b6040517f02751cec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018790526044820186905260648201859052838116608483015260a4820183905260009182918b16906302751cec9060c4016040805180830381600087803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a539190612f8c565b909250905087611a7a73ffffffffffffffffffffffffffffffffffffffff821633856126d1565b60003373ffffffffffffffffffffffffffffffffffffffff16836040515b60006040518083038185875af1925050503d8060008114611ad5576040519150601f19603f3d011682016040523d82523d6000602084013e611ada565b606091505b5050905080611ae857600080fd5b505050505050505050505050565b600083836000818110611b32577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611b479190612ac8565b9050611b6b73ffffffffffffffffffffffffffffffffffffffff82163330896124e8565b611b8c73ffffffffffffffffffffffffffffffffffffffff821688886125c4565b6040517f5c11d79500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690635c11d795906117f990899089908990899030908a90600401613103565b611c54858585600081518110611c27577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166125c49092919063ffffffff16565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063791ac94790611cae908790859088903090899060040161314e565b600060405180830381600087803b158015611cc857600080fd5b505af1158015611cdc573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561193357600080fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526103b690829073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b158015611db357600080fd5b505afa158015611dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611deb9190612f74565b73ffffffffffffffffffffffffffffffffffffffff851691906126d1565b476000620f4240611e2063ffffffff85168461328f565b611e2a9190613256565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611e9457600080fd5b505af1158015611ea8573d6000803e3d6000fd5b5050505050505050565b8787611ed673ffffffffffffffffffffffffffffffffffffffff831633308b6124e8565b611ef773ffffffffffffffffffffffffffffffffffffffff83168c8a6125c4565b611f1973ffffffffffffffffffffffffffffffffffffffff821633308a6124e8565b611f3a73ffffffffffffffffffffffffffffffffffffffff82168c896125c4565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301528a81166024830152604482018a9052606482018990526084820188905260a4820187905285811660c483015260e4820185905260009182918e169063e8e337009061010401606060405180830381600087803b158015611fdc57600080fd5b505af1158015611ff0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120149190612faf565b5091509150818a11156120e2576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526120e290339073ffffffffffffffffffffffffffffffffffffffff8716906370a082319060240160206040518083038186803b15801561208c57600080fd5b505afa1580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c49190612f74565b73ffffffffffffffffffffffffffffffffffffffff871691906126d1565b808911156121ab576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526121ab90339073ffffffffffffffffffffffffffffffffffffffff8616906370a082319060240160206040518083038186803b15801561215557600080fd5b505afa158015612169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218d9190612f74565b73ffffffffffffffffffffffffffffffffffffffff861691906126d1565b50505050505050505050505050565b6040517fb6f9de9500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063b6f9de9590889061221690899089908990899089906004016130bf565b6000604051808303818588803b15801561222f57600080fd5b505af1158015611ae8573d6000803e3d6000fd5b8661226673ffffffffffffffffffffffffffffffffffffffff821633308a6124e8565b61228773ffffffffffffffffffffffffffffffffffffffff82168a896125c4565b6040517ff305d71900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152602482018990526044820187905260648201869052848116608483015260a4820184905260009182918c169063f305d719908a9060c4016060604051808303818588803b15801561231a57600080fd5b505af115801561232e573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906123539190612faf565b50915091508189111561236e5761236e3361218d848c6132cc565b8088111561182757600033612383838b6132cc565b604051611a98565b6123ad73ffffffffffffffffffffffffffffffffffffffff89163330886124e8565b6123ce73ffffffffffffffffffffffffffffffffffffffff89168a876125c4565b6040517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015260448201879052606482018690526084820185905283811660a483015260c4820183905260009182918c169063baa2abde9060e4016040805180830381600087803b15801561246757600080fd5b505af115801561247b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249f9190612f8c565b909250905088886124c773ffffffffffffffffffffffffffffffffffffffff831633866126d1565b6121ab73ffffffffffffffffffffffffffffffffffffffff821633856126d1565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261092e9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612727565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561263657600080fd5b505afa15801561264a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266e9190612f74565b612678919061323e565b60405173ffffffffffffffffffffffffffffffffffffffff851660248201526044810182905290915061092e9085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401612542565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526104b09084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612542565b6000612789826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166128339092919063ffffffff16565b8051909150156104b057808060200190518101906127a79190612ae4565b6104b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161036a565b6060612842848460008561284c565b90505b9392505050565b6060824710156128de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161036a565b6128e7856129d3565b61294d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161036a565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516129769190613052565b60006040518083038185875af1925050503d80600081146129b3576040519150601f19603f3d011682016040523d82523d6000602084013e6129b8565b606091505b50915091506129c88282866129dd565b979650505050505050565b803b15155b919050565b606083156129ec575081612845565b8251156129fc5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036a919061306e565b60008083601f840112612a41578182fd5b50813567ffffffffffffffff811115612a58578182fd5b6020830191508360208260051b8501011115612a7357600080fd5b9250929050565b60006101008284031215612a8c578081fd5b50919050565b600060c08284031215612a8c578081fd5b600060a08284031215612a8c578081fd5b803563ffffffff811681146129d857600080fd5b600060208284031215612ad9578081fd5b81356128458161333e565b600060208284031215612af5578081fd5b81518015158114612845578182fd5b6000806101208385031215612b17578081fd5b8235612b228161333e565b9150612b318460208501612a7a565b90509250929050565b6000806000806102a08587031215612b50578182fd5b8435612b5b8161333e565b9350612b6a8660208701612a7a565b9250612b7a866101208701612a92565b9150612b8a866101e08701612a92565b905092959194509250565b6000806000806102008587031215612bab578384fd5b8435612bb68161333e565b9350612bc58660208701612a7a565b9250612bd5866101208701612a92565b939692955092936101e00135925050565b60008060006101408486031215612bfb578283fd5b8335612c068161333e565b9250612c158560208601612a7a565b915061012084013590509250925092565b6000806101208385031215612b17578182fd5b60008060006101e08486031215612c4e578283fd5b8335612c598161333e565b9250612c688560208601612a7a565b9150612c78856101208601612a92565b90509250925092565b60008060408385031215612c93578081fd5b8235612c9e8161333e565b9150602083013567ffffffffffffffff811115612cb9578182fd5b612cc585828601612aa3565b9150509250929050565b60008060008060008060a08789031215612ce7578384fd5b8635612cf28161333e565b9550602087013567ffffffffffffffff80821115612d0e578586fd5b612d1a8a838b01612aa3565b96506040890135915080821115612d2f578586fd5b50612d3c89828a01612a30565b90955093505060608701359150612d5560808801612ab4565b90509295509295509295565b60008060006101008486031215612d76578081fd5b8335612d818161333e565b9250602084013567ffffffffffffffff811115612d9c578182fd5b612da886828701612aa3565b925050612c788560408601612a92565b6000806000806000806000610160888a031215612dd3578485fd5b8735612dde8161333e565b9650602088013567ffffffffffffffff80821115612dfa578687fd5b612e068b838c01612aa3565b9750612e158b60408c01612a92565b96506101008a0135915080821115612e2b578283fd5b50612e388a828b01612a30565b9095509350506101208801359150612e536101408901612ab4565b905092959891949750929550565b6000806000806101208587031215612e77578182fd5b8435612e828161333e565b9350602085013567ffffffffffffffff811115612e9d578283fd5b612ea987828801612aa3565b935050612eb98660408701612a92565b9150612b8a6101008601612ab4565b600080600060608486031215612edc578081fd5b8335612ee78161333e565b9250602084013567ffffffffffffffff811115612f02578182fd5b612f0e86828701612aa3565b925050604084013590509250925092565b600080600060608486031215612f33578081fd5b8335612f3e8161333e565b9250602084013567ffffffffffffffff811115612f59578182fd5b612f6586828701612aa3565b925050612c7860408501612ab4565b600060208284031215612f85578081fd5b5051919050565b60008060408385031215612f9e578182fd5b505080516020909101519092909150565b600080600060608486031215612fc3578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215612fed578081fd5b813560ff81168114612845578182fd5b60008284526020808501945082825b8581101561304757813561301f8161333e565b73ffffffffffffffffffffffffffffffffffffffff168752958201959082019060010161300c565b509495945050505050565b600082516130648184602087016132e3565b9190910192915050565b600060208252825180602084015261308d8160408501602087016132e3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000868252608060208301526130d9608083018688612ffd565b73ffffffffffffffffffffffffffffffffffffffff94909416604083015250606001529392505050565b600087825286602083015260a0604083015261312360a083018688612ffd565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156131aa57845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101613178565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261320c578283fd5b83018035915067ffffffffffffffff821115613226578283fd5b6020019150600581901b3603821315612a7357600080fd5b600082198211156132515761325161330f565b500190565b60008261328a577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156132c7576132c761330f565b500290565b6000828210156132de576132de61330f565b500390565b60005b838110156132fe5781810151838201526020016132e6565b8381111561092e5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461336057600080fd5b5056fea2646970667358221220fca530d303e5787e01c5d7c5723e48d2386651d6fab95cae6339212be915a83864736f6c63430008030033",
  "devdoc": {
    "details": "Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas",
    "kind": "dev",
    "methods": {
      "addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "tip amount"
        }
      },
      "addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "tip amount"
        }
      },
      "addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "liquidity": "Liquidity details",
          "permitA": "Permit details for token A",
          "permitB": "Permit details for token B",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "constructor": {
        "params": {
          "_tipJar": "Address of TipJar contract"
        }
      },
      "removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "liquidity": "Liquidity details",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "liquidity": "Liquidity details",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "amount of ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)": {
        "params": {
          "minEth": "ETH minimum for tip conversion",
          "pathToEth": "Path to ETH for tip",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting tokens to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)": {
        "params": {
          "minEth": "ETH minimum for tip conversion",
          "pathToEth": "Path to ETH for tip",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting tokens to pay as tip",
          "trade": "Trade details"
        }
      }
    },
    "title": "ArcherSwapRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))": {
        "notice": "Add liquidity to token pair"
      },
      "addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)": {
        "notice": "Add liquidity to ETH>Token pair"
      },
      "addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)": {
        "notice": "Add liquidity to ETH>Token pair"
      },
      "addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Add liquidity to pair, using permit for approvals"
      },
      "constructor": {
        "notice": "Contructs a new ArcherSwap Router"
      },
      "removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "notice": "Remove liquidity from token>token pair"
      },
      "removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "notice": "Remove liquidity from ETH>token pair"
      },
      "removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Remove liquidity from ETH>token pair, using permit for approval"
      },
      "removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Remove liquidity from token>token pair, using permit for approval"
      },
      "swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)": {
        "notice": "Swap ETH for tokens and pay % of ETH input as tip"
      },
      "swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "notice": "Swap ETH for tokens and pay % of ETH input as tip"
      },
      "swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for ETH and pay amount of ETH as tip"
      },
      "swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "notice": "Swap tokens for ETH and pay % of ETH as tip"
      },
      "swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Swap tokens for ETH and pay amount of ETH as tip, using permit for approval"
      },
      "swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)": {
        "notice": "Swap tokens for ETH and pay % of ETH as tip, using permit for approval"
      },
      "swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Swap tokens for tokens and pay ETH amount as tip"
      },
      "swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)": {
        "notice": "Swap tokens for tokens and pay % of tokens as tip, using permit for approval"
      },
      "swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for tokens and pay ETH amount as tip"
      },
      "swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)": {
        "notice": "Swap tokens for tokens and pay % of tokens as tip"
      },
      "tipJar()": {
        "notice": "TipJar proxy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}