{
  "address": "0xD2F703A1158E6AaA1D336399Be777d94Ba2ba918",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tipJar",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        }
      ],
      "name": "addLiquidityAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETHAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETHWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountADesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBDesired",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.AddLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permitA",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permitB",
          "type": "tuple"
        }
      ],
      "name": "addLiquidityWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityETHAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityETHWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountAMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.RemoveLiquidity",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "removeLiquidityWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        }
      ],
      "name": "swapETHForTokensWithTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapETHForTokensWithTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForETHAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForETHAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForETHWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForETHWithPermitAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForTokensWithPermitAndTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20Extended",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Permit",
          "name": "permit",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "pathToEth",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForTokensWithPermitAndTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swapTokensForTokensWithTipAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniRouter",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct ArcherSwapRouter.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "pathToEth",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tipPct",
          "type": "uint32"
        }
      ],
      "name": "swapTokensForTokensWithTipPct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tipJar",
      "outputs": [
        {
          "internalType": "contract ITipJar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ef4cbf04a4b09adb450b87bdfe727ed2e1c5e097362ec07ddc86422b083377b",
  "receipt": {
    "to": null,
    "from": "0x188f7652808a36A2904531699ccfeE8B6Bbdf77b",
    "contractAddress": "0xD2F703A1158E6AaA1D336399Be777d94Ba2ba918",
    "transactionIndex": 8,
    "gasUsed": "2873688",
    "logsBloom": "0x
    "blockHash": "0x1952dd0ae79338722155ea603b9d444b46e9b31b685db0dc804ab1893b869cc7",
    "transactionHash": "0x2ef4cbf04a4b09adb450b87bdfe727ed2e1c5e097362ec07ddc86422b083377b",
    "logs": [],
    "blockNumber": 8414139,
    "cumulativeGasUsed": "4015242",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x914528335B5d031c93Ac86e6F6A6C67052Eb44f0"
  ],
  "solcInputHash": "9472fafca23ec9262dfbe33b7cb95477",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tipJar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"name\":\"addLiquidityAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.AddLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permitA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permitB\",\"type\":\"tuple\"}],\"name\":\"addLiquidityWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.RemoveLiquidity\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"removeLiquidityWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"}],\"name\":\"swapETHForTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapETHForTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForETHAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForETHAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"swapTokensForETHWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForETHWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"swapTokensForTokensWithPermitAndTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ArcherSwapRouter.Permit\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForTokensWithPermitAndTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swapTokensForTokensWithTipAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ArcherSwapRouter.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"pathToEth\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tipPct\",\"type\":\"uint32\"}],\"name\":\"swapTokensForTokensWithTipPct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tipJar\",\"outputs\":[{\"internalType\":\"contract ITipJar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas\",\"kind\":\"dev\",\"methods\":{\"addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipAmount\":\"tip amount\"}},\"addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipAmount\":\"tip amount\"}},\"addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"permitA\":\"Permit details for token A\",\"permitB\":\"Permit details for token B\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"liquidity\":\"Liquidity details\",\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\"}},\"swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipAmount\":\"amount of ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)\":{\"params\":{\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting ETH to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)\":{\"params\":{\"minEth\":\"ETH minimum for tip conversion\",\"pathToEth\":\"Path to ETH for tip\",\"permit\":\"Permit details\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting tokens to pay as tip\",\"trade\":\"Trade details\"}},\"swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"params\":{\"router\":\"Uniswap V2-compliant Router contract\",\"trade\":\"Trade details\"}},\"swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)\":{\"params\":{\"minEth\":\"ETH minimum for tip conversion\",\"pathToEth\":\"Path to ETH for tip\",\"router\":\"Uniswap V2-compliant Router contract\",\"tipPct\":\"% of resulting tokens to pay as tip\",\"trade\":\"Trade details\"}}},\"title\":\"ArcherSwapRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Add liquidity to token pair\"},\"addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)\":{\"notice\":\"Add liquidity to ETH>Token pair\"},\"addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)\":{\"notice\":\"Add liquidity to ETH>Token pair\"},\"addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Add liquidity to pair, using permit for approvals\"},\"removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Remove liquidity from token>token pair\"},\"removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Remove liquidity from ETH>token pair\"},\"removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Remove liquidity from ETH>token pair, using permit for approval\"},\"removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Remove liquidity from token>token pair, using permit for approval\"},\"swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)\":{\"notice\":\"Swap ETH for tokens and pay % of ETH input as tip\"},\"swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"notice\":\"Swap ETH for tokens and pay % of ETH input as tip\"},\"swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for ETH and pay amount of ETH as tip\"},\"swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)\":{\"notice\":\"Swap tokens for ETH and pay % of ETH as tip\"},\"swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\"},\"swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)\":{\"notice\":\"Swap tokens for ETH and pay % of ETH as tip, using permit for approval\"},\"swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Swap tokens for tokens and pay ETH amount as tip\"},\"swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)\":{\"notice\":\"Swap tokens for tokens and pay % of tokens as tip, using permit for approval\"},\"swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))\":{\"notice\":\"Swap tokens for tokens and pay ETH amount as tip\"},\"swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)\":{\"notice\":\"Swap tokens for tokens and pay % of tokens as tip\"},\"tipJar()\":{\"notice\":\"TipJar proxy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ArcherSwapRouter.sol\":\"ArcherSwapRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/ArcherSwapRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Archer DAO: Chris Piatt (chris@archerdao.io).\\r\\n*/\\r\\n\\r\\nimport \\\"./interfaces/IUniRouter.sol\\\";\\r\\nimport \\\"./interfaces/ITipJar.sol\\\";\\r\\nimport \\\"./interfaces/IERC20Extended.sol\\\";\\r\\nimport \\\"./lib/SafeERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ArcherSwapRouter\\r\\n * @dev Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas\\r\\n */\\r\\ncontract ArcherSwapRouter {\\r\\n    using SafeERC20 for IERC20Extended;\\r\\n\\r\\n    /// @notice TipJar proxy\\r\\n    ITipJar public immutable tipJar;\\r\\n\\r\\n    /// @notice Trade details\\r\\n    struct Trade {\\r\\n        uint amountIn;\\r\\n        uint amountOutMin;\\r\\n        address[] path;\\r\\n        address payable to;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    /// @notice Add Liquidity details\\r\\n    struct AddLiquidity {\\r\\n        address tokenA;\\r\\n        address tokenB;\\r\\n        uint amountADesired;\\r\\n        uint amountBDesired;\\r\\n        uint amountAMin;\\r\\n        uint amountBMin;\\r\\n        address to;\\r\\n        uint deadline;\\r\\n    }\\r\\n\\r\\n    /// @notice Remove Liquidity details\\r\\n    struct RemoveLiquidity {\\r\\n        IERC20Extended lpToken;\\r\\n        address tokenA;\\r\\n        address tokenB;\\r\\n        uint liquidity;\\r\\n        uint amountAMin;\\r\\n        uint amountBMin;\\r\\n        address to;\\r\\n        uint deadline;\\r\\n    }\\r\\n\\r\\n    /// @notice Permit details\\r\\n    struct Permit {\\r\\n        IERC20Extended token;\\r\\n        uint256 amount;\\r\\n        uint deadline;\\r\\n        uint8 v;\\r\\n        bytes32 r; \\r\\n        bytes32 s;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add liquidity to token pair\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param liquidity Liquidity details\\r\\n     */\\r\\n    function addLiquidityAndTipAmount(\\r\\n        IUniRouter router,\\r\\n        AddLiquidity calldata liquidity\\r\\n    ) external payable {\\r\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\r\\n        _tipAmountETH(msg.value);\\r\\n        _addLiquidity(\\r\\n            router,\\r\\n            liquidity.tokenA, \\r\\n            liquidity.tokenB, \\r\\n            liquidity.amountADesired, \\r\\n            liquidity.amountBDesired, \\r\\n            liquidity.amountAMin,\\r\\n            liquidity.amountBMin,\\r\\n            liquidity.to,\\r\\n            liquidity.deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add liquidity to pair, using permit for approvals\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param liquidity Liquidity details\\r\\n     * @param permitA Permit details for token A\\r\\n     * @param permitB Permit details for token B\\r\\n     */\\r\\n    function addLiquidityWithPermitAndTipAmount(\\r\\n        IUniRouter router,\\r\\n        AddLiquidity calldata liquidity,\\r\\n        Permit calldata permitA,\\r\\n        Permit calldata permitB\\r\\n    ) external payable {\\r\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\r\\n        if(permitA.amount > 0) {\\r\\n            _permit(permitA.token, permitA.amount, permitA.deadline, permitA.v, permitA.r, permitA.s);\\r\\n        }\\r\\n        if(permitB.amount > 0) {\\r\\n            _permit(permitB.token, permitB.amount, permitB.deadline, permitB.v, permitB.r, permitB.s);\\r\\n        }\\r\\n        _tipAmountETH(msg.value);\\r\\n        _addLiquidity(\\r\\n            router,\\r\\n            liquidity.tokenA, \\r\\n            liquidity.tokenB, \\r\\n            liquidity.amountADesired, \\r\\n            liquidity.amountBDesired, \\r\\n            liquidity.amountAMin, \\r\\n            liquidity.amountBMin,\\r\\n            liquidity.to,\\r\\n            liquidity.deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add liquidity to ETH>Token pair\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param liquidity Liquidity details\\r\\n     * @param tipAmount tip amount\\r\\n     */\\r\\n    function addLiquidityETHAndTipAmount(\\r\\n        IUniRouter router,\\r\\n        AddLiquidity calldata liquidity,\\r\\n        uint256 tipAmount\\r\\n    ) external payable {\\r\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\r\\n        require(msg.value >= liquidity.amountBDesired + tipAmount, \\\"must send ETH to cover tip + liquidity\\\");\\r\\n        _tipAmountETH(tipAmount);\\r\\n        _addLiquidityETH(\\r\\n            router,\\r\\n            liquidity.tokenA,\\r\\n            liquidity.amountADesired, \\r\\n            liquidity.amountBDesired, \\r\\n            liquidity.amountAMin,\\r\\n            liquidity.amountBMin,\\r\\n            liquidity.to,\\r\\n            liquidity.deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add liquidity to ETH>Token pair\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param liquidity Liquidity details\\r\\n     * @param tipAmount tip amount\\r\\n     */\\r\\n    function addLiquidityETHWithPermitAndTipAmount(\\r\\n        IUniRouter router,\\r\\n        AddLiquidity calldata liquidity,\\r\\n        Permit calldata permit,\\r\\n        uint256 tipAmount\\r\\n    ) external payable {\\r\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\r\\n        require(msg.value >= liquidity.amountBDesired + tipAmount, \\\"must send ETH to cover tip + liquidity\\\");\\r\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\r\\n        _tipAmountETH(tipAmount);\\r\\n        _addLiquidityETH(\\r\\n            router,\\r\\n            liquidity.tokenA,\\r\\n            liquidity.amountADesired, \\r\\n            liquidity.amountBDesired, \\r\\n            liquidity.amountAMin,\\r\\n            liquidity.amountBMin,\\r\\n            liquidity.to,\\r\\n            liquidity.deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove liquidity from token>token pair\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param liquidity Liquidity details\\r\\n     */\\r\\n    function removeLiquidityAndTipAmount(\\r\\n        IUniRouter router,\\r\\n        RemoveLiquidity calldata liquidity\\r\\n    ) external payable {\\r\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\r\\n        _tipAmountETH(msg.value);\\r\\n        _removeLiquidity(\\r\\n            router,\\r\\n            liquidity.lpToken,\\r\\n            liquidity.tokenA, \\r\\n            liquidity.tokenB, \\r\\n            liquidity.liquidity,\\r\\n            liquidity.amountAMin,\\r\\n            liquidity.amountBMin,\\r\\n            liquidity.to,\\r\\n            liquidity.deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove liquidity from ETH>token pair\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param liquidity Liquidity details\\r\\n     */\\r\\n    function removeLiquidityETHAndTipAmount(\\r\\n        IUniRouter router,\\r\\n        RemoveLiquidity calldata liquidity\\r\\n    ) external payable {\\r\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\r\\n        _tipAmountETH(msg.value);\\r\\n        _removeLiquidityETH(\\r\\n            router,\\r\\n            liquidity.lpToken,\\r\\n            liquidity.tokenA,\\r\\n            liquidity.liquidity, \\r\\n            liquidity.amountAMin,\\r\\n            liquidity.amountBMin,\\r\\n            liquidity.to,\\r\\n            liquidity.deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove liquidity from token>token pair, using permit for approval\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param liquidity Liquidity details\\r\\n     * @param permit Permit details\\r\\n     */\\r\\n    function removeLiquidityWithPermitAndTipAmount(\\r\\n        IUniRouter router,\\r\\n        RemoveLiquidity calldata liquidity,\\r\\n        Permit calldata permit\\r\\n    ) external payable {\\r\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\r\\n        _tipAmountETH(msg.value);\\r\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\r\\n        _removeLiquidity(\\r\\n            router,\\r\\n            liquidity.lpToken,\\r\\n            liquidity.tokenA, \\r\\n            liquidity.tokenB, \\r\\n            liquidity.liquidity,\\r\\n            liquidity.amountAMin,\\r\\n            liquidity.amountBMin,\\r\\n            liquidity.to,\\r\\n            liquidity.deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove liquidity from ETH>token pair, using permit for approval\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param liquidity Liquidity details\\r\\n     * @param permit Permit details\\r\\n     */\\r\\n    function removeLiquidityETHWithPermitAndTipAmount(\\r\\n        IUniRouter router,\\r\\n        RemoveLiquidity calldata liquidity,\\r\\n        Permit calldata permit\\r\\n    ) external payable {\\r\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\r\\n        _tipAmountETH(msg.value);\\r\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\r\\n        _removeLiquidityETH(\\r\\n            router,\\r\\n            liquidity.lpToken,\\r\\n            liquidity.tokenA,\\r\\n            liquidity.liquidity, \\r\\n            liquidity.amountAMin,\\r\\n            liquidity.amountBMin,\\r\\n            liquidity.to,\\r\\n            liquidity.deadline\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    constructor(address _tipJar) {\\r\\n        tipJar = ITipJar(_tipJar);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     */\\r\\n    function swapTokensForETHAndTipAmount(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade\\r\\n    ) external payable {\\r\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\r\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _tipAmountETH(msg.value);\\r\\n        _transferContractETHBalance(trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param permit Permit details\\r\\n     */\\r\\n    function swapTokensForETHWithPermitAndTipAmount(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        Permit calldata permit\\r\\n    ) external payable {\\r\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\r\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\r\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _tipAmountETH(msg.value);\\r\\n        _transferContractETHBalance(trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for ETH and pay % of ETH as tip\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param tipPct % of resulting ETH to pay as tip\\r\\n     */\\r\\n    function swapTokensForETHAndTipPct(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        uint32 tipPct\\r\\n    ) external payable {\\r\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\r\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _tipPctETH(tipPct);\\r\\n        _transferContractETHBalance(trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for ETH and pay % of ETH as tip, using permit for approval\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param permit Permit details\\r\\n     * @param tipPct % of resulting ETH to pay as tip\\r\\n     */\\r\\n    function swapTokensForETHWithPermitAndTipPct(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        Permit calldata permit,\\r\\n        uint32 tipPct\\r\\n    ) external payable {\\r\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\r\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\r\\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _tipPctETH(tipPct);\\r\\n        _transferContractETHBalance(trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param tipAmount amount of ETH to pay as tip\\r\\n     */\\r\\n    function swapETHForTokensWithTipAmount(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        uint256 tipAmount\\r\\n    ) external payable {\\r\\n        require(tipAmount > 0, \\\"tip amount must be > 0\\\");\\r\\n        require(msg.value >= tipAmount, \\\"must send ETH to cover tip\\\");\\r\\n        _tipAmountETH(tipAmount);\\r\\n        _swapETHForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _transferContractETHBalance(trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param tipPct % of ETH to pay as tip\\r\\n     */\\r\\n    function swapETHForTokensWithTipPct(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        uint32 tipPct\\r\\n    ) external payable {\\r\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\r\\n        require(msg.value > 0, \\\"must send ETH to cover tip\\\");\\r\\n        uint256 tipAmount = (msg.value * tipPct) / 1000000;\\r\\n        _tipAmountETH(tipAmount);\\r\\n        _swapETHForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _transferContractETHBalance(trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     */\\r\\n    function swapTokensForTokensWithTipAmount(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade\\r\\n    ) external payable {\\r\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\r\\n        _tipAmountETH(msg.value);\\r\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _transferContractTokenBalance(IERC20Extended(trade.path[trade.path.length]), trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for tokens and pay ETH amount as tip\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param permit Permit details\\r\\n     */\\r\\n    function swapTokensForTokensWithPermitAndTipAmount(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        Permit calldata permit\\r\\n    ) external payable {\\r\\n        require(msg.value > 0, \\\"tip amount must be > 0\\\");\\r\\n        _tipAmountETH(msg.value);\\r\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\r\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        _transferContractTokenBalance(IERC20Extended(trade.path[trade.path.length]), trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for tokens and pay % of tokens as tip\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param pathToEth Path to ETH for tip\\r\\n     * @param minEth ETH minimum for tip conversion\\r\\n     * @param tipPct % of resulting tokens to pay as tip\\r\\n     */\\r\\n    function swapTokensForTokensWithTipPct(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        address[] calldata pathToEth,\\r\\n        uint256 minEth,\\r\\n        uint32 tipPct\\r\\n    ) external payable {\\r\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\r\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\r\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\r\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\r\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\r\\n        _transferContractTokenBalance(toToken, trade.to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swap tokens for tokens and pay % of tokens as tip, using permit for approval\\r\\n     * @param router Uniswap V2-compliant Router contract\\r\\n     * @param trade Trade details\\r\\n     * @param permit Permit details\\r\\n     * @param pathToEth Path to ETH for tip\\r\\n     * @param minEth ETH minimum for tip conversion\\r\\n     * @param tipPct % of resulting tokens to pay as tip\\r\\n     */\\r\\n    function swapTokensForTokensWithPermitAndTipPct(\\r\\n        IUniRouter router,\\r\\n        Trade calldata trade,\\r\\n        Permit calldata permit,\\r\\n        address[] calldata pathToEth,\\r\\n        uint256 minEth,\\r\\n        uint32 tipPct\\r\\n    ) external payable {\\r\\n        require(tipPct > 0, \\\"tipPct must be > 0\\\");\\r\\n        _permit(permit.token, permit.amount, permit.deadline, permit.v, permit.r, permit.s);\\r\\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\\r\\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\\r\\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\\r\\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\\r\\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\\r\\n        _transferContractTokenBalance(toToken, trade.to);\\r\\n    }\\r\\n\\r\\n    function _addLiquidity(\\r\\n        IUniRouter router,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) internal {\\r\\n        IERC20Extended fromToken = IERC20Extended(tokenA);\\r\\n        IERC20Extended toToken = IERC20Extended(tokenB);\\r\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountADesired);\\r\\n        fromToken.safeIncreaseAllowance(address(router), amountADesired);\\r\\n        toToken.safeTransferFrom(msg.sender, address(this), amountBDesired);\\r\\n        toToken.safeIncreaseAllowance(address(router), amountBDesired);\\r\\n        (uint256 amountA, uint256 amountB, ) = router.addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline);\\r\\n        if(amountADesired > amountA) {\\r\\n            fromToken.safeTransfer(msg.sender, fromToken.balanceOf(address(this)));\\r\\n        }\\r\\n        if(amountBDesired > amountB) {\\r\\n            toToken.safeTransfer(msg.sender, toToken.balanceOf(address(this)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _addLiquidityETH(\\r\\n        IUniRouter router,\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountETHDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) internal {\\r\\n        IERC20Extended fromToken = IERC20Extended(token);\\r\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountTokenDesired);\\r\\n        fromToken.safeIncreaseAllowance(address(router), amountTokenDesired);\\r\\n        (uint256 amountToken, uint256 amountETH, ) = router.addLiquidityETH{value: amountETHDesired}(token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline);\\r\\n        if(amountTokenDesired > amountToken) {\\r\\n            fromToken.safeTransfer(msg.sender, amountTokenDesired - amountToken);\\r\\n        }\\r\\n        if(amountETHDesired > amountETH) {\\r\\n            (bool success, ) = msg.sender.call{value: amountETHDesired - amountETH}(\\\"\\\");\\r\\n            require(success);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _removeLiquidity(\\r\\n        IUniRouter router,\\r\\n        IERC20Extended lpToken,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) internal {\\r\\n        lpToken.safeTransferFrom(msg.sender, address(this), liquidity);\\r\\n        lpToken.safeIncreaseAllowance(address(router), liquidity);\\r\\n        (uint256 amountA, uint256 amountB) = router.removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\\r\\n        IERC20Extended fromToken = IERC20Extended(tokenA);\\r\\n        IERC20Extended toToken = IERC20Extended(tokenB);\\r\\n        fromToken.safeTransfer(msg.sender, amountA);\\r\\n        toToken.safeTransfer(msg.sender, amountB);\\r\\n    }\\r\\n\\r\\n    function _removeLiquidityETH(\\r\\n        IUniRouter router,\\r\\n        IERC20Extended lpToken,\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) internal {\\r\\n        lpToken.safeTransferFrom(msg.sender, address(this), liquidity);\\r\\n        lpToken.safeIncreaseAllowance(address(router), liquidity);\\r\\n        (uint256 amountToken, uint256 amountETH) = router.removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\\r\\n        IERC20Extended fromToken = IERC20Extended(token);\\r\\n        fromToken.safeTransfer(msg.sender, amountToken);\\r\\n        (bool success, ) = msg.sender.call{value: amountETH}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal implementation of swap ETH for tokens\\r\\n     * @param amountIn Amount to swap\\r\\n     * @param amountOutMin Minimum amount out\\r\\n     * @param path Path for swap\\r\\n     * @param deadline Block timestamp deadline for trade\\r\\n     */\\r\\n    function _swapETHForTokens(\\r\\n        IUniRouter router,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) internal {\\r\\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountIn}(amountOutMin, path, address(this), deadline);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal implementation of swap tokens for ETH\\r\\n     * @param amountIn Amount to swap\\r\\n     * @param amountOutMin Minimum amount out\\r\\n     * @param path Path for swap\\r\\n     * @param deadline Block timestamp deadline for trade\\r\\n     */\\r\\n    function _swapTokensForETH(\\r\\n        IUniRouter router,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) internal {\\r\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\r\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal implementation of swap tokens for tokens\\r\\n     * @param amountIn Amount to swap\\r\\n     * @param amountOutMin Minimum amount out\\r\\n     * @param path Path for swap\\r\\n     * @param deadline Block timestamp deadline for trade\\r\\n     */\\r\\n    function _swapTokensForTokens(\\r\\n        IUniRouter router,\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint deadline\\r\\n    ) internal {\\r\\n        IERC20Extended fromToken = IERC20Extended(path[0]);\\r\\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\\r\\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Tip % of ETH contract balance\\r\\n     * @param tipPct % to tip\\r\\n     */\\r\\n    function _tipPctETH(uint32 tipPct) internal {\\r\\n        uint256 contractBalance = address(this).balance;\\r\\n        uint256 tipAmount = (contractBalance * tipPct) / 1000000;\\r\\n        tipJar.tip{value: tipAmount}();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Tip specific amount of ETH\\r\\n     * @param tipAmount Amount to tip\\r\\n     */\\r\\n    function _tipAmountETH(uint256 tipAmount) internal {\\r\\n        tipJar.tip{value: tipAmount}();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer contract ETH balance to specified user\\r\\n     * @param to User to receive transfer\\r\\n     */\\r\\n    function _transferContractETHBalance(address payable to) internal {\\r\\n        (bool success, ) = to.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer contract token balance to specified user\\r\\n     * @param token Token to transfer\\r\\n     * @param to User to receive transfer\\r\\n     */\\r\\n    function _transferContractTokenBalance(IERC20Extended token, address payable to) internal {\\r\\n        token.safeTransfer(to, token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Convert a token balance into ETH and then tip\\r\\n     * @param amountIn Amount to swap\\r\\n     * @param path Path for swap\\r\\n     * @param deadline Block timestamp deadline for trade\\r\\n     */\\r\\n    function _tipWithTokens(\\r\\n        IUniRouter router,\\r\\n        uint amountIn,\\r\\n        address[] memory path,\\r\\n        uint256 deadline,\\r\\n        uint256 minEth\\r\\n    ) internal {\\r\\n        IERC20Extended(path[0]).safeIncreaseAllowance(address(router), amountIn);\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, minEth, path, address(this), deadline);\\r\\n        tipJar.tip{value: address(this).balance}();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Permit contract to spend user's balance\\r\\n     * @param token Token to permit\\r\\n     * @param amount Amount to permit\\r\\n     * @param deadline Block timestamp deadline for permit\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function _permit(\\r\\n        IERC20Extended token, \\r\\n        uint amount,\\r\\n        uint deadline,\\r\\n        uint8 v, \\r\\n        bytes32 r, \\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        token.permit(msg.sender, address(this), amount, deadline, v, r, s);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3a60c3d5ffe60b0739b90657210e455c30a4bbf35e31fd1db21e3588f5f64f1f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\ninterface IERC20Extended {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function version() external view returns (uint8);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function transferWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    function receiveWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    function getDomainSeparator() external view returns (bytes32);\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\r\\n    function VERSION_HASH() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\r\\n    function TRANSFER_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\r\\n    function RECEIVE_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\r\\n}\",\"keccak256\":\"0x2226562a3a3120356ab01f6dc24e6aba341efe85e9c9c9bb9e0f390b278a30d8\",\"license\":\"MIT\"},\"contracts/interfaces/ITipJar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITipJar {\\r\\n    function tip() external payable;\\r\\n    function updateMinerSplit(address minerAddress, address splitTo, uint32 splitPct) external;\\r\\n    function setFeeCollector(address newCollector) external;\\r\\n    function setFee(uint32 newFee) external;\\r\\n    function changeAdmin(address newAdmin) external;\\r\\n    function upgradeTo(address newImplementation) external;\\r\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable; \\r\\n}\",\"keccak256\":\"0xa145a5877791f99debf33d2654456599834c3016e82c4093dd373a145ca75921\",\"license\":\"MIT\"},\"contracts/interfaces/IUniRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniRouter is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x305c4cc627c68e2e6c26a1dd9344fd9a0919e226b29cbd64421f2a18c7a3a5c7\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x56995dd42ce308cec23c0395dd4319beec31fe36a5622b0298d1d29ddc92f5a1\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IERC20Extended.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20Extended;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20Extended token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20Extended token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20Extended-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20Extended token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20Extended token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x9b8b56fe1babede97026f6d9206b601659db634dedfee057201b105c1663c3d7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200340d3803806200340d83398101604081905262000034916200004a565b60601b6001600160601b0319166080526200007a565b6000602082840312156200005c578081fd5b81516001600160a01b038116811462000073578182fd5b9392505050565b60805160601c61335f620000ae600039600081816102670152818161178c01528181611cbc0152611e08015261335f6000f3fe6080604052600436106101445760003560e01c806361692ecf116100c05780637aaceb9511610074578063b05703fc11610059578063b05703fc146102c5578063e6f03f72146102d8578063ef973cc0146102eb57610144565b80637aaceb9514610255578063a8bd55bf146102b257610144565b80637366e884116100a55780637366e8841461021c5780637583d2bd1461022f57806375b715581461024257610144565b806361692ecf146101f6578063646318381461020957610144565b80633322874611610117578063500e5c7b116100fc578063500e5c7b146101bd5780635a7df949146101d05780635e94e5d2146101e357610144565b806333228746146101975780634ea618ac146101aa57610144565b806319a0f5a01461014957806328230aa11461015e578063298525f1146101715780632fce156114610184575b600080fd5b61015c610157366004612c47565b6102fe565b005b61015c61016c366004612bff565b6103b4565b61015c61017f366004612d27565b6104af565b61015c610192366004612c95565b610567565b61015c6101a5366004612ee5565b610778565b61015c6101b8366004612b00565b610809565b61015c6101cb366004612ee5565b61092e565b61015c6101de366004612d7e565b610a68565b61015c6101f1366004612d27565b610cae565b61015c610204366004612bac565b610dcd565b61015c610217366004612e8e565b610f1c565b61015c61022a366004612aca565b61101b565b61015c61023d366004612bff565b6110dd565b61015c610250366004612c47565b6111ba565b34801561026157600080fd5b506102897f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61015c6102c0366004612bec565b6112c9565b61015c6102d3366004612e27565b611386565b61015c6102e6366004612bec565b611431565b61015c6102f9366004612b5b565b6114fe565b6000341161036d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064015b60405180910390fd5b61038f8282356020840135610385604086018661319e565b866080013561165d565b6103983461178a565b6103b06103ab6080830160608401612a8e565b61180e565b5050565b6000341161041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b6104273461178a565b6104606104376020830183612a8e565b602083013560408401356104516080860160608701612fa2565b85608001358660a0013561187b565b6104aa836104716020850185612a8e565b6104816040860160208701612a8e565b6060860135608087013560a08801356104a060e08a0160c08b01612a8e565b8960e00135611921565b505050565b60003411610519576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b6105296104376020830183612a8e565b61054b8383356020850135610541604087018761319e565b876080013561165d565b6105543461178a565b6104aa6103ab6080840160608501612a8e565b60008163ffffffff16116105d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610364565b6105f986863560208801356105ef60408a018a61319e565b8a60800135611ad0565b600084846000818110610635577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061064a9190612a8e565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156106b557600080fd5b505afa1580156106c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ed9190612f3a565b90506000620f424061070563ffffffff861684613255565b61070f919061321c565b9050610754898289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808c013589611bc2565b61076d8361076860808b0160608c01612a8e565b611d22565b505050505050505050565b60008163ffffffff16116107e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610364565b6108008383356020850135610541604087018761319e565b61055481611de3565b60003411610873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b6020820135156108b6576108b661088d6020840184612a8e565b602084013560408501356108a76080870160608801612fa2565b86608001358760a0013561187b565b6020810135156108d0576108d06104376020830183612a8e565b6108d93461178a565b610928846108ea6020860186612a8e565b6108fa6040870160208801612a8e565b60408701356060880135608089013560a08a013561091e60e08c0160c08d01612a8e565b8b60e00135611e8c565b50505050565b60008163ffffffff161161099e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610364565b60003411610a08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610364565b6000620f4240610a1e63ffffffff841634613255565b610a28919061321c565b9050610a338161178a565b610a558484356020860135610a4b604088018861319e565b8860800135612194565b6109286103ab6080850160608601612a8e565b60008163ffffffff1611610ad8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610364565b610b11610ae86020870187612a8e565b60208701356040880135610b0260808a0160608b01612fa2565b89608001358a60a0013561187b565b610b338787356020890135610b2960408b018b61319e565b8b60800135611ad0565b600084846000818110610b6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610b849190612a8e565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015610bef57600080fd5b505afa158015610c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c279190612f3a565b90506000620f4240610c3f63ffffffff861684613255565b610c49919061321c565b9050610c8e8a8289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808d013589611bc2565b610ca28361076860808c0160608d01612a8e565b50505050505050505050565b60003411610d18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b610d213461178a565b610d316104376020830183612a8e565b610d538383356020850135610d49604087018761319e565b8760800135611ad0565b6104aa610d63604084018461319e565b610d70604086018661319e565b9050818110610da8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610dbd9190612a8e565b6107686080850160608601612a8e565b60008111610e37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b610e45816060840135613204565b341015610ed4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d7573742073656e642045544820746f20636f76657220746970202b206c697160448201527f75696469747900000000000000000000000000000000000000000000000000006064820152608401610364565b610edd8161178a565b6104aa83610eee6020850185612a8e565b60408501356060860135608087013560a0880135610f1260e08a0160c08b01612a8e565b8960e00135612209565b60008111610f86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b80341015610ff0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610364565b610ff98161178a565b6105548383356020850135611011604087018761319e565b8760800135612194565b60003411611085576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b61108e3461178a565b6103b08261109f6020840184612a8e565b6110af6040850160208601612a8e565b60408501356060860135608087013560a08801356110d360e08a0160c08b01612a8e565b8960e00135611e8c565b60003411611147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b6111503461178a565b6111606104376020830183612a8e565b6104aa836111716020850185612a8e565b6111816040860160208701612a8e565b6111916060870160408801612a8e565b6060870135608088013560a08901356111b060e08b0160c08c01612a8e565b8a60e00135612351565b60003411611224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b61122d3461178a565b61124f8282356020840135611245604086018661319e565b8660800135611ad0565b6103b061125f604083018361319e565b61126c604085018561319e565b90508181106112a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906112b99190612a8e565b6107686080840160608501612a8e565b60003411611333576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b61133c3461178a565b6103b08261134d6020840184612a8e565b61135d6040850160208601612a8e565b6060850135608086013560a087013561137c60e0890160c08a01612a8e565b8860e00135611921565b60008163ffffffff16116113f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610364565b61140661088d6020840184612a8e565b611428848435602086013561141e604088018861319e565b886080013561165d565b610a5581611de3565b6000341161149b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b6114a43461178a565b6103b0826114b56020840184612a8e565b6114c56040850160208601612a8e565b6114d56060860160408701612a8e565b6060860135608087013560a08801356114f460e08a0160c08b01612a8e565b8960e00135612351565b60008111611568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b611576816060850135613204565b341015611605576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d7573742073656e642045544820746f20636f76657220746970202b206c697160448201527f75696469747900000000000000000000000000000000000000000000000000006064820152608401610364565b61161561088d6020840184612a8e565b61161e8161178a565b6109288461162f6020860186612a8e565b60408601356060870135608088013560a089013561165360e08b0160c08c01612a8e565b8a60e00135612209565b600083836000818110611699577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906116ae9190612a8e565b90506116d273ffffffffffffffffffffffffffffffffffffffff82163330896124ae565b6116f373ffffffffffffffffffffffffffffffffffffffff8216888861258a565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063791ac9479061174f90899089908990899030908a906004016130c9565b600060405180830381600087803b15801561176957600080fd5b505af115801561177d573d6000803e3d6000fd5b5050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156117f257600080fd5b505af1158015611806573d6000803e3d6000fd5b505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff164760405160006040518083038185875af1925050503d8060008114611868576040519150601f19603f3d011682016040523d82523d6000602084013e61186d565b606091505b50509050806103b057600080fd5b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c4810182905273ffffffffffffffffffffffffffffffffffffffff87169063d505accf9060e401600060405180830381600087803b15801561190d57600080fd5b505af1158015610ca2573d6000803e3d6000fd5b61194373ffffffffffffffffffffffffffffffffffffffff88163330886124ae565b61196473ffffffffffffffffffffffffffffffffffffffff8816898761258a565b6040517f02751cec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018790526044820186905260648201859052838116608483015260a4820183905260009182918b16906302751cec9060c4016040805180830381600087803b1580156119f557600080fd5b505af1158015611a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2d9190612f52565b909250905087611a5473ffffffffffffffffffffffffffffffffffffffff82163385612697565b60003373ffffffffffffffffffffffffffffffffffffffff16836040515b60006040518083038185875af1925050503d8060008114611aaf576040519150601f19603f3d011682016040523d82523d6000602084013e611ab4565b606091505b5050905080611ac257600080fd5b505050505050505050505050565b600083836000818110611b0c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611b219190612a8e565b9050611b4573ffffffffffffffffffffffffffffffffffffffff82163330896124ae565b611b6673ffffffffffffffffffffffffffffffffffffffff8216888861258a565b6040517f5c11d79500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690635c11d7959061174f90899089908990899030908a906004016130c9565b611c2e858585600081518110611c01577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661258a9092919063ffffffff16565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063791ac94790611c889087908590889030908990600401613114565b600060405180830381600087803b158015611ca257600080fd5b505af1158015611cb6573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561190d57600080fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526103b090829073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b158015611d8d57600080fd5b505afa158015611da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc59190612f3a565b73ffffffffffffffffffffffffffffffffffffffff85169190612697565b476000620f4240611dfa63ffffffff851684613255565b611e04919061321c565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611e6e57600080fd5b505af1158015611e82573d6000803e3d6000fd5b5050505050505050565b8787611eb073ffffffffffffffffffffffffffffffffffffffff831633308b6124ae565b611ed173ffffffffffffffffffffffffffffffffffffffff83168c8a61258a565b611ef373ffffffffffffffffffffffffffffffffffffffff821633308a6124ae565b611f1473ffffffffffffffffffffffffffffffffffffffff82168c8961258a565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301528a81166024830152604482018a9052606482018990526084820188905260a4820187905285811660c483015260e4820185905260009182918e169063e8e337009061010401606060405180830381600087803b158015611fb657600080fd5b505af1158015611fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fee9190612f75565b5091509150818a11156120bc576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526120bc90339073ffffffffffffffffffffffffffffffffffffffff8716906370a082319060240160206040518083038186803b15801561206657600080fd5b505afa15801561207a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209e9190612f3a565b73ffffffffffffffffffffffffffffffffffffffff87169190612697565b80891115612185576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015261218590339073ffffffffffffffffffffffffffffffffffffffff8616906370a082319060240160206040518083038186803b15801561212f57600080fd5b505afa158015612143573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121679190612f3a565b73ffffffffffffffffffffffffffffffffffffffff86169190612697565b50505050505050505050505050565b6040517fb6f9de9500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87169063b6f9de959087906121f09088908890889030908990600401613085565b6000604051808303818588803b15801561176957600080fd5b8661222c73ffffffffffffffffffffffffffffffffffffffff821633308a6124ae565b61224d73ffffffffffffffffffffffffffffffffffffffff82168a8961258a565b6040517ff305d71900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152602482018990526044820187905260648201869052848116608483015260a4820184905260009182918c169063f305d719908a9060c4016060604051808303818588803b1580156122e057600080fd5b505af11580156122f4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906123199190612f75565b5091509150818911156123345761233433612167848c613292565b8088111561177d57600033612349838b613292565b604051611a72565b61237373ffffffffffffffffffffffffffffffffffffffff89163330886124ae565b61239473ffffffffffffffffffffffffffffffffffffffff89168a8761258a565b6040517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015260448201879052606482018690526084820185905283811660a483015260c4820183905260009182918c169063baa2abde9060e4016040805180830381600087803b15801561242d57600080fd5b505af1158015612441573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124659190612f52565b9092509050888861248d73ffffffffffffffffffffffffffffffffffffffff83163386612697565b61218573ffffffffffffffffffffffffffffffffffffffff82163385612697565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526109289085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526126ed565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156125fc57600080fd5b505afa158015612610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126349190612f3a565b61263e9190613204565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506109289085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401612508565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526104aa9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612508565b600061274f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127f99092919063ffffffff16565b8051909150156104aa578080602001905181019061276d9190612aaa565b6104aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610364565b60606128088484600085612812565b90505b9392505050565b6060824710156128a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610364565b6128ad85612999565b612913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610364565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161293c9190613018565b60006040518083038185875af1925050503d8060008114612979576040519150601f19603f3d011682016040523d82523d6000602084013e61297e565b606091505b509150915061298e8282866129a3565b979650505050505050565b803b15155b919050565b606083156129b257508161280b565b8251156129c25782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103649190613034565b60008083601f840112612a07578182fd5b50813567ffffffffffffffff811115612a1e578182fd5b6020830191508360208260051b8501011115612a3957600080fd5b9250929050565b60006101008284031215612a52578081fd5b50919050565b600060c08284031215612a52578081fd5b600060a08284031215612a52578081fd5b803563ffffffff8116811461299e57600080fd5b600060208284031215612a9f578081fd5b813561280b81613304565b600060208284031215612abb578081fd5b8151801515811461280b578182fd5b6000806101208385031215612add578081fd5b8235612ae881613304565b9150612af78460208501612a40565b90509250929050565b6000806000806102a08587031215612b16578182fd5b8435612b2181613304565b9350612b308660208701612a40565b9250612b40866101208701612a58565b9150612b50866101e08701612a58565b905092959194509250565b6000806000806102008587031215612b71578384fd5b8435612b7c81613304565b9350612b8b8660208701612a40565b9250612b9b866101208701612a58565b939692955092936101e00135925050565b60008060006101408486031215612bc1578283fd5b8335612bcc81613304565b9250612bdb8560208601612a40565b915061012084013590509250925092565b6000806101208385031215612add578182fd5b60008060006101e08486031215612c14578283fd5b8335612c1f81613304565b9250612c2e8560208601612a40565b9150612c3e856101208601612a58565b90509250925092565b60008060408385031215612c59578081fd5b8235612c6481613304565b9150602083013567ffffffffffffffff811115612c7f578182fd5b612c8b85828601612a69565b9150509250929050565b60008060008060008060a08789031215612cad578384fd5b8635612cb881613304565b9550602087013567ffffffffffffffff80821115612cd4578586fd5b612ce08a838b01612a69565b96506040890135915080821115612cf5578586fd5b50612d0289828a016129f6565b90955093505060608701359150612d1b60808801612a7a565b90509295509295509295565b60008060006101008486031215612d3c578081fd5b8335612d4781613304565b9250602084013567ffffffffffffffff811115612d62578182fd5b612d6e86828701612a69565b925050612c3e8560408601612a58565b6000806000806000806000610160888a031215612d99578485fd5b8735612da481613304565b9650602088013567ffffffffffffffff80821115612dc0578687fd5b612dcc8b838c01612a69565b9750612ddb8b60408c01612a58565b96506101008a0135915080821115612df1578283fd5b50612dfe8a828b016129f6565b9095509350506101208801359150612e196101408901612a7a565b905092959891949750929550565b6000806000806101208587031215612e3d578182fd5b8435612e4881613304565b9350602085013567ffffffffffffffff811115612e63578283fd5b612e6f87828801612a69565b935050612e7f8660408701612a58565b9150612b506101008601612a7a565b600080600060608486031215612ea2578081fd5b8335612ead81613304565b9250602084013567ffffffffffffffff811115612ec8578182fd5b612ed486828701612a69565b925050604084013590509250925092565b600080600060608486031215612ef9578081fd5b8335612f0481613304565b9250602084013567ffffffffffffffff811115612f1f578182fd5b612f2b86828701612a69565b925050612c3e60408501612a7a565b600060208284031215612f4b578081fd5b5051919050565b60008060408385031215612f64578182fd5b505080516020909101519092909150565b600080600060608486031215612f89578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215612fb3578081fd5b813560ff8116811461280b578182fd5b60008284526020808501945082825b8581101561300d578135612fe581613304565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612fd2565b509495945050505050565b6000825161302a8184602087016132a9565b9190910192915050565b60006020825282518060208401526130538160408501602087016132a9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008682526080602083015261309f608083018688612fc3565b73ffffffffffffffffffffffffffffffffffffffff94909416604083015250606001529392505050565b600087825286602083015260a060408301526130e960a083018688612fc3565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b8181101561317057845173ffffffffffffffffffffffffffffffffffffffff168352938301939183019160010161313e565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126131d2578283fd5b83018035915067ffffffffffffffff8211156131ec578283fd5b6020019150600581901b3603821315612a3957600080fd5b60008219821115613217576132176132d5565b500190565b600082613250577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561328d5761328d6132d5565b500290565b6000828210156132a4576132a46132d5565b500390565b60005b838110156132c45781810151838201526020016132ac565b838111156109285750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461332657600080fd5b5056fea26469706673582212206c8432f11f90ac928bfe9d9d622e72e313dded16f76a676f6cfd4ff72d1098e164736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c806361692ecf116100c05780637aaceb9511610074578063b05703fc11610059578063b05703fc146102c5578063e6f03f72146102d8578063ef973cc0146102eb57610144565b80637aaceb9514610255578063a8bd55bf146102b257610144565b80637366e884116100a55780637366e8841461021c5780637583d2bd1461022f57806375b715581461024257610144565b806361692ecf146101f6578063646318381461020957610144565b80633322874611610117578063500e5c7b116100fc578063500e5c7b146101bd5780635a7df949146101d05780635e94e5d2146101e357610144565b806333228746146101975780634ea618ac146101aa57610144565b806319a0f5a01461014957806328230aa11461015e578063298525f1146101715780632fce156114610184575b600080fd5b61015c610157366004612c47565b6102fe565b005b61015c61016c366004612bff565b6103b4565b61015c61017f366004612d27565b6104af565b61015c610192366004612c95565b610567565b61015c6101a5366004612ee5565b610778565b61015c6101b8366004612b00565b610809565b61015c6101cb366004612ee5565b61092e565b61015c6101de366004612d7e565b610a68565b61015c6101f1366004612d27565b610cae565b61015c610204366004612bac565b610dcd565b61015c610217366004612e8e565b610f1c565b61015c61022a366004612aca565b61101b565b61015c61023d366004612bff565b6110dd565b61015c610250366004612c47565b6111ba565b34801561026157600080fd5b506102897f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61015c6102c0366004612bec565b6112c9565b61015c6102d3366004612e27565b611386565b61015c6102e6366004612bec565b611431565b61015c6102f9366004612b5b565b6114fe565b6000341161036d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e20300000000000000000000060448201526064015b60405180910390fd5b61038f8282356020840135610385604086018661319e565b866080013561165d565b6103983461178a565b6103b06103ab6080830160608401612a8e565b61180e565b5050565b6000341161041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b6104273461178a565b6104606104376020830183612a8e565b602083013560408401356104516080860160608701612fa2565b85608001358660a0013561187b565b6104aa836104716020850185612a8e565b6104816040860160208701612a8e565b6060860135608087013560a08801356104a060e08a0160c08b01612a8e565b8960e00135611921565b505050565b60003411610519576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b6105296104376020830183612a8e565b61054b8383356020850135610541604087018761319e565b876080013561165d565b6105543461178a565b6104aa6103ab6080840160608501612a8e565b60008163ffffffff16116105d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610364565b6105f986863560208801356105ef60408a018a61319e565b8a60800135611ad0565b600084846000818110610635577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061064a9190612a8e565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156106b557600080fd5b505afa1580156106c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ed9190612f3a565b90506000620f424061070563ffffffff861684613255565b61070f919061321c565b9050610754898289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808c013589611bc2565b61076d8361076860808b0160608c01612a8e565b611d22565b505050505050505050565b60008163ffffffff16116107e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610364565b6108008383356020850135610541604087018761319e565b61055481611de3565b60003411610873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b6020820135156108b6576108b661088d6020840184612a8e565b602084013560408501356108a76080870160608801612fa2565b86608001358760a0013561187b565b6020810135156108d0576108d06104376020830183612a8e565b6108d93461178a565b610928846108ea6020860186612a8e565b6108fa6040870160208801612a8e565b60408701356060880135608089013560a08a013561091e60e08c0160c08d01612a8e565b8b60e00135611e8c565b50505050565b60008163ffffffff161161099e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610364565b60003411610a08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610364565b6000620f4240610a1e63ffffffff841634613255565b610a28919061321c565b9050610a338161178a565b610a558484356020860135610a4b604088018861319e565b8860800135612194565b6109286103ab6080850160608601612a8e565b60008163ffffffff1611610ad8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610364565b610b11610ae86020870187612a8e565b60208701356040880135610b0260808a0160608b01612fa2565b89608001358a60a0013561187b565b610b338787356020890135610b2960408b018b61319e565b8b60800135611ad0565b600084846000818110610b6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610b849190612a8e565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015610bef57600080fd5b505afa158015610c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c279190612f3a565b90506000620f4240610c3f63ffffffff861684613255565b610c49919061321c565b9050610c8e8a8289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060808d013589611bc2565b610ca28361076860808c0160608d01612a8e565b50505050505050505050565b60003411610d18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b610d213461178a565b610d316104376020830183612a8e565b610d538383356020850135610d49604087018761319e565b8760800135611ad0565b6104aa610d63604084018461319e565b610d70604086018661319e565b9050818110610da8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610dbd9190612a8e565b6107686080850160608601612a8e565b60008111610e37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b610e45816060840135613204565b341015610ed4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d7573742073656e642045544820746f20636f76657220746970202b206c697160448201527f75696469747900000000000000000000000000000000000000000000000000006064820152608401610364565b610edd8161178a565b6104aa83610eee6020850185612a8e565b60408501356060860135608087013560a0880135610f1260e08a0160c08b01612a8e565b8960e00135612209565b60008111610f86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b80341015610ff0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6d7573742073656e642045544820746f20636f766572207469700000000000006044820152606401610364565b610ff98161178a565b6105548383356020850135611011604087018761319e565b8760800135612194565b60003411611085576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b61108e3461178a565b6103b08261109f6020840184612a8e565b6110af6040850160208601612a8e565b60408501356060860135608087013560a08801356110d360e08a0160c08b01612a8e565b8960e00135611e8c565b60003411611147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b6111503461178a565b6111606104376020830183612a8e565b6104aa836111716020850185612a8e565b6111816040860160208701612a8e565b6111916060870160408801612a8e565b6060870135608088013560a08901356111b060e08b0160c08c01612a8e565b8a60e00135612351565b60003411611224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b61122d3461178a565b61124f8282356020840135611245604086018661319e565b8660800135611ad0565b6103b061125f604083018361319e565b61126c604085018561319e565b90508181106112a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906112b99190612a8e565b6107686080840160608501612a8e565b60003411611333576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b61133c3461178a565b6103b08261134d6020840184612a8e565b61135d6040850160208601612a8e565b6060850135608086013560a087013561137c60e0890160c08a01612a8e565b8860e00135611921565b60008163ffffffff16116113f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746970506374206d757374206265203e203000000000000000000000000000006044820152606401610364565b61140661088d6020840184612a8e565b611428848435602086013561141e604088018861319e565b886080013561165d565b610a5581611de3565b6000341161149b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b6114a43461178a565b6103b0826114b56020840184612a8e565b6114c56040850160208601612a8e565b6114d56060860160408701612a8e565b6060860135608087013560a08801356114f460e08a0160c08b01612a8e565b8960e00135612351565b60008111611568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74697020616d6f756e74206d757374206265203e2030000000000000000000006044820152606401610364565b611576816060850135613204565b341015611605576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6d7573742073656e642045544820746f20636f76657220746970202b206c697160448201527f75696469747900000000000000000000000000000000000000000000000000006064820152608401610364565b61161561088d6020840184612a8e565b61161e8161178a565b6109288461162f6020860186612a8e565b60408601356060870135608088013560a089013561165360e08b0160c08c01612a8e565b8a60e00135612209565b600083836000818110611699577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906116ae9190612a8e565b90506116d273ffffffffffffffffffffffffffffffffffffffff82163330896124ae565b6116f373ffffffffffffffffffffffffffffffffffffffff8216888861258a565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88169063791ac9479061174f90899089908990899030908a906004016130c9565b600060405180830381600087803b15801561176957600080fd5b505af115801561177d573d6000803e3d6000fd5b5050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156117f257600080fd5b505af1158015611806573d6000803e3d6000fd5b505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff164760405160006040518083038185875af1925050503d8060008114611868576040519150601f19603f3d011682016040523d82523d6000602084013e61186d565b606091505b50509050806103b057600080fd5b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c4810182905273ffffffffffffffffffffffffffffffffffffffff87169063d505accf9060e401600060405180830381600087803b15801561190d57600080fd5b505af1158015610ca2573d6000803e3d6000fd5b61194373ffffffffffffffffffffffffffffffffffffffff88163330886124ae565b61196473ffffffffffffffffffffffffffffffffffffffff8816898761258a565b6040517f02751cec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018790526044820186905260648201859052838116608483015260a4820183905260009182918b16906302751cec9060c4016040805180830381600087803b1580156119f557600080fd5b505af1158015611a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2d9190612f52565b909250905087611a5473ffffffffffffffffffffffffffffffffffffffff82163385612697565b60003373ffffffffffffffffffffffffffffffffffffffff16836040515b60006040518083038185875af1925050503d8060008114611aaf576040519150601f19603f3d011682016040523d82523d6000602084013e611ab4565b606091505b5050905080611ac257600080fd5b505050505050505050505050565b600083836000818110611b0c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611b219190612a8e565b9050611b4573ffffffffffffffffffffffffffffffffffffffff82163330896124ae565b611b6673ffffffffffffffffffffffffffffffffffffffff8216888861258a565b6040517f5c11d79500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690635c11d7959061174f90899089908990899030908a906004016130c9565b611c2e858585600081518110611c01577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661258a9092919063ffffffff16565b6040517f791ac94700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063791ac94790611c889087908590889030908990600401613114565b600060405180830381600087803b158015611ca257600080fd5b505af1158015611cb6573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561190d57600080fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526103b090829073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b158015611d8d57600080fd5b505afa158015611da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc59190612f3a565b73ffffffffffffffffffffffffffffffffffffffff85169190612697565b476000620f4240611dfa63ffffffff851684613255565b611e04919061321c565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632755cd2d826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611e6e57600080fd5b505af1158015611e82573d6000803e3d6000fd5b5050505050505050565b8787611eb073ffffffffffffffffffffffffffffffffffffffff831633308b6124ae565b611ed173ffffffffffffffffffffffffffffffffffffffff83168c8a61258a565b611ef373ffffffffffffffffffffffffffffffffffffffff821633308a6124ae565b611f1473ffffffffffffffffffffffffffffffffffffffff82168c8961258a565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301528a81166024830152604482018a9052606482018990526084820188905260a4820187905285811660c483015260e4820185905260009182918e169063e8e337009061010401606060405180830381600087803b158015611fb657600080fd5b505af1158015611fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fee9190612f75565b5091509150818a11156120bc576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526120bc90339073ffffffffffffffffffffffffffffffffffffffff8716906370a082319060240160206040518083038186803b15801561206657600080fd5b505afa15801561207a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209e9190612f3a565b73ffffffffffffffffffffffffffffffffffffffff87169190612697565b80891115612185576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015261218590339073ffffffffffffffffffffffffffffffffffffffff8616906370a082319060240160206040518083038186803b15801561212f57600080fd5b505afa158015612143573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121679190612f3a565b73ffffffffffffffffffffffffffffffffffffffff86169190612697565b50505050505050505050505050565b6040517fb6f9de9500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87169063b6f9de959087906121f09088908890889030908990600401613085565b6000604051808303818588803b15801561176957600080fd5b8661222c73ffffffffffffffffffffffffffffffffffffffff821633308a6124ae565b61224d73ffffffffffffffffffffffffffffffffffffffff82168a8961258a565b6040517ff305d71900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152602482018990526044820187905260648201869052848116608483015260a4820184905260009182918c169063f305d719908a9060c4016060604051808303818588803b1580156122e057600080fd5b505af11580156122f4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906123199190612f75565b5091509150818911156123345761233433612167848c613292565b8088111561177d57600033612349838b613292565b604051611a72565b61237373ffffffffffffffffffffffffffffffffffffffff89163330886124ae565b61239473ffffffffffffffffffffffffffffffffffffffff89168a8761258a565b6040517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015260448201879052606482018690526084820185905283811660a483015260c4820183905260009182918c169063baa2abde9060e4016040805180830381600087803b15801561242d57600080fd5b505af1158015612441573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124659190612f52565b9092509050888861248d73ffffffffffffffffffffffffffffffffffffffff83163386612697565b61218573ffffffffffffffffffffffffffffffffffffffff82163385612697565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526109289085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526126ed565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156125fc57600080fd5b505afa158015612610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126349190612f3a565b61263e9190613204565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506109289085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401612508565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526104aa9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612508565b600061274f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127f99092919063ffffffff16565b8051909150156104aa578080602001905181019061276d9190612aaa565b6104aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610364565b60606128088484600085612812565b90505b9392505050565b6060824710156128a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610364565b6128ad85612999565b612913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610364565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161293c9190613018565b60006040518083038185875af1925050503d8060008114612979576040519150601f19603f3d011682016040523d82523d6000602084013e61297e565b606091505b509150915061298e8282866129a3565b979650505050505050565b803b15155b919050565b606083156129b257508161280b565b8251156129c25782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103649190613034565b60008083601f840112612a07578182fd5b50813567ffffffffffffffff811115612a1e578182fd5b6020830191508360208260051b8501011115612a3957600080fd5b9250929050565b60006101008284031215612a52578081fd5b50919050565b600060c08284031215612a52578081fd5b600060a08284031215612a52578081fd5b803563ffffffff8116811461299e57600080fd5b600060208284031215612a9f578081fd5b813561280b81613304565b600060208284031215612abb578081fd5b8151801515811461280b578182fd5b6000806101208385031215612add578081fd5b8235612ae881613304565b9150612af78460208501612a40565b90509250929050565b6000806000806102a08587031215612b16578182fd5b8435612b2181613304565b9350612b308660208701612a40565b9250612b40866101208701612a58565b9150612b50866101e08701612a58565b905092959194509250565b6000806000806102008587031215612b71578384fd5b8435612b7c81613304565b9350612b8b8660208701612a40565b9250612b9b866101208701612a58565b939692955092936101e00135925050565b60008060006101408486031215612bc1578283fd5b8335612bcc81613304565b9250612bdb8560208601612a40565b915061012084013590509250925092565b6000806101208385031215612add578182fd5b60008060006101e08486031215612c14578283fd5b8335612c1f81613304565b9250612c2e8560208601612a40565b9150612c3e856101208601612a58565b90509250925092565b60008060408385031215612c59578081fd5b8235612c6481613304565b9150602083013567ffffffffffffffff811115612c7f578182fd5b612c8b85828601612a69565b9150509250929050565b60008060008060008060a08789031215612cad578384fd5b8635612cb881613304565b9550602087013567ffffffffffffffff80821115612cd4578586fd5b612ce08a838b01612a69565b96506040890135915080821115612cf5578586fd5b50612d0289828a016129f6565b90955093505060608701359150612d1b60808801612a7a565b90509295509295509295565b60008060006101008486031215612d3c578081fd5b8335612d4781613304565b9250602084013567ffffffffffffffff811115612d62578182fd5b612d6e86828701612a69565b925050612c3e8560408601612a58565b6000806000806000806000610160888a031215612d99578485fd5b8735612da481613304565b9650602088013567ffffffffffffffff80821115612dc0578687fd5b612dcc8b838c01612a69565b9750612ddb8b60408c01612a58565b96506101008a0135915080821115612df1578283fd5b50612dfe8a828b016129f6565b9095509350506101208801359150612e196101408901612a7a565b905092959891949750929550565b6000806000806101208587031215612e3d578182fd5b8435612e4881613304565b9350602085013567ffffffffffffffff811115612e63578283fd5b612e6f87828801612a69565b935050612e7f8660408701612a58565b9150612b506101008601612a7a565b600080600060608486031215612ea2578081fd5b8335612ead81613304565b9250602084013567ffffffffffffffff811115612ec8578182fd5b612ed486828701612a69565b925050604084013590509250925092565b600080600060608486031215612ef9578081fd5b8335612f0481613304565b9250602084013567ffffffffffffffff811115612f1f578182fd5b612f2b86828701612a69565b925050612c3e60408501612a7a565b600060208284031215612f4b578081fd5b5051919050565b60008060408385031215612f64578182fd5b505080516020909101519092909150565b600080600060608486031215612f89578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215612fb3578081fd5b813560ff8116811461280b578182fd5b60008284526020808501945082825b8581101561300d578135612fe581613304565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612fd2565b509495945050505050565b6000825161302a8184602087016132a9565b9190910192915050565b60006020825282518060208401526130538160408501602087016132a9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008682526080602083015261309f608083018688612fc3565b73ffffffffffffffffffffffffffffffffffffffff94909416604083015250606001529392505050565b600087825286602083015260a060408301526130e960a083018688612fc3565b73ffffffffffffffffffffffffffffffffffffffff9490941660608301525060800152949350505050565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b8181101561317057845173ffffffffffffffffffffffffffffffffffffffff168352938301939183019160010161313e565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126131d2578283fd5b83018035915067ffffffffffffffff8211156131ec578283fd5b6020019150600581901b3603821315612a3957600080fd5b60008219821115613217576132176132d5565b500190565b600082613250577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561328d5761328d6132d5565b500290565b6000828210156132a4576132a46132d5565b500390565b60005b838110156132c45781810151838201526020016132ac565b838111156109285750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461332657600080fd5b5056fea26469706673582212206c8432f11f90ac928bfe9d9d622e72e313dded16f76a676f6cfd4ff72d1098e164736f6c63430008030033",
  "devdoc": {
    "details": "Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas",
    "kind": "dev",
    "methods": {
      "addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "tip amount"
        }
      },
      "addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "tip amount"
        }
      },
      "addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "liquidity": "Liquidity details",
          "permitA": "Permit details for token A",
          "permitB": "Permit details for token B",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "params": {
          "liquidity": "Liquidity details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "liquidity": "Liquidity details",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "liquidity": "Liquidity details",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract"
        }
      },
      "swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipAmount": "amount of ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting ETH to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)": {
        "params": {
          "minEth": "ETH minimum for tip conversion",
          "pathToEth": "Path to ETH for tip",
          "permit": "Permit details",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting tokens to pay as tip",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "params": {
          "router": "Uniswap V2-compliant Router contract",
          "trade": "Trade details"
        }
      },
      "swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)": {
        "params": {
          "minEth": "ETH minimum for tip conversion",
          "pathToEth": "Path to ETH for tip",
          "router": "Uniswap V2-compliant Router contract",
          "tipPct": "% of resulting tokens to pay as tip",
          "trade": "Trade details"
        }
      }
    },
    "title": "ArcherSwapRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidityAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256))": {
        "notice": "Add liquidity to token pair"
      },
      "addLiquidityETHAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)": {
        "notice": "Add liquidity to ETH>Token pair"
      },
      "addLiquidityETHWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint256)": {
        "notice": "Add liquidity to ETH>Token pair"
      },
      "addLiquidityWithPermitAndTipAmount(address,(address,address,uint256,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Add liquidity to pair, using permit for approvals"
      },
      "removeLiquidityAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "notice": "Remove liquidity from token>token pair"
      },
      "removeLiquidityETHAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256))": {
        "notice": "Remove liquidity from ETH>token pair"
      },
      "removeLiquidityETHWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Remove liquidity from ETH>token pair, using permit for approval"
      },
      "removeLiquidityWithPermitAndTipAmount(address,(address,address,address,uint256,uint256,uint256,address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Remove liquidity from token>token pair, using permit for approval"
      },
      "swapETHForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256),uint256)": {
        "notice": "Swap ETH for tokens and pay % of ETH input as tip"
      },
      "swapETHForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "notice": "Swap ETH for tokens and pay % of ETH input as tip"
      },
      "swapTokensForETHAndTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for ETH and pay amount of ETH as tip"
      },
      "swapTokensForETHAndTipPct(address,(uint256,uint256,address[],address,uint256),uint32)": {
        "notice": "Swap tokens for ETH and pay % of ETH as tip"
      },
      "swapTokensForETHWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Swap tokens for ETH and pay amount of ETH as tip, using permit for approval"
      },
      "swapTokensForETHWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),uint32)": {
        "notice": "Swap tokens for ETH and pay % of ETH as tip, using permit for approval"
      },
      "swapTokensForTokensWithPermitAndTipAmount(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Swap tokens for tokens and pay ETH amount as tip"
      },
      "swapTokensForTokensWithPermitAndTipPct(address,(uint256,uint256,address[],address,uint256),(address,uint256,uint256,uint8,bytes32,bytes32),address[],uint256,uint32)": {
        "notice": "Swap tokens for tokens and pay % of tokens as tip, using permit for approval"
      },
      "swapTokensForTokensWithTipAmount(address,(uint256,uint256,address[],address,uint256))": {
        "notice": "Swap tokens for tokens and pay ETH amount as tip"
      },
      "swapTokensForTokensWithTipPct(address,(uint256,uint256,address[],address,uint256),address[],uint256,uint32)": {
        "notice": "Swap tokens for tokens and pay % of tokens as tip"
      },
      "tipJar()": {
        "notice": "TipJar proxy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}