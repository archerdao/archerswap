{
  "language": "Solidity",
  "sources": {
    "contracts/ArcherSwapRouter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n  Copyright 2021 Archer DAO: Chris Piatt (chris@archerdao.io).\r\n*/\r\n\r\nimport \"./interfaces/IUniRouter.sol\";\r\nimport \"./interfaces/ITipJar.sol\";\r\nimport \"./interfaces/IERC20Extended.sol\";\r\nimport \"./lib/SafeERC20.sol\";\r\n\r\n/**\r\n * @title ArcherSwapRouter\r\n * @dev Allows Uniswap V2 Router-compliant trades to be paid via % tips instead of gas\r\n */\r\ncontract ArcherSwapRouter {\r\n    using SafeERC20 for IERC20Extended;\r\n\r\n    /// @notice TipJar proxy\r\n    ITipJar public immutable tipJar;\r\n\r\n    /// @notice Trade details\r\n    struct Trade {\r\n        uint amountIn;\r\n        uint amountOutMin;\r\n        address[] path;\r\n        address payable to;\r\n        uint256 deadline;\r\n    }\r\n\r\n    constructor(address _tipJar) {\r\n        tipJar = ITipJar(_tipJar);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap tokens for ETH and pay amount of ETH as tip\r\n     * @param router Uniswap V2-compliant Router contract\r\n     * @param trade Trade details\r\n     */\r\n    function swapTokensForETHAndTipAmount(\r\n        IUniRouter router,\r\n        Trade calldata trade\r\n    ) external payable {\r\n        require(msg.value > 0, \"tip amount must be > 0\");\r\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\r\n        _tipAmountETH(msg.value);\r\n        _transferContractETHBalance(trade.to);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap tokens for ETH and pay amount of ETH as tip, using permit for approval\r\n     * @param router Uniswap V2-compliant Router contract\r\n     * @param trade Trade details\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function swapTokensForETHWithPermitAndTipAmount(\r\n        IUniRouter router,\r\n        Trade calldata trade,\r\n        uint8 v, \r\n        bytes32 r, \r\n        bytes32 s\r\n    ) external payable {\r\n        require(msg.value > 0, \"tip amount must be > 0\");\r\n        _permit(IERC20Extended(trade.path[0]), trade.amountIn, trade.deadline, v, r, s);\r\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\r\n        _tipAmountETH(msg.value);\r\n        _transferContractETHBalance(trade.to);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap tokens for ETH and pay % of ETH as tip\r\n     * @param router Uniswap V2-compliant Router contract\r\n     * @param trade Trade details\r\n     * @param tipPct % of resulting ETH to pay as tip\r\n     */\r\n    function swapTokensForETHAndTipPct(\r\n        IUniRouter router,\r\n        Trade calldata trade,\r\n        uint32 tipPct\r\n    ) external payable {\r\n        require(tipPct > 0, \"tipPct must be > 0\");\r\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\r\n        _tipPctETH(tipPct);\r\n        _transferContractETHBalance(trade.to);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap tokens for ETH and pay % of ETH as tip, using permit for approval\r\n     * @param router Uniswap V2-compliant Router contract\r\n     * @param trade Trade details\r\n     * @param tipPct % of resulting ETH to pay as tip\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function swapTokensForETHWithPermitAndTipPct(\r\n        IUniRouter router,\r\n        Trade calldata trade,\r\n        uint32 tipPct,\r\n        uint8 v, \r\n        bytes32 r, \r\n        bytes32 s\r\n    ) external payable {\r\n        require(tipPct > 0, \"tipPct must be > 0\");\r\n        _permit(IERC20Extended(trade.path[0]), trade.amountIn, trade.deadline, v, r, s);\r\n        _swapTokensForETH(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\r\n        _tipPctETH(tipPct);\r\n        _transferContractETHBalance(trade.to);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\r\n     * @param router Uniswap V2-compliant Router contract\r\n     * @param trade Trade details\r\n     * @param tipAmount amount of ETH to pay as tip\r\n     */\r\n    function swapETHForTokensWithTipAmount(\r\n        IUniRouter router,\r\n        Trade calldata trade,\r\n        uint256 tipAmount\r\n    ) external payable {\r\n        require(tipAmount > 0, \"tip amount must be > 0\");\r\n        require(msg.value >= tipAmount, \"must send ETH to cover tip\");\r\n        _tipAmountETH(tipAmount);\r\n        _swapETHForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\r\n        _transferContractETHBalance(trade.to);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap ETH for tokens and pay % of ETH input as tip\r\n     * @param router Uniswap V2-compliant Router contract\r\n     * @param trade Trade details\r\n     * @param tipPct % of ETH to pay as tip\r\n     */\r\n    function swapETHForTokensWithTipPct(\r\n        IUniRouter router,\r\n        Trade calldata trade,\r\n        uint32 tipPct\r\n    ) external payable {\r\n        require(tipPct > 0, \"tipPct must be > 0\");\r\n        require(msg.value > 0, \"must send ETH to cover tip\");\r\n        uint256 tipAmount = (msg.value * tipPct) / 1000000;\r\n        _tipAmountETH(tipAmount);\r\n        _swapETHForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\r\n        _transferContractETHBalance(trade.to);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap tokens for tokens and pay ETH amount as tip\r\n     * @param router Uniswap V2-compliant Router contract\r\n     * @param trade Trade details\r\n     */\r\n    function swapTokensForTokensWithTipAmount(\r\n        IUniRouter router,\r\n        Trade calldata trade\r\n    ) external payable {\r\n        require(msg.value > 0, \"tip amount must be > 0\");\r\n        _tipAmountETH(msg.value);\r\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\r\n        _transferContractTokenBalance(IERC20Extended(trade.path[trade.path.length]), trade.to);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap tokens for tokens and pay ETH amount as tip\r\n     * @param router Uniswap V2-compliant Router contract\r\n     * @param trade Trade details\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function swapTokensForTokensWithPermitAndTipAmount(\r\n        IUniRouter router,\r\n        Trade calldata trade,\r\n        uint8 v, \r\n        bytes32 r, \r\n        bytes32 s\r\n    ) external payable {\r\n        require(msg.value > 0, \"tip amount must be > 0\");\r\n        _tipAmountETH(msg.value);\r\n        _permit(IERC20Extended(trade.path[0]), trade.amountIn, trade.deadline, v, r, s);\r\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\r\n        _transferContractTokenBalance(IERC20Extended(trade.path[trade.path.length]), trade.to);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap tokens for tokens and pay % of tokens as tip\r\n     * @param router Uniswap V2-compliant Router contract\r\n     * @param trade Trade details\r\n     * @param pathToEth Path to ETH for tip\r\n     * @param minEth ETH minimum for tip conversion\r\n     * @param tipPct % of resulting tokens to pay as tip\r\n     */\r\n    function swapTokensForTokensWithTipPct(\r\n        IUniRouter router,\r\n        Trade calldata trade,\r\n        address[] calldata pathToEth,\r\n        uint256 minEth,\r\n        uint32 tipPct\r\n    ) external payable {\r\n        require(tipPct > 0, \"tipPct must be > 0\");\r\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\r\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\r\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\r\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\r\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\r\n        _transferContractTokenBalance(toToken, trade.to);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap tokens for tokens and pay % of tokens as tip, using permit for approval\r\n     * @param router Uniswap V2-compliant Router contract\r\n     * @param trade Trade details\r\n     * @param pathToEth Path to ETH for tip\r\n     * @param minEth ETH minimum for tip conversion\r\n     * @param tipPct % of resulting tokens to pay as tip\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function swapTokensForTokensWithPermitAndTipPct(\r\n        IUniRouter router,\r\n        Trade calldata trade,\r\n        address[] calldata pathToEth,\r\n        uint256 minEth,\r\n        uint32 tipPct,\r\n        uint8 v, \r\n        bytes32 r, \r\n        bytes32 s\r\n    ) external payable {\r\n        require(tipPct > 0, \"tipPct must be > 0\");\r\n        _permit(IERC20Extended(trade.path[0]), trade.amountIn, trade.deadline, v, r, s);\r\n        _swapTokensForTokens(router, trade.amountIn, trade.amountOutMin, trade.path, trade.deadline);\r\n        IERC20Extended toToken = IERC20Extended(pathToEth[0]);\r\n        uint256 contractTokenBalance = toToken.balanceOf(address(this));\r\n        uint256 tipAmount = (contractTokenBalance * tipPct) / 1000000;\r\n        _tipWithTokens(router, tipAmount, pathToEth, trade.deadline, minEth);\r\n        _transferContractTokenBalance(toToken, trade.to);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal implementation of swap ETH for tokens\r\n     * @param amountIn Amount to swap\r\n     * @param amountOutMin Minimum amount out\r\n     * @param path Path for swap\r\n     * @param deadline Block timestamp deadline for trade\r\n     */\r\n    function _swapETHForTokens(\r\n        IUniRouter router,\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        uint256 deadline\r\n    ) internal {\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountIn}(amountOutMin, path, address(this), deadline);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal implementation of swap tokens for ETH\r\n     * @param amountIn Amount to swap\r\n     * @param amountOutMin Minimum amount out\r\n     * @param path Path for swap\r\n     * @param deadline Block timestamp deadline for trade\r\n     */\r\n    function _swapTokensForETH(\r\n        IUniRouter router,\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        uint256 deadline\r\n    ) internal {\r\n        IERC20Extended fromToken = IERC20Extended(path[0]);\r\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\r\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal implementation of swap tokens for tokens\r\n     * @param amountIn Amount to swap\r\n     * @param amountOutMin Minimum amount out\r\n     * @param path Path for swap\r\n     * @param deadline Block timestamp deadline for trade\r\n     */\r\n    function _swapTokensForTokens(\r\n        IUniRouter router,\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        uint deadline\r\n    ) internal {\r\n        IERC20Extended fromToken = IERC20Extended(path[0]);\r\n        fromToken.safeTransferFrom(msg.sender, address(this), amountIn);\r\n        fromToken.safeIncreaseAllowance(address(router), amountIn);\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, amountOutMin, path, address(this), deadline);\r\n    }\r\n\r\n    /**\r\n     * @notice Tip % of ETH contract balance\r\n     * @param tipPct % to tip\r\n     */\r\n    function _tipPctETH(uint32 tipPct) internal {\r\n        uint256 contractBalance = address(this).balance;\r\n        uint256 tipAmount = (contractBalance * tipPct) / 1000000;\r\n        tipJar.tip{value: tipAmount}();\r\n    }\r\n\r\n    /**\r\n     * @notice Tip specific amount of ETH\r\n     * @param tipAmount Amount to tip\r\n     */\r\n    function _tipAmountETH(uint256 tipAmount) internal {\r\n        tipJar.tip{value: tipAmount}();\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer contract ETH balance to specified user\r\n     * @param to User to receive transfer\r\n     */\r\n    function _transferContractETHBalance(address payable to) internal {\r\n        (bool success, ) = to.call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer contract token balance to specified user\r\n     * @param token Token to transfer\r\n     * @param to User to receive transfer\r\n     */\r\n    function _transferContractTokenBalance(IERC20Extended token, address payable to) internal {\r\n        token.safeTransfer(to, token.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice Convert a token balance into ETH and then tip\r\n     * @param amountIn Amount to swap\r\n     * @param path Path for swap\r\n     * @param deadline Block timestamp deadline for trade\r\n     */\r\n    function _tipWithTokens(\r\n        IUniRouter router,\r\n        uint amountIn,\r\n        address[] memory path,\r\n        uint256 deadline,\r\n        uint256 minEth\r\n    ) internal {\r\n        IERC20Extended(path[0]).safeIncreaseAllowance(address(router), amountIn);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, minEth, path, address(this), deadline);\r\n        tipJar.tip{value: address(this).balance}();\r\n    }\r\n\r\n    /**\r\n     * @notice Permit contract to spend user's balance\r\n     * @param token Token to permit\r\n     * @param amount Amount to permit\r\n     * @param deadline Block timestamp deadline for permit\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function _permit(\r\n        IERC20Extended token, \r\n        uint amount,\r\n        uint deadline,\r\n        uint8 v, \r\n        bytes32 r, \r\n        bytes32 s\r\n    ) internal {\r\n        token.permit(msg.sender, address(this), amount, deadline, v, r, s);\r\n    }\r\n}"
    },
    "contracts/interfaces/IUniRouter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniRouter is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"
    },
    "contracts/interfaces/ITipJar.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITipJar {\r\n    function tip() external payable;\r\n    function updateMinerSplit(address minerAddress, address splitTo, uint32 splitPct) external;\r\n    function setFeeCollector(address newCollector) external;\r\n    function setFee(uint32 newFee) external;\r\n    function changeAdmin(address newAdmin) external;\r\n    function upgradeTo(address newImplementation) external;\r\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable; \r\n}"
    },
    "contracts/interfaces/IERC20Extended.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\ninterface IERC20Extended {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function version() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\r\n    function receiveWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    function getDomainSeparator() external view returns (bytes32);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\r\n    function VERSION_HASH() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external view returns (bytes32);\r\n    function TRANSFER_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\r\n    function RECEIVE_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\r\n}"
    },
    "contracts/lib/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../interfaces/IERC20Extended.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20Extended;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20Extended token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20Extended token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20Extended-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20Extended token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20Extended token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Extended token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}"
    },
    "contracts/lib/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 99999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}